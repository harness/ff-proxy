// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"encoding/json"
	"fmt"
)

const (
	ApiKeyScopes     = "ApiKey.Scopes"
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ApiKeyType.
const (
	ApiKeyTypeClient ApiKeyType = "client"
	ApiKeyTypeServer ApiKeyType = "server"
)

// Defines values for ApiKeyRequestType.
const (
	ApiKeyRequestTypeClient ApiKeyRequestType = "Client"
	ApiKeyRequestTypeServer ApiKeyRequestType = "Server"
)

// Defines values for FeatureKind.
const (
	FeatureKindBoolean FeatureKind = "boolean"
	FeatureKindInt     FeatureKind = "int"
	FeatureKindJson    FeatureKind = "json"
	FeatureKindString  FeatureKind = "string"
)

// Defines values for FeatureFlagRequestKind.
const (
	FeatureFlagRequestKindBoolean FeatureFlagRequestKind = "boolean"
	FeatureFlagRequestKindInt     FeatureFlagRequestKind = "int"
	FeatureFlagRequestKindJson    FeatureFlagRequestKind = "json"
	FeatureFlagRequestKindString  FeatureFlagRequestKind = "string"
)

// Defines values for FeatureState.
const (
	FeatureStateOff FeatureState = "off"
	FeatureStateOn  FeatureState = "on"
)

// Defines values for FeatureStatusStatus.
const (
	FeatureStatusStatusActive         FeatureStatusStatus = "active"
	FeatureStatusStatusInactive       FeatureStatusStatus = "inactive"
	FeatureStatusStatusNeverRequested FeatureStatusStatus = "never-requested"
)

// Defines values for FlagType.
const (
	FlagTypeBoolean FlagType = "boolean"
	FlagTypeJson    FlagType = "json"
	FlagTypeNumber  FlagType = "number"
	FlagTypeString  FlagType = "string"
)

// Defines values for SdkType.
const (
	SdkTypeClient SdkType = "client"
	SdkTypeServer SdkType = "server"
)

// Defines values for SegmentFlagType.
const (
	SegmentFlagTypeCONDITION SegmentFlagType = "CONDITION"
	SegmentFlagTypeDIRECT    SegmentFlagType = "DIRECT"
)

// Defines values for Status.
const (
	StatusERROR   Status = "ERROR"
	StatusFAILURE Status = "FAILURE"
	StatusSUCCESS Status = "SUCCESS"
)

// Defines values for TargetAndSegmentType.
const (
	TargetAndSegmentTypeSegment TargetAndSegmentType = "segment"
	TargetAndSegmentTypeTarget  TargetAndSegmentType = "target"
)

// Defines values for AuditSortByField.
const (
	Action     AuditSortByField = "action"
	Actor      AuditSortByField = "actor"
	ExecutedOn AuditSortByField = "executed_on"
)

// Defines values for AuditSortOrder.
const (
	AuditSortOrderASC  AuditSortOrder = "ASC"
	AuditSortOrderDESC AuditSortOrder = "DESC"
)

// Defines values for KindQueryParam.
const (
	Boolean KindQueryParam = "boolean"
	Int     KindQueryParam = "int"
	Json    KindQueryParam = "json"
	String  KindQueryParam = "string"
)

// Defines values for ObjectTypeQueryParam.
const (
	ObjectTypeQueryParamFeatureActivation ObjectTypeQueryParam = "FeatureActivation"
	ObjectTypeQueryParamSegment           ObjectTypeQueryParam = "Segment"
)

// Defines values for SafSortByField.
const (
	SafSortByFieldName SafSortByField = "name"
)

// Defines values for SafSortOrder.
const (
	SafSortOrderASCENDING  SafSortOrder = "ASCENDING"
	SafSortOrderDESCENDING SafSortOrder = "DESCENDING"
)

// Defines values for SortByField.
const (
	SortByFieldArchived   SortByField = "archived"
	SortByFieldIdentifier SortByField = "identifier"
	SortByFieldKind       SortByField = "kind"
	SortByFieldModifiedAt SortByField = "modifiedAt"
	SortByFieldName       SortByField = "name"
)

// Defines values for SortOrder.
const (
	SortOrderASCENDING  SortOrder = "ASCENDING"
	SortOrderDESCENDING SortOrder = "DESCENDING"
)

// Defines values for TargetSortByField.
const (
	TargetSortByFieldCreatedAt  TargetSortByField = "createdAt"
	TargetSortByFieldIdentifier TargetSortByField = "identifier"
	TargetSortByFieldName       TargetSortByField = "name"
)

// Defines values for TargetSortOrder.
const (
	TargetSortOrderASC  TargetSortOrder = "ASC"
	TargetSortOrderDESC TargetSortOrder = "DESC"
)

// Defines values for TasSortByField.
const (
	TasSortByFieldName TasSortByField = "name"
)

// Defines values for TasSortOrder.
const (
	ASCENDING  TasSortOrder = "ASCENDING"
	DESCENDING TasSortOrder = "DESCENDING"
)

// Defines values for TsSortByField.
const (
	TsSortByFieldIdentifier TsSortByField = "identifier"
	TsSortByFieldName       TsSortByField = "name"
)

// Defines values for TsSortOrder.
const (
	ASC  TsSortOrder = "ASC"
	DESC TsSortOrder = "DESC"
)

// An AIDA Response
type Aida struct {
	// The Response from AIDA
	Text string `json:"text"`
}

// The API key is used by SDKs to connect to Harness Feature Flags
type ApiKey struct {
	// The Key will be shown only on create. On subsequent GET calls, only the masked APIKeys will be returned
	ApiKey string `json:"apiKey"`

	// The environment that this key was created in
	Identifier string `json:"identifier"`

	// A hash of API key
	Key *string `json:"key,omitempty"`

	// The user friendly identifier for the API Key
	Name string `json:"name"`

	// The type of key depending on the SDK that is being used.
	Type ApiKeyType `json:"type"`
}

// The type of key depending on the SDK that is being used.
type ApiKeyType string

// The type of key depending on the SDK that is being used.
type ApiKeyRequestType string

// ApiKeys defines model for ApiKeys.
type ApiKeys struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ApiKeys *[]ApiKey `json:"apiKeys,omitempty"`
}

// The audit trail shows events that have occured for a given object
type AuditTrail struct {
	// The action which triggered the event such as Created or Patched
	Action string `json:"action"`

	// The user that performed the event
	Actor string `json:"actor"`

	// A user specified comment when performing the action
	Comment string `json:"comment"`

	// The environment identifier
	Environment string `json:"environment"`

	// The date in milliseconds the event was performed
	ExecutedOn int `json:"executedOn"`

	// JSON payload representing the instruction that triggered the audit event
	InstructionSet []map[string]interface{} `json:"instructionSet"`
	ObjectAfter    string                   `json:"objectAfter"`
	ObjectBefore   string                   `json:"objectBefore"`

	// The objects identifier
	ObjectIdentifier string `json:"objectIdentifier"`

	// The type of the object such as Target, FeatureConfig
	ObjectType string `json:"objectType"`

	// The project identifier
	Project string `json:"project"`

	// The status of the event indicating if it was successful or not
	Status string `json:"status"`
}

// AuditTrails defines model for AuditTrails.
type AuditTrails struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	AuditTrails *[]AuditTrail `json:"auditTrails,omitempty"`
}

// A clause describes what conditions are used to evaluate a flag
type Clause struct {
	// The attribute to use in the clause.  This can be any target attribute
	Attribute string `json:"attribute"`

	// The unique ID for the clause
	Id *string `json:"id,omitempty"`

	// Is the operation negated?
	Negate bool `json:"negate"`

	// The type of operation such as equals, starts_with, contains
	Op string `json:"op"`

	// The values that are compared against the operator
	Values []string `json:"values"`
}

// Describes a distribution rule
type Distribution struct {
	// The attribute to use when distributing targets across buckets
	BucketBy string `json:"bucketBy"`

	// A list of variations and the weight that should be given to each
	Variations []WeightedVariation `json:"variations"`
}

// Environment Response
type Environment struct {
	// A list of API Keys
	ApiKeys ApiKeys `json:"apiKeys"`

	// A description for this Environment
	Description *string `json:"description,omitempty"`

	// The Environment internal ID
	Id *string `json:"id,omitempty"`

	// The Environment identifier
	Identifier string `json:"identifier"`

	// The user friendly name of the Environment
	Name string `json:"name"`

	// The project for this Environment
	Project string `json:"project"`
	Tags    *[]Tag `json:"tags,omitempty"`
}

// A list of Environments
type Environments struct {
	Environments *[]Environment `json:"environments,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// The http error code
	Code string `json:"code"`

	// Additional details about the error
	Details *map[string]interface{} `json:"details,omitempty"`

	// The reason the request failed
	Message string `json:"message"`
}

// A Feature Flag response
type Feature struct {
	// Indicates if the flag has been archived and is no longer used
	Archived *bool `json:"archived,omitempty"`

	// The date the flag was created in milliseconds
	CreatedAt int64 `json:"createdAt"`

	// The default value returned when a flag is off
	DefaultOffVariation string `json:"defaultOffVariation"`

	// The default value returned when a flag is on
	DefaultOnVariation string `json:"defaultOnVariation"`

	// A description for this flag
	Description *string `json:"description,omitempty"`

	// The Feature Flag rules for a given environment
	EnvProperties *struct {
		// Describe the distribution rule and the variation that should be served to the target
		DefaultServe Serve `json:"defaultServe"`

		// The environment identifier
		Environment string `json:"environment"`

		// Indicates whether jira functionality is enabled for the given account, project, org, and environment
		JiraEnabled *bool `json:"jiraEnabled,omitempty"`

		// An array of Jira Issues linked to this Feature. Returns empty if none exist
		JiraIssues *[]JiraIssue `json:"jiraIssues,omitempty"`

		// The last time the flag was modified in this environment
		ModifiedAt *int64 `json:"modifiedAt,omitempty"`

		// The variation to serve for this flag in this environment when the flag is off
		OffVariation       string `json:"offVariation"`
		PipelineConfigured bool   `json:"pipelineConfigured"`

		// A pipeline configured to update a feature
		PipelineDetails     *FeaturePipeline `json:"pipelineDetails,omitempty"`
		PipelineErrorReason *string          `json:"pipelineErrorReason,omitempty"`
		PipelineErrorState  *bool            `json:"pipelineErrorState,omitempty"`

		// A list of rules to use when evaluating this flag in this environment
		Rules *[]ServingRule `json:"rules,omitempty"`

		// The state of a flag either off or on
		State FeatureState `json:"state"`

		// A list of the variations that will be served to specific targets or target groups in an environment.
		VariationMap *[]VariationMap `json:"variationMap,omitempty"`

		// The version of the flag.  This is incremented each time it is changed
		Version *int64 `json:"version,omitempty"`
	} `json:"envProperties,omitempty"`

	// The value that the flag will return for the current user
	Evaluation *string `json:"evaluation,omitempty"`

	// The identifier for the returned evaluation
	EvaluationIdentifier *string `json:"evaluationIdentifier,omitempty"`

	// The Feature Flag identifier
	Identifier string `json:"identifier"`

	// The type of Feature flag
	Kind FeatureKind `json:"kind"`

	// The date the flag was last modified in milliseconds
	ModifiedAt *int64 `json:"modifiedAt,omitempty"`

	// The name of the Feature Flag
	Name string `json:"name"`

	// The user who created the flag
	Owner *[]string `json:"owner,omitempty"`

	// Indicates if this is a permanent flag, or one that should expire
	Permanent     *bool           `json:"permanent,omitempty"`
	Prerequisites *[]Prerequisite `json:"prerequisites,omitempty"`

	// The project this Feature belongs to
	Project string `json:"project"`

	// The results shows which variations have been evaluated, and how many times each of these have been evaluated.
	Results *[]Results `json:"results,omitempty"`

	// A list of services linked to this Feature Flag
	Services *[]Service `json:"services,omitempty"`

	// Whether the flag is stale or not
	Stale *bool `json:"stale,omitempty"`

	// The reason that the flag was marked as stale
	StaleReason *string `json:"staleReason,omitempty"`

	// Indicates when the flag was last evaluated
	Status *FeatureStatus `json:"status,omitempty"`

	// A list of tags for this Feature Flag
	Tags *[]Tag `json:"tags,omitempty"`

	// The variations that can be returned for this flag
	Variations []Variation `json:"variations"`
}

// The type of Feature flag
type FeatureKind string

// A Feature Flag pipeline is a pipeline that is able to perform a flag update
type FeatureAvailablePipeline struct {
	// creation date in milliseconds
	CreatedAt *int `json:"createdAt,omitempty"`

	// The description of the pipeline
	Description *string `json:"description,omitempty"`

	// The identifier of the pipeline
	Identifier string `json:"identifier"`

	// last updated date in milliseconds
	LastUpdatedAt *int `json:"lastUpdatedAt,omitempty"`

	// The name of the pipeline
	Name string `json:"name"`
}

// FeatureAvailablePipelines defines model for FeatureAvailablePipelines.
type FeatureAvailablePipelines struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	AvailablePipelines []FeatureAvailablePipeline `json:"availablePipelines"`
}

// FeatureCounts defines model for FeatureCounts.
type FeatureCounts struct {
	// The total number of flags with a active status in a project/environment
	TotalActive *int `json:"totalActive,omitempty"`

	// The total number of archived flags in the project/environment
	TotalArchived *int `json:"totalArchived,omitempty"`

	// The total number of flags that are turned on in a project/environment
	TotalEnabled *int `json:"totalEnabled,omitempty"`

	// The total number of flags in the project/environment
	TotalFeatures *int `json:"totalFeatures,omitempty"`

	// The total number of permanent flags in a project/environment
	TotalPermanent *int `json:"totalPermanent,omitempty"`

	// The total number of flags with a potentially-stale status in a project/environment
	TotalPotentiallyStale *int `json:"totalPotentiallyStale,omitempty"`

	// The total number of flags with a recently-accessed status in a project/environment
	TotalRecentlyAccessed *int `json:"totalRecentlyAccessed,omitempty"`
}

// A Feature Flag evaluation describes a variation for the flag and the number of times it was evaluated
type FeatureEvaluation struct {
	// The number of times this variation has been evaluated
	Count *int `json:"count,omitempty"`

	// The date in milliseconds
	Date *int `json:"date,omitempty"`

	// The variation identifier
	VariationIdentifier *string `json:"variationIdentifier,omitempty"`

	// The user friendly name for this variation
	VariationName *string `json:"variationName,omitempty"`
}

// A list of Feature Evaluations
type FeatureEvaluations struct {
	Evaluations *[]FeatureEvaluation `json:"evaluations,omitempty"`
}

// FeatureFlagRequestKind defines model for FeatureFlagRequestKind.
type FeatureFlagRequestKind string

// Feature flags yaml for a project
type FeatureFlagsYaml struct {
	// The yaml payload describing the feature flags configuration
	Yaml string `json:"yaml"`
}

// FeatureMetric defines model for FeatureMetric.
type FeatureMetric struct {
	// The feature flag identifier
	Identifier *string `json:"identifier,omitempty"`

	// The name of the feature flag
	Name    *string    `json:"name,omitempty"`
	Results *[]Results `json:"results,omitempty"`

	// Indicates when the flag was last evaluated
	Status *FeatureStatus `json:"status,omitempty"`
}

// A list of FeatureMetrics
type FeatureMetrics []FeatureMetric

// A pipeline configured to update a feature
type FeaturePipeline struct {
	// creation date in milliseconds
	CreatedAt *int `json:"createdAt,omitempty"`

	// The description of the pipeline
	Description *string `json:"description,omitempty"`

	// The identifier of the pipeline
	Identifier string `json:"identifier"`

	// last updated date in milliseconds
	LastUpdatedAt *int `json:"lastUpdatedAt,omitempty"`

	// The name of the pipeline
	Name string `json:"name"`
}

// A pipeline execution to edit a feature
type FeaturePipelineExecution struct {
	// created date in milliseconds
	CreatedAt int `json:"createdAt"`

	// timestamp of the end of the pipeline execution in milliseconds
	EndTs *int `json:"endTs,omitempty"`

	// The environment of the pipeline execution
	Environment string `json:"environment"`

	// The error info of the pipeline execution
	ExecutionErrorInfo *string `json:"executionErrorInfo,omitempty"`

	// The id of the pipeline execution
	ExecutionId string `json:"executionId"`

	// The number of failed stages in the pipeline execution
	FailedStagesCount *int `json:"failedStagesCount,omitempty"`

	// The id of the pipeline sequence
	RunSequence *int `json:"runSequence,omitempty"`

	// The number of running stages in the pipeline execution
	RunningStagesCount *int `json:"runningStagesCount,omitempty"`

	// timestamp of the start of the pipeline execution in milliseconds
	StartTs *int `json:"startTs,omitempty"`

	// The status of the pipeline execution
	Status string `json:"status"`

	// The number of succeeded stages in the pipeline execution
	SucceededStagesCount *int `json:"succeededStagesCount,omitempty"`

	// The number of stages in the pipeline execution
	TotalStagesCount *int `json:"totalStagesCount,omitempty"`

	// The trigger details of the pipeline execution
	TriggerDetails struct {
		// Describe the distribution rule and the variation that should be served to the target
		DefaultOffVariation *Serve `json:"defaultOffVariation,omitempty"`

		// Describe the distribution rule and the variation that should be served to the target
		DefaultServe *Serve `json:"defaultServe,omitempty"`

		// A list of rules to use when evaluating this flag in this environment
		Rules *[]ServingRule `json:"rules,omitempty"`

		// The state of a flag either off or on
		State *FeatureState `json:"state,omitempty"`

		// A list of the variations that will be served to specific targets or target groups in an environment.
		VariationMap *[]VariationMap `json:"variationMap,omitempty"`
	} `json:"triggerDetails"`

	// The user who triggered the pipeline execution
	TriggeredBy *string `json:"triggeredBy,omitempty"`
}

// FeaturePipelineResp defines model for FeaturePipelineResp.
type FeaturePipelineResp struct {
	ExecutionHistory   *[]FeaturePipelineExecution `json:"executionHistory,omitempty"`
	PipelineConfigured bool                        `json:"pipelineConfigured"`

	// A pipeline configured to update a feature
	PipelineDetails     *FeaturePipeline `json:"pipelineDetails,omitempty"`
	PipelineErrorReason *string          `json:"pipelineErrorReason,omitempty"`
	PipelineErrorState  *bool            `json:"pipelineErrorState,omitempty"`
}

// FeatureResponseMetadata defines model for FeatureResponseMetadata.
type FeatureResponseMetadata struct {
	// Additional metadata about the request
	Details *struct {
		// Summary of governance checks including any warnings
		GovernanceMetadata *map[string]interface{} `json:"governanceMetadata,omitempty"`

		// Info about the pipeline whether a pipeline was triggered
		PipelineMetadata *struct {
			// The ID of the pipeline execution
			PipelineExecutionId *string `json:"pipelineExecutionId,omitempty"`

			// Whether a pipeline was triggered
			PipelineTriggered *bool `json:"pipelineTriggered,omitempty"`
		} `json:"pipelineMetadata,omitempty"`
	} `json:"details,omitempty"`
}

// The state of a flag either off or on
type FeatureState string

// Indicates when the flag was last evaluated
type FeatureStatus struct {
	LastAccess int                 `json:"lastAccess"`
	Status     FeatureStatusStatus `json:"status"`
}

// FeatureStatusStatus defines model for FeatureStatus.Status.
type FeatureStatusStatus string

// Features defines model for Features.
type Features struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	FeatureCounts *FeatureCounts `json:"featureCounts,omitempty"`
	Features      *[]Feature     `json:"features,omitempty"`
}

// A flag Identifier and name
type FlagBasicInfo struct {
	// The flag identifier
	Identifier string `json:"identifier"`

	// The user friendly flag name
	Name string `json:"name"`
}

// FlagBasicInfos defines model for FlagBasicInfos.
type FlagBasicInfos struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	FeatureFlags *[]FlagBasicInfo `json:"featureFlags,omitempty"`
}

// FlagEnvironment defines model for FlagEnvironment.
type FlagEnvironment struct {
	// The name of the environment
	Name string `json:"name"`
}

// FlagEnvironmentState defines model for FlagEnvironmentState.
type FlagEnvironmentState struct {
	// Boolean representing whether a flag is enabled in the environment
	Enabled bool `json:"enabled"`
}

// Flag object with its state in each environment
type FlagState struct {
	// The date the flag was created in milliseconds
	CreatedAt int64 `json:"createdAt"`

	// The flags description
	Description  string                 `json:"description"`
	Environments FlagState_Environments `json:"environments"`

	// The flags identifier
	Identifier string `json:"identifier"`

	// The flags name
	Name string `json:"name"`
}

// FlagState_Environments defines model for FlagState.Environments.
type FlagState_Environments struct {
	AdditionalProperties map[string]FlagEnvironmentState `json:"-"`
}

// The type of Flag
type FlagType string

// The commit message to use as part of a gitsync operation
type GitDetails struct {
	// A description of the change or action
	CommitMsg string `json:"commitMsg"`
}

// The git repository that has been configured for the feature flag project
type GitRepo struct {
	// Should all flag changes be automatically committed
	AutoCommit *bool `json:"autoCommit,omitempty"`

	// The branch where feature flag commits will be pushed
	Branch string `json:"branch"`

	// Connector reference is a connector id, used to make a request through gitEx.
	ConnectorReference *string `json:"connectorReference,omitempty"`

	// Indicates if feature flag changes will be saved to the repository
	Enabled *bool `json:"enabled,omitempty"`

	// The path within the rootFolder to store the flags
	FilePath string `json:"filePath"`

	// The last date and time that the feature flags were synced to git in milliseconds
	LastSync *int64 `json:"lastSync,omitempty"`

	// The objectId
	ObjectId string `json:"objectId"`

	// The identifier for the git repository
	RepoIdentifier string `json:"repoIdentifier"`

	// Repo reference is a repository id, used to make a request through gitEx.
	RepoReference *string `json:"repoReference,omitempty"`

	// The root folder in the repository where the feature flag yaml will be written
	RootFolder string `json:"rootFolder"`

	// An error message describing any problems with the generated yaml
	YamlError *string `json:"yamlError,omitempty"`
}

// GitRepoResp defines model for GitRepoResp.
type GitRepoResp struct {
	// The git repository that has been configured for the feature flag project
	RepoDetails *GitRepo `json:"repoDetails,omitempty"`
	RepoSet     bool     `json:"repoSet"`
}

// GitSyncMultipleFlagPatchOperation defines model for GitSyncMultipleFlagPatchOperation.
type GitSyncMultipleFlagPatchOperation struct {
	// A comment explaining the reason for this patch operation
	Comment *string `json:"comment,omitempty"`

	// Time of execution in unix epoch milliseconds when the scheduled changes will be applied
	ExecutionTime *int                         `json:"executionTime,omitempty"`
	Flags         MultipleFlagPatchInstruction `json:"flags"`

	// The commit message to use as part of a gitsync operation
	GitDetails *GitDetails `json:"gitDetails,omitempty"`
}

// GitSyncPatchOperation defines model for GitSyncPatchOperation.
type GitSyncPatchOperation struct {
	// A comment explaining the reason for this patch operation
	Comment *string `json:"comment,omitempty"`

	// Time of execution in unix epoch milliseconds when the scheduled changes will be applied
	ExecutionTime *int `json:"executionTime,omitempty"`

	// The commit message to use as part of a gitsync operation
	GitDetails *GitDetails `json:"gitDetails,omitempty"`

	// A list of Patch Instructions
	Instructions PatchInstruction `json:"instructions"`
}

// A Jira Issue
type JiraIssue struct {
	// The Jira Issue key
	IssueKey string `json:"issueKey"`

	// The jira issue URL
	IssueURL string `json:"issueURL"`
}

// A Jira Search Response Object
type JiraSearchIssue struct {
	// Information about this Jira Issue
	Fields struct {
		// The issue title/summary
		Summary *string `json:"summary,omitempty"`
	} `json:"fields"`

	// The Jira issue ID
	Id string `json:"id"`

	// The Jira issue Key
	Key *string `json:"key,omitempty"`

	// A link to the Jira issue
	Self string `json:"self"`
}

// A Jira Search Response Object
type JiraSearchIssues struct {
	// A list containing the matching jira issues
	Issues *[]JiraSearchIssue `json:"issues,omitempty"`

	// The number of matching jira issues
	Total *int `json:"total,omitempty"`
}

// MultipleFlagPatchInstruction defines model for MultipleFlagPatchInstruction.
type MultipleFlagPatchInstruction []struct {
	// identifier of the flag to patch
	Identifier string `json:"identifier"`

	// A list of Patch Instructions
	Instructions PatchInstruction `json:"instructions"`
}

// An object id and object body generated from an audit event
type ObjectSnapshot struct {
	// The identifier of the object e.g. the feature flag identifier or the target identifier
	Id string `json:"id"`

	// A JSON representative of the object that was modified
	Value *map[string]interface{} `json:"value,omitempty"`
}

// A list of Object Snapshots
type ObjectSnapshots struct {
	Objectsnapshots *[]ObjectSnapshot `json:"objectsnapshots,omitempty"`
}

// A list of SDK/Frameworks/Versions
type OnboardingSDKs struct {
	Items *[]string `json:"items,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// The total number of items
	ItemCount int `json:"itemCount"`

	// The total number of pages
	PageCount int `json:"pageCount"`

	// The current page
	PageIndex int `json:"pageIndex"`

	// The number of items per page
	PageSize int `json:"pageSize"`

	// The version of this object.  The version will be incremented each time the object is modified
	Version *int `json:"version,omitempty"`
}

// A list of Patch Instructions
type PatchInstruction []struct {
	// The name of the modification you would like to perform on a resource.
	Kind       string                 `json:"kind"`
	Parameters map[string]interface{} `json:"parameters"`
}

// PatchOperation defines model for PatchOperation.
type PatchOperation struct {
	// A comment explaining the reason for this patch operation
	Comment *string `json:"comment,omitempty"`

	// Time of execution in unix epoch milliseconds when the scheduled changes will be applied
	ExecutionTime *int `json:"executionTime,omitempty"`

	// A list of Patch Instructions
	Instructions PatchInstruction `json:"instructions"`
}

// Feature Flag pre-requisites
type Prerequisite struct {
	// The feature identifier that is the prerequisite
	Feature string `json:"feature"`

	// A list of variations that must be met
	Variations []string `json:"variations"`
}

// A project response
type Project struct {
	// The project description
	Description *string `json:"description,omitempty"`

	// The unique identifier for this project
	Identifier string `json:"identifier"`

	// The user friendly name for the project
	Name string `json:"name"`

	// A list of tags for this project
	Tags *[]Tag `json:"tags,omitempty"`
}

// ProjectFlags defines model for ProjectFlags.
type ProjectFlags struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Environments *ProjectFlags_Environments `json:"environments,omitempty"`
	Flags        *[]FlagState               `json:"flags,omitempty"`
}

// ProjectFlags_Environments defines model for ProjectFlags.Environments.
type ProjectFlags_Environments struct {
	AdditionalProperties map[string]FlagEnvironment `json:"-"`
}

// A list of projects
type Projects struct {
	// The total number of items
	ItemCount *int `json:"itemCount,omitempty"`

	// The total number of pages
	PageCount *int `json:"pageCount,omitempty"`

	// The current page
	PageIndex *int `json:"pageIndex,omitempty"`

	// The number of items per page
	PageSize *int `json:"pageSize,omitempty"`

	// A list of projects
	Projects *[]Project `json:"projects,omitempty"`
}

// ProxyKey defines model for ProxyKey.
type ProxyKey struct {
	Environments *[]string `json:"environments,omitempty"`

	// The ProxyKeys ID
	Id string `json:"id"`

	// The Proxy Keys identifier
	Identifier string `json:"identifier"`

	// The ProxyKeys name
	Name string `json:"name"`
}

// A Proxy Key instruction
type ProxyKeyInstruction struct {
	Instructions *struct {
		AddEnvironments    *[]string `json:"addEnvironments,omitempty"`
		RemoveEnvironments *[]string `json:"removeEnvironments,omitempty"`
	} `json:"instructions,omitempty"`
}

// This result object shows details of how many times a variation has been evaluated
type Results struct {
	// The number of times this variation has been returned in a evaluation
	Count int `json:"count"`

	// The unique variation identifier
	VariationIdentifier string `json:"variationIdentifier"`

	// The user friendly variation name
	VariationName string `json:"variationName"`
}

// The type of sdk
type SdkType string

// A Target Group (Segment) response
type Segment struct {
	// The data and time in milliseconds when the group was created
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// The environment this target group belongs to
	Environment *string `json:"environment,omitempty"`

	// A list of Targets who are excluded from this target group
	Excluded *[]Target `json:"excluded,omitempty"`

	// Unique identifier for the target group.
	Identifier string `json:"identifier"`

	// A list of Targets who belong to this target group
	Included *[]Target `json:"included,omitempty"`

	// The data and time in milliseconds when the group was last modified
	ModifiedAt *int64 `json:"modifiedAt,omitempty"`

	// Name of the target group.
	Name string `json:"name"`

	// An array of rules that can cause a user to be included in this segment.
	Rules *[]Clause `json:"rules,omitempty"`

	// Tags for this target group
	Tags *[]Tag `json:"tags,omitempty"`

	// The version of this group.  Each time it is modified the version is incremented
	Version *int64 `json:"version,omitempty"`
}

// Details of a Feature Flag that has been included in a Target Group (Segment)
type SegmentFlag struct {
	// A description of the feature flag
	Description *string `json:"description,omitempty"`

	// The environment identifier for the feature flag
	Environment string `json:"environment"`

	// The identifier of the feature flag
	Identifier string `json:"identifier"`

	// The name of the feature flag
	Name string `json:"name"`

	// The project identifier for the feature flag
	Project string `json:"project"`

	// The unique identifier for this rule
	RuleId *string `json:"ruleId,omitempty"`

	// How the the flag has been included, either directly or via a custom rule
	Type SegmentFlagType `json:"type"`

	// The identifier for the variation of the flag that should be served to members of the group
	Variation string `json:"variation"`
}

// How the the flag has been included, either directly or via a custom rule
type SegmentFlagType string

// Segments defines model for Segments.
type Segments struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Segments *[]Segment `json:"segments,omitempty"`
}

// Describe the distribution rule and the variation that should be served to the target
type Serve struct {
	// Describes a distribution rule
	Distribution *Distribution `json:"distribution,omitempty"`
	Variation    *string       `json:"variation,omitempty"`
}

// A Harness service linked to a flag
type Service struct {
	// The identifier of the service
	Identifier string `json:"identifier"`

	// The name of the service
	Name string `json:"name"`
}

// The rule used to determine what variation to serve to a target
type ServingRule struct {
	// A list of clauses to use in the rule
	Clauses []Clause `json:"clauses"`

	// The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest
	Priority int `json:"priority"`

	// The unique identifier for this rule
	RuleId *string `json:"ruleId,omitempty"`

	// Describe the distribution rule and the variation that should be served to the target
	Serve Serve `json:"serve"`
}

// Indicates if the request was successful or not
type Status string

// A Tag object used to tag feature flags - consists of name and identifier
type Tag struct {
	// The identifier of the tag
	Identifier string `json:"identifier"`

	// The name of the tag
	Name string `json:"name"`
}

// TagResponseMetadata defines model for TagResponseMetadata.
type TagResponseMetadata struct {
	// Additional metadata about the request
	Details *struct {
		// Summary of governance checks including any warnings
		GovernanceMetadata *map[string]interface{} `json:"governanceMetadata,omitempty"`
	} `json:"details,omitempty"`
}

// Tags defines model for Tags.
type Tags struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Tags *[]Tag `json:"tags,omitempty"`
}

// A Target object
type Target struct {
	// The account ID that the target belongs to
	Account string `json:"account"`

	// Indicates if this target is anonymous
	Anonymous *bool `json:"anonymous,omitempty"`

	// a JSON representation of the attributes for this target
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// The date and time in milliseconds when this Target was created
	CreatedAt *int64 `json:"createdAt,omitempty"`

	// The identifier for the environment that the target belongs to
	Environment string `json:"environment"`

	// The unique identifier for this target
	Identifier string `json:"identifier"`

	// The name of this Target
	Name string `json:"name"`

	// The identifier for the organization that the target belongs to
	Org string `json:"org"`

	// The identifier for the project that this target belongs to
	Project string `json:"project"`

	// A list of Target Groups (Segments) that this Target belongs to
	Segments *[]Segment `json:"segments,omitempty"`
}

// A Target or Target Group (Segments)
type TargetAndSegment struct {
	// The unique identifier for the target or target group
	Identifier *string `json:"identifier,omitempty"`

	// The name of the entity
	Name *string `json:"name,omitempty"`

	// The type either target or segment (target group)
	Type TargetAndSegmentType `json:"type"`
}

// The type either target or segment (target group)
type TargetAndSegmentType string

// Details of which Target Groups (Segments) a target is included in or excluded from
type TargetDetail struct {
	// A list of target groups (segments) that the target is excluded from.
	ExcludedSegments *[]TargetDetailSegment `json:"excludedSegments,omitempty"`

	// The unique identifier for the target
	Identifier string `json:"identifier"`

	// A list of target groups (segments) that the target is included in.
	IncludedSegments *[]TargetDetailSegment `json:"includedSegments,omitempty"`

	// A list of target groups (segments) that the target is included in via group rules.
	RuleSegments *[]TargetDetailSegment `json:"ruleSegments,omitempty"`
}

// TargetDetailSegment defines model for TargetDetailSegment.
type TargetDetailSegment struct {
	// The unique identifier
	Identifier *string `json:"identifier,omitempty"`

	// The name
	Name *string `json:"name,omitempty"`
}

// Target map provides the details of a target that belongs to a flag
type TargetMap struct {
	// The identifier for the target
	Identifier string `json:"identifier"`

	// The name of the target
	Name string `json:"name"`
}

// Targets defines model for Targets.
type Targets struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Targets *[]Target `json:"targets,omitempty"`
}

// TargetsAndSegments defines model for TargetsAndSegments.
type TargetsAndSegments struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Entities *[]TargetAndSegment `json:"entities,omitempty"`
}

// TargetsAndSegmentsInfo defines model for TargetsAndSegmentsInfo.
type TargetsAndSegmentsInfo struct {
	// Embedded fields due to inline allOf schema
	Entities *[]TargetAndSegment `json:"entities,omitempty"`
}

// Returns counts of Enabled (Where flag state is on in 1+ environments) and Total Flags
type UserFlagOverview struct {
	Enabled int `json:"enabled"`
	Total   int `json:"total"`
}

// A variation of a flag that can be returned to a target
type Variation struct {
	// A description of the variation
	Description *string `json:"description,omitempty"`

	// The unique identifier for the variation
	Identifier string `json:"identifier"`

	// The user friendly name of the variation
	Name *string `json:"name,omitempty"`

	// The variation value to serve such as true or false for a boolean flag
	Value string `json:"value"`
}

// A mapping of variations to targets and target groups (segments).  The targets listed here should receive this variation.
type VariationMap struct {
	// A list of target groups (segments)
	TargetSegments *[]string `json:"targetSegments,omitempty"`

	// A list of target mappings
	Targets *[]TargetMap `json:"targets,omitempty"`

	// The variation identifier
	Variation string `json:"variation"`
}

// A variation and the weighting it should receive as part of a percentage rollout
type WeightedVariation struct {
	// The variation identifier
	Variation string `json:"variation"`

	// The weight to be given to the variation in percent
	Weight int `json:"weight"`
}

// AccountQueryParam defines model for accountQueryParam.
type AccountQueryParam string

// ActionQueryParam defines model for actionQueryParam.
type ActionQueryParam []string

// ActorQueryParam defines model for actorQueryParam.
type ActorQueryParam string

// ArchivedQueryParam defines model for archivedQueryParam.
type ArchivedQueryParam bool

// AuditSortByField defines model for auditSortByField.
type AuditSortByField string

// AuditSortOrder defines model for auditSortOrder.
type AuditSortOrder string

// CommitMsgQueryParam defines model for commitMsgQueryParam.
type CommitMsgQueryParam string

// EndTimeQueryParam defines model for endTimeQueryParam.
type EndTimeQueryParam int

// EnvironmentOptionalQueryParam defines model for environmentOptionalQueryParam.
type EnvironmentOptionalQueryParam string

// EnvironmentQueryParam defines model for environmentQueryParam.
type EnvironmentQueryParam string

// ExcludedFeaturesOptionalParam defines model for excludedFeaturesOptionalParam.
type ExcludedFeaturesOptionalParam string

// FeatureIDs defines model for featureIDs.
type FeatureIDs []string

// FeaturesOptionalParam defines model for featuresOptionalParam.
type FeaturesOptionalParam string

// FlagCounts defines model for flagCounts.
type FlagCounts bool

// FlagEnabled defines model for flagEnabled.
type FlagEnabled bool

// FlagLifetime defines model for flagLifetime.
type FlagLifetime string

// FlagNameQueryParam defines model for flagNameQueryParam.
type FlagNameQueryParam string

// FlagStatus defines model for flagStatus.
type FlagStatus string

// FlagSummary defines model for flagSummary.
type FlagSummary bool

// FlagTags defines model for flagTags.
type FlagTags []string

// ForceDeleteQueryParam defines model for forceDeleteQueryParam.
type ForceDeleteQueryParam bool

// Identifier defines model for identifier.
type Identifier string

// IdentifierOptionalQueryParam defines model for identifierOptionalQueryParam.
type IdentifierOptionalQueryParam string

// IdentifierQueryParam defines model for identifierQueryParam.
type IdentifierQueryParam string

// Identifiers defines model for identifiers.
type Identifiers []string

// JiraIssueSearchQueryParam defines model for jiraIssueSearchQueryParam.
type JiraIssueSearchQueryParam string

// KindQueryParam defines model for kindQueryParam.
type KindQueryParam string

// MetricsOptionalParam defines model for metricsOptionalParam.
type MetricsOptionalParam bool

// NameQueryParam defines model for nameQueryParam.
type NameQueryParam string

// ObjectTypeQueryParam defines model for objectTypeQueryParam.
type ObjectTypeQueryParam string

// OrgQueryParam defines model for orgQueryParam.
type OrgQueryParam string

// PageNumber defines model for pageNumber.
type PageNumber int

// PageSize defines model for pageSize.
type PageSize int

// PipelineNameQueryParam defines model for pipelineNameQueryParam.
type PipelineNameQueryParam string

// ProjectOptionalQueryParam defines model for projectOptionalQueryParam.
type ProjectOptionalQueryParam string

// ProjectQueryParam defines model for projectQueryParam.
type ProjectQueryParam string

// SafSortByField defines model for safSortByField.
type SafSortByField string

// SafSortOrder defines model for safSortOrder.
type SafSortOrder string

// SdkFrameworkQueryParam defines model for sdkFrameworkQueryParam.
type SdkFrameworkQueryParam string

// SdkLanguageQueryParam defines model for sdkLanguageQueryParam.
type SdkLanguageQueryParam string

// SegmentNameQueryParam defines model for segmentNameQueryParam.
type SegmentNameQueryParam string

// SortByField defines model for sortByField.
type SortByField string

// SortOrder defines model for sortOrder.
type SortOrder string

// StartTimeQueryParam defines model for startTimeQueryParam.
type StartTimeQueryParam int

// TagFilterOptionalParam defines model for tagFilterOptionalParam.
type TagFilterOptionalParam string

// TargetFilterOptionalParam defines model for targetFilterOptionalParam.
type TargetFilterOptionalParam string

// TargetGroupsOptionalParam defines model for targetGroupsOptionalParam.
type TargetGroupsOptionalParam string

// TargetIdentifierQueryParam defines model for targetIdentifierQueryParam.
type TargetIdentifierQueryParam string

// TargetNameQueryParam defines model for targetNameQueryParam.
type TargetNameQueryParam string

// TargetOptionalParam defines model for targetOptionalParam.
type TargetOptionalParam string

// TargetSortByField defines model for targetSortByField.
type TargetSortByField string

// TargetSortOrder defines model for targetSortOrder.
type TargetSortOrder string

// TargetsOptionalParam defines model for targetsOptionalParam.
type TargetsOptionalParam string

// TasSortByField defines model for tasSortByField.
type TasSortByField string

// TasSortOrder defines model for tasSortOrder.
type TasSortOrder string

// TsIdentifierQueryParam defines model for tsIdentifierQueryParam.
type TsIdentifierQueryParam string

// TsNameQueryParam defines model for tsNameQueryParam.
type TsNameQueryParam string

// TsSortByField defines model for tsSortByField.
type TsSortByField string

// TsSortOrder defines model for tsSortOrder.
type TsSortOrder string

// An AIDA Response
type AIDAResponse Aida

// The API key is used by SDKs to connect to Harness Feature Flags
type APIKeyResponse ApiKey

// A list of API Keys
type APIKeysResponse ApiKeys

// AuditTrailResponse defines model for AuditTrailResponse.
type AuditTrailResponse struct {
	CorrelationId *string `json:"correlationId,omitempty"`

	// A list of Audit Trail events
	Data     *AuditTrails            `json:"data,omitempty"`
	MetaData *map[string]interface{} `json:"metaData,omitempty"`

	// Indicates if the request was successful or not
	Status *Status `json:"status,omitempty"`
}

// A list of Flags
type AvailableFlagResponse FlagBasicInfos

// BadRequest defines model for BadRequest.
type BadRequest Error

// Conflict defines model for Conflict.
type Conflict Error

// EnvironmentResponse defines model for EnvironmentResponse.
type EnvironmentResponse struct {
	CorrelationId *string `json:"correlationId,omitempty"`

	// Environment Response
	Data     *Environment            `json:"data,omitempty"`
	MetaData *map[string]interface{} `json:"metaData,omitempty"`

	// Indicates if the request was successful or not
	Status *Status `json:"status,omitempty"`
}

// EnvironmentsResponse defines model for EnvironmentsResponse.
type EnvironmentsResponse struct {
	CorrelationId string `json:"correlationId"`

	// A list of Environments
	Data     Environments            `json:"data"`
	MetaData *map[string]interface{} `json:"metaData,omitempty"`

	// Indicates if the request was successful or not
	Status Status `json:"status"`
}

// A list of Available Pipelines
type FeatureAvailablePipelinesResponse FeatureAvailablePipelines

// FeatureEditResponse defines model for FeatureEditResponse.
type FeatureEditResponse FeatureResponseMetadata

// A list of Feature Evaluations
type FeatureEvaluationsResponse FeatureEvaluations

// A list of FeatureMetrics
type FeatureMetricsResponse FeatureMetrics

// FeaturePipelineResponse defines model for FeaturePipelineResponse.
type FeaturePipelineResponse FeaturePipelineResp

// A Feature Flag response
type FeatureResponse Feature

// Feature flags yaml for a project
type FeatureYamlResponse FeatureFlagsYaml

// FeaturesEditResponse defines model for FeaturesEditResponse.
type FeaturesEditResponse []FeatureResponseMetadata

// A list of Feature Flags
type FeaturesResponse Features

// GitRepoResponse defines model for GitRepoResponse.
type GitRepoResponse GitRepoResp

// GitSyncError defines model for GitSyncError.
type GitSyncError Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// A Jira Search Response Object
type JiraIssueSearchResponse JiraSearchIssues

// NotFound defines model for NotFound.
type NotFound Error

// ObjectSnapshotResponse defines model for ObjectSnapshotResponse.
type ObjectSnapshotResponse struct {
	CorrelationId *string `json:"correlationId,omitempty"`

	// A list of Object Snapshots
	Data     *ObjectSnapshots        `json:"data,omitempty"`
	MetaData *map[string]interface{} `json:"metaData,omitempty"`

	// Indicates if the request was successful or not
	Status *Status `json:"status,omitempty"`
}

// A list of SDK/Frameworks/Versions
type OnboardingSDKsResponse OnboardingSDKs

// Returns all the flags in a project and their state in each environment
type ProjectFlagsResponse ProjectFlags

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	CorrelationId *string `json:"correlationId,omitempty"`

	// A project response
	Data     *Project                `json:"data,omitempty"`
	MetaData *map[string]interface{} `json:"metaData,omitempty"`

	// Indicates if the request was successful or not
	Status *Status `json:"status,omitempty"`
}

// ProjectsResponse defines model for ProjectsResponse.
type ProjectsResponse struct {
	CorrelationId *string `json:"correlationId,omitempty"`

	// A list of projects
	Data     *Projects               `json:"data,omitempty"`
	MetaData *map[string]interface{} `json:"metaData,omitempty"`

	// Indicates if the request was successful or not
	Status *Status `json:"status,omitempty"`
}

// ProxyKeyResponse defines model for ProxyKeyResponse.
type ProxyKeyResponse ProxyKey

// ProxyKeysCreateResponse defines model for ProxyKeysCreateResponse.
type ProxyKeysCreateResponse struct {
	Key *string `json:"key,omitempty"`
}

// SegmentFlagsResponse defines model for SegmentFlagsResponse.
type SegmentFlagsResponse []SegmentFlag

// A Target Group (Segment) response
type SegmentResponse Segment

// A list of Target Groups (Segments)
type SegmentsResponse Segments

// TagEditResponse defines model for TagEditResponse.
type TagEditResponse TagResponseMetadata

// A list of Tags - requirement for feature flag tagging
type TagsResponse Tags

// TargetAttributes defines model for TargetAttributes.
type TargetAttributes []string

// Details of which Target Groups (Segments) a target is included in or excluded from
type TargetDetailResponse TargetDetail

// A Target object
type TargetResponse Target

// A list of Target and Target Groups (Segments)
type TargetSegmentResponse TargetsAndSegments

// A list of Target and Target Groups (Segments)
type TargetSegmentsInfoResponse TargetsAndSegmentsInfo

// A list of Targets
type TargetsResponse Targets

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated Error

// Unauthorized defines model for Unauthorized.
type Unauthorized Error

// Returns counts of Enabled (Where flag state is on in 1+ environments) and Total Flags
type UserFlagOverviewResponse UserFlagOverview

// AIDARequest defines model for AIDARequest.
type AIDARequest struct {
	// The type of Flag
	FlagType   FlagType `json:"flagType"`
	Framework  *string  `json:"framework,omitempty"`
	Identifier string   `json:"identifier"`
	Language   string   `json:"language"`
	SdkKey     *string  `json:"sdkKey,omitempty"`

	// The type of sdk
	SdkType SdkType `json:"sdkType"`
	Version *string `json:"version,omitempty"`
}

// APIKeyRequest defines model for APIKeyRequest.
type APIKeyRequest struct {
	Description *string `json:"description,omitempty"`
	ExpiredAt   *int    `json:"expiredAt,omitempty"`
	Identifier  string  `json:"identifier"`
	Name        string  `json:"name"`

	// The type of key depending on the SDK that is being used.
	Type ApiKeyRequestType `json:"type"`
}

// APIKeyUpdateRequest defines model for APIKeyUpdateRequest.
type APIKeyUpdateRequest struct {
	Description *string `json:"description,omitempty"`
	ExpiredAt   *int    `json:"expiredAt,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// EnvironmentRequest defines model for EnvironmentRequest.
type EnvironmentRequest struct {
	Description *string `json:"description,omitempty"`
	Identifier  string  `json:"identifier"`
	Name        string  `json:"name"`
	Project     string  `json:"project"`
	Tags        *[]Tag  `json:"tags,omitempty"`
}

// FeatureFlagRequest defines model for FeatureFlagRequest.
type FeatureFlagRequest struct {
	Archived            *bool   `json:"archived,omitempty"`
	DefaultOffVariation string  `json:"defaultOffVariation"`
	DefaultOnVariation  string  `json:"defaultOnVariation"`
	Description         *string `json:"description,omitempty"`

	// The commit message to use as part of a gitsync operation
	GitDetails    *GitDetails            `json:"gitDetails,omitempty"`
	Identifier    string                 `json:"identifier"`
	Kind          FeatureFlagRequestKind `json:"kind"`
	Name          string                 `json:"name"`
	Owner         *string                `json:"owner,omitempty"`
	Permanent     bool                   `json:"permanent"`
	Prerequisites *[]Prerequisite        `json:"prerequisites,omitempty"`
	Project       string                 `json:"project"`
	Services      *[]Service             `json:"services,omitempty"`
	Tags          *[]Tag                 `json:"tags,omitempty"`
	Variations    []Variation            `json:"variations"`
}

// FeaturePatchRequest defines model for FeaturePatchRequest.
type FeaturePatchRequest GitSyncPatchOperation

// FeaturePipelineRequest defines model for FeaturePipelineRequest.
type FeaturePipelineRequest struct {
	PipelineIdentifier string `json:"pipelineIdentifier"`
	PipelineName       string `json:"pipelineName"`
}

// Feature flags yaml for a project
type FeatureYamlRequest FeatureFlagsYaml

// FeaturesPatchRequest defines model for FeaturesPatchRequest.
type FeaturesPatchRequest GitSyncMultipleFlagPatchOperation

// GitRepoPatchRequest defines model for GitRepoPatchRequest.
type GitRepoPatchRequest PatchOperation

// GitRepoRequest defines model for GitRepoRequest.
type GitRepoRequest struct {
	AutoCommit         *bool   `json:"autoCommit,omitempty"`
	Branch             string  `json:"branch"`
	ConnectorReference *string `json:"connectorReference,omitempty"`
	FilePath           string  `json:"filePath"`
	ObjectId           *string `json:"objectId,omitempty"`
	RepoIdentifier     string  `json:"repoIdentifier"`
	RepoReference      *string `json:"repoReference,omitempty"`
	RootFolder         string  `json:"rootFolder"`
}

// ProjectRequest defines model for ProjectRequest.
type ProjectRequest struct {
	Description *string `json:"description,omitempty"`
	Identifier  string  `json:"identifier"`
	Name        string  `json:"name"`
	Tags        *[]Tag  `json:"tags,omitempty"`
}

// A Proxy Key instruction
type ProxyKeysPatchRequest ProxyKeyInstruction

// ProxyKeysPostRequest defines model for ProxyKeysPostRequest.
type ProxyKeysPostRequest struct {
	Environments *[]string `json:"environments,omitempty"`
	Identifier   *string   `json:"identifier,omitempty"`
	Name         *string   `json:"name,omitempty"`
}

// SegmentPatchRequest defines model for SegmentPatchRequest.
type SegmentPatchRequest GitSyncPatchOperation

// SegmentRequest defines model for SegmentRequest.
type SegmentRequest struct {
	Environment string    `json:"environment"`
	Excluded    *[]string `json:"excluded,omitempty"`
	Identifier  *string   `json:"identifier,omitempty"`
	Included    *[]string `json:"included,omitempty"`

	// Name of the target segment.
	Name    string `json:"name"`
	Project string `json:"project"`

	// An array of rules that can cause a user to be included in this segment.
	Rules *[]Clause `json:"rules,omitempty"`
	Tags  *[]Tag    `json:"tags,omitempty"`
}

// A Tag object used to tag feature flags - consists of name and identifier
type TagRequest Tag

// TargetPatchRequest defines model for TargetPatchRequest.
type TargetPatchRequest GitSyncPatchOperation

// A Target object
type TargetRequest Target

// GetAllAPIKeysParams defines parameters for GetAllAPIKeys.
type GetAllAPIKeysParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// AddAPIKeyParams defines parameters for AddAPIKey.
type AddAPIKeyParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`
}

// DeleteAPIKeyParams defines parameters for DeleteAPIKey.
type DeleteAPIKeyParams struct {
	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetAPIKeyParams defines parameters for GetAPIKey.
type GetAPIKeyParams struct {
	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// UpdateAPIKeyParams defines parameters for UpdateAPIKey.
type UpdateAPIKeyParams struct {
	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetAuditByParamsParams defines parameters for GetAuditByParams.
type GetAuditByParamsParams struct {
	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`

	// Project
	ProjectIdentifier *ProjectOptionalQueryParam `form:"projectIdentifier,omitempty" json:"projectIdentifier,omitempty"`

	// Object Type (FeatureActivation Or Segment)
	ObjectType GetAuditByParamsParamsObjectType `form:"objectType" json:"objectType"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Start Time
	StartTime *StartTimeQueryParam `form:"startTime,omitempty" json:"startTime,omitempty"`

	// End Time
	EndTime *EndTimeQueryParam `form:"endTime,omitempty" json:"endTime,omitempty"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Actor
	Actor *ActorQueryParam `form:"actor,omitempty" json:"actor,omitempty"`

	// Action
	Action *ActionQueryParam `form:"action,omitempty" json:"action,omitempty"`

	// Identifier of the entity
	Identifier *IdentifierOptionalQueryParam `form:"identifier,omitempty" json:"identifier,omitempty"`

	// SortOrder
	SortOrder *GetAuditByParamsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAuditByParamsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`
}

// GetAuditByParamsParamsObjectType defines parameters for GetAuditByParams.
type GetAuditByParamsParamsObjectType string

// GetAuditByParamsParamsAction defines parameters for GetAuditByParams.
type GetAuditByParamsParamsAction string

// GetAuditByParamsParamsSortOrder defines parameters for GetAuditByParams.
type GetAuditByParamsParamsSortOrder string

// GetAuditByParamsParamsSortByField defines parameters for GetAuditByParams.
type GetAuditByParamsParamsSortByField string

// GetAllEnvironmentsParams defines parameters for GetAllEnvironments.
type GetAllEnvironmentsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAllEnvironmentsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAllEnvironmentsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`
}

// GetAllEnvironmentsParamsSortOrder defines parameters for GetAllEnvironments.
type GetAllEnvironmentsParamsSortOrder string

// GetAllEnvironmentsParamsSortByField defines parameters for GetAllEnvironments.
type GetAllEnvironmentsParamsSortByField string

// CreateEnvironmentParams defines parameters for CreateEnvironment.
type CreateEnvironmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// DeleteEnvironmentParams defines parameters for DeleteEnvironment.
type DeleteEnvironmentParams struct {
	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetEnvironmentParams defines parameters for GetEnvironment.
type GetEnvironmentParams struct {
	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// ModifyEnvironmentParams defines parameters for ModifyEnvironment.
type ModifyEnvironmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`
}

// GetAllFeaturesParams defines parameters for GetAllFeatures.
type GetAllFeaturesParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAllFeaturesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAllFeaturesParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the field
	Name *NameQueryParam `form:"name,omitempty" json:"name,omitempty"`

	// Identifier of the field
	Identifier *IdentifierQueryParam `form:"identifier,omitempty" json:"identifier,omitempty"`

	// Status of the feature flag
	Archived *ArchivedQueryParam `form:"archived,omitempty" json:"archived,omitempty"`

	// Kind of the feature flag
	Kind *GetAllFeaturesParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Identifier of a target
	TargetIdentifier *TargetOptionalParam `form:"targetIdentifier,omitempty" json:"targetIdentifier,omitempty"`

	// Identifier of the target to filter on
	TargetIdentifierFilter *TargetFilterOptionalParam `form:"targetIdentifierFilter,omitempty" json:"targetIdentifierFilter,omitempty"`

	// Parameter to indicate if metrics data is requested in response
	Metrics *MetricsOptionalParam `form:"metrics,omitempty" json:"metrics,omitempty"`

	// Comma separated identifiers for multiple Features
	FeatureIdentifiers *FeaturesOptionalParam `form:"featureIdentifiers,omitempty" json:"featureIdentifiers,omitempty"`

	// Comma separated identifiers to exclude from the response
	ExcludedFeatures *ExcludedFeaturesOptionalParam `form:"excludedFeatures,omitempty" json:"excludedFeatures,omitempty"`

	// Filter for flags based on their status (active,never-requested,recently-accessed,potentially-stale)
	Status *FlagStatus `form:"status,omitempty" json:"status,omitempty"`

	// Filter for flags based on their lifetime (permanent/temporary)
	Lifetime *FlagLifetime `form:"lifetime,omitempty" json:"lifetime,omitempty"`

	// Filter for flags based on if they are enabled or disabled
	Enabled *FlagEnabled `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Returns counts for the different types of flags e.g num active, potentially-stale, recently-accessed etc
	FlagCounts *FlagCounts `form:"flagCounts,omitempty" json:"flagCounts,omitempty"`

	// Returns summary info on flags if set to true
	Summary *FlagSummary `form:"summary,omitempty" json:"summary,omitempty"`

	// Filter for flags based on their tag values
	Tags *FlagTags `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetAllFeaturesParamsSortOrder defines parameters for GetAllFeatures.
type GetAllFeaturesParamsSortOrder string

// GetAllFeaturesParamsSortByField defines parameters for GetAllFeatures.
type GetAllFeaturesParamsSortByField string

// GetAllFeaturesParamsKind defines parameters for GetAllFeatures.
type GetAllFeaturesParamsKind string

// PatchFeaturesParams defines parameters for PatchFeatures.
type PatchFeaturesParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`
}

// CreateFeatureFlagParams defines parameters for CreateFeatureFlag.
type CreateFeatureFlagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetAvailableFeaturePipelinesParams defines parameters for GetAvailableFeaturePipelines.
type GetAvailableFeaturePipelinesParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Filter for pipelines with specific name
	PipelineName *PipelineNameQueryParam `form:"pipelineName,omitempty" json:"pipelineName,omitempty"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetFeatureMetricsParams defines parameters for GetFeatureMetrics.
type GetFeatureMetricsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// Unique feature identifiers
	FeatureIDs *FeatureIDs `form:"featureIDs,omitempty" json:"featureIDs,omitempty"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetFeatureMetricsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetFeatureMetricsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the field
	Name *NameQueryParam `form:"name,omitempty" json:"name,omitempty"`

	// Identifier of the field
	Identifier *IdentifierQueryParam `form:"identifier,omitempty" json:"identifier,omitempty"`

	// Status of the feature flag
	Archived *ArchivedQueryParam `form:"archived,omitempty" json:"archived,omitempty"`

	// Filter for flags based on their status (active,never-requested,recently-accessed,potentially-stale)
	Status *FlagStatus `form:"status,omitempty" json:"status,omitempty"`

	// Filter for flags based on their lifetime (permanent/temporary)
	Lifetime *FlagLifetime `form:"lifetime,omitempty" json:"lifetime,omitempty"`

	// Filter for flags based on if they are enabled or disabled
	Enabled *FlagEnabled `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Filter for flags based on their tag values
	Tags *FlagTags `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetFeatureMetricsParamsSortOrder defines parameters for GetFeatureMetrics.
type GetFeatureMetricsParamsSortOrder string

// GetFeatureMetricsParamsSortByField defines parameters for GetFeatureMetrics.
type GetFeatureMetricsParamsSortByField string

// GetFlagsYamlParams defines parameters for GetFlagsYaml.
type GetFlagsYamlParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`
}

// UpdateFlagsYamlParams defines parameters for UpdateFlagsYaml.
type UpdateFlagsYamlParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`
}

// DeleteFeatureFlagParams defines parameters for DeleteFeatureFlag.
type DeleteFeatureFlagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Git commit message
	CommitMsg *CommitMsgQueryParam `form:"commitMsg,omitempty" json:"commitMsg,omitempty"`

	// Permanently deletes the the feature flag
	ForceDelete *ForceDeleteQueryParam `form:"forceDelete,omitempty" json:"forceDelete,omitempty"`
}

// GetFeatureFlagParams defines parameters for GetFeatureFlag.
type GetFeatureFlagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`

	// Parameter to indicate if metrics data is requested in response
	Metrics *MetricsOptionalParam `form:"metrics,omitempty" json:"metrics,omitempty"`

	// Status of the feature flag
	Archived *ArchivedQueryParam `form:"archived,omitempty" json:"archived,omitempty"`
}

// PatchFeatureParams defines parameters for PatchFeature.
type PatchFeatureParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`
}

// GetDependentFeaturesParams defines parameters for GetDependentFeatures.
type GetDependentFeaturesParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetDependentFeaturesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetDependentFeaturesParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the field
	Name *NameQueryParam `form:"name,omitempty" json:"name,omitempty"`

	// Status of the feature flag
	Archived *ArchivedQueryParam `form:"archived,omitempty" json:"archived,omitempty"`

	// Kind of the feature flag
	Kind *GetDependentFeaturesParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Identifier of a target
	TargetIdentifier *TargetOptionalParam `form:"targetIdentifier,omitempty" json:"targetIdentifier,omitempty"`

	// Identifier of the target to filter on
	TargetIdentifierFilter *TargetFilterOptionalParam `form:"targetIdentifierFilter,omitempty" json:"targetIdentifierFilter,omitempty"`

	// Parameter to indicate if metrics data is requested in response
	Metrics *MetricsOptionalParam `form:"metrics,omitempty" json:"metrics,omitempty"`

	// Comma separated identifiers for multiple Features
	FeatureIdentifiers *FeaturesOptionalParam `form:"featureIdentifiers,omitempty" json:"featureIdentifiers,omitempty"`

	// Comma separated identifiers to exclude from the response
	ExcludedFeatures *ExcludedFeaturesOptionalParam `form:"excludedFeatures,omitempty" json:"excludedFeatures,omitempty"`

	// Filter for flags based on their status (active,never-requested,recently-accessed,potentially-stale)
	Status *FlagStatus `form:"status,omitempty" json:"status,omitempty"`

	// Filter for flags based on their lifetime (permanent/temporary)
	Lifetime *FlagLifetime `form:"lifetime,omitempty" json:"lifetime,omitempty"`

	// Filter for flags based on if they are enabled or disabled
	Enabled *FlagEnabled `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Returns counts for the different types of flags e.g num active, potentially-stale, recently-accessed etc
	FlagCounts *FlagCounts `form:"flagCounts,omitempty" json:"flagCounts,omitempty"`

	// Returns summary info on flags if set to true
	Summary *FlagSummary `form:"summary,omitempty" json:"summary,omitempty"`

	// Filter for flags based on their tag values
	Tags *FlagTags `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetDependentFeaturesParamsSortOrder defines parameters for GetDependentFeatures.
type GetDependentFeaturesParamsSortOrder string

// GetDependentFeaturesParamsSortByField defines parameters for GetDependentFeatures.
type GetDependentFeaturesParamsSortByField string

// GetDependentFeaturesParamsKind defines parameters for GetDependentFeatures.
type GetDependentFeaturesParamsKind string

// GetFeatureEvaluationsParams defines parameters for GetFeatureEvaluations.
type GetFeatureEvaluationsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`

	// Start Time
	StartTime *StartTimeQueryParam `form:"startTime,omitempty" json:"startTime,omitempty"`

	// End Time
	EndTime *EndTimeQueryParam `form:"endTime,omitempty" json:"endTime,omitempty"`
}

// DeleteFeaturePipelineParams defines parameters for DeleteFeaturePipeline.
type DeleteFeaturePipelineParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// GetFeaturePipelineParams defines parameters for GetFeaturePipeline.
type GetFeaturePipelineParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// PatchFeaturePipelineParams defines parameters for PatchFeaturePipeline.
type PatchFeaturePipelineParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// CreateFlagPipelineParams defines parameters for CreateFlagPipeline.
type CreateFlagPipelineParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// RestoreFeatureFlagParams defines parameters for RestoreFeatureFlag.
type RestoreFeatureFlagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Git commit message
	CommitMsg *CommitMsgQueryParam `form:"commitMsg,omitempty" json:"commitMsg,omitempty"`
}

// GetJiraIssuesParams defines parameters for GetJiraIssues.
type GetJiraIssuesParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Search term used to filter Jira Issue results by
	SearchTerm JiraIssueSearchQueryParam `form:"searchTerm" json:"searchTerm"`
}

// GetSDKDetailsParams defines parameters for GetSDKDetails.
type GetSDKDetailsParams struct {
	// Used to return Frameworks by Language
	SdkLanguage *SdkLanguageQueryParam `form:"sdkLanguage,omitempty" json:"sdkLanguage,omitempty"`

	// Used to return Versions by Frameworks
	SdkFramework *SdkFrameworkQueryParam `form:"sdkFramework,omitempty" json:"sdkFramework,omitempty"`
}

// GetUserFlagOverviewParams defines parameters for GetUserFlagOverview.
type GetUserFlagOverviewParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`
}

// GetAllProjectsParams defines parameters for GetAllProjects.
type GetAllProjectsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAllProjectsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAllProjectsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`
}

// GetAllProjectsParamsSortOrder defines parameters for GetAllProjects.
type GetAllProjectsParamsSortOrder string

// GetAllProjectsParamsSortByField defines parameters for GetAllProjects.
type GetAllProjectsParamsSortByField string

// CreateProjectParams defines parameters for CreateProject.
type CreateProjectParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// DeleteProjectParams defines parameters for DeleteProject.
type DeleteProjectParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetProjectParams defines parameters for GetProject.
type GetProjectParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// ModifyProjectParams defines parameters for ModifyProject.
type ModifyProjectParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetProjectFlagsParams defines parameters for GetProjectFlags.
type GetProjectFlagsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Name of the field
	Name *NameQueryParam `form:"name,omitempty" json:"name,omitempty"`
}

// DeleteGitRepoParams defines parameters for DeleteGitRepo.
type DeleteGitRepoParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetGitRepoParams defines parameters for GetGitRepo.
type GetGitRepoParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// PatchGitRepoParams defines parameters for PatchGitRepo.
type PatchGitRepoParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// CreateGitRepoParams defines parameters for CreateGitRepo.
type CreateGitRepoParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// CreateProxyKeyParams defines parameters for CreateProxyKey.
type CreateProxyKeyParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// DeleteProxyKeyParams defines parameters for DeleteProxyKey.
type DeleteProxyKeyParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetProxyKeyParams defines parameters for GetProxyKey.
type GetProxyKeyParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// UpdateProxyKeyParams defines parameters for UpdateProxyKey.
type UpdateProxyKeyParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetAllSegmentsParams defines parameters for GetAllSegments.
type GetAllSegmentsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAllSegmentsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAllSegmentsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the field
	Name *NameQueryParam `form:"name,omitempty" json:"name,omitempty"`

	// Identifier of the field
	Identifier *IdentifierQueryParam `form:"identifier,omitempty" json:"identifier,omitempty"`
}

// GetAllSegmentsParamsSortOrder defines parameters for GetAllSegments.
type GetAllSegmentsParamsSortOrder string

// GetAllSegmentsParamsSortByField defines parameters for GetAllSegments.
type GetAllSegmentsParamsSortByField string

// CreateSegmentParams defines parameters for CreateSegment.
type CreateSegmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// DeleteSegmentParams defines parameters for DeleteSegment.
type DeleteSegmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// GetSegmentParams defines parameters for GetSegment.
type GetSegmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// PatchSegmentParams defines parameters for PatchSegment.
type PatchSegmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// GetAvailableFlagsForSegmentParams defines parameters for GetAvailableFlagsForSegment.
type GetAvailableFlagsForSegmentParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAvailableFlagsForSegmentParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAvailableFlagsForSegmentParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Identifier of the feature flag
	FlagNameIdentifier *FlagNameQueryParam `form:"flagNameIdentifier,omitempty" json:"flagNameIdentifier,omitempty"`
}

// GetAvailableFlagsForSegmentParamsSortOrder defines parameters for GetAvailableFlagsForSegment.
type GetAvailableFlagsForSegmentParamsSortOrder string

// GetAvailableFlagsForSegmentParamsSortByField defines parameters for GetAvailableFlagsForSegment.
type GetAvailableFlagsForSegmentParamsSortByField string

// GetSegmentFlagsParams defines parameters for GetSegmentFlags.
type GetSegmentFlagsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// GetAllTagsParams defines parameters for GetAllTags.
type GetAllTagsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAllTagsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAllTagsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the field
	Name *NameQueryParam `form:"name,omitempty" json:"name,omitempty"`

	// Identifier of the field
	Identifier *IdentifierQueryParam `form:"identifier,omitempty" json:"identifier,omitempty"`

	// Identifier of the tag to filter on
	TagIdentifierFilter *TagFilterOptionalParam `form:"tagIdentifierFilter,omitempty" json:"tagIdentifierFilter,omitempty"`
}

// GetAllTagsParamsSortOrder defines parameters for GetAllTags.
type GetAllTagsParamsSortOrder string

// GetAllTagsParamsSortByField defines parameters for GetAllTags.
type GetAllTagsParamsSortByField string

// CreateTagParams defines parameters for CreateTag.
type CreateTagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`
}

// DeleteTagParams defines parameters for DeleteTag.
type DeleteTagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Git commit message
	CommitMsg *CommitMsgQueryParam `form:"commitMsg,omitempty" json:"commitMsg,omitempty"`

	// Permanently deletes the the feature flag
	ForceDelete *ForceDeleteQueryParam `form:"forceDelete,omitempty" json:"forceDelete,omitempty"`
}

// GetTagParams defines parameters for GetTag.
type GetTagParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment
	EnvironmentIdentifier *EnvironmentOptionalQueryParam `form:"environmentIdentifier,omitempty" json:"environmentIdentifier,omitempty"`

	// Parameter to indicate if metrics data is requested in response
	Metrics *MetricsOptionalParam `form:"metrics,omitempty" json:"metrics,omitempty"`

	// Status of the feature flag
	Archived *ArchivedQueryParam `form:"archived,omitempty" json:"archived,omitempty"`
}

// GetAllTargetsParams defines parameters for GetAllTargets.
type GetAllTargetsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetAllTargetsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetAllTargetsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the target
	TargetName *TargetNameQueryParam `form:"targetName,omitempty" json:"targetName,omitempty"`

	// Identifier of the target
	TargetIdentifier *TargetIdentifierQueryParam `form:"targetIdentifier,omitempty" json:"targetIdentifier,omitempty"`
}

// GetAllTargetsParamsSortOrder defines parameters for GetAllTargets.
type GetAllTargetsParamsSortOrder string

// GetAllTargetsParamsSortByField defines parameters for GetAllTargets.
type GetAllTargetsParamsSortByField string

// CreateTargetParams defines parameters for CreateTarget.
type CreateTargetParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`
}

// GetTargetsAndSegmentsInfoParams defines parameters for GetTargetsAndSegmentsInfo.
type GetTargetsAndSegmentsInfoParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// Comma separated identifiers for multiple targets
	Targets *TargetsOptionalParam `form:"targets,omitempty" json:"targets,omitempty"`

	// Comma separated identifiers for multiple Target Groups
	TargetGroups *TargetGroupsOptionalParam `form:"targetGroups,omitempty" json:"targetGroups,omitempty"`
}

// GetTargetsAndSegmentsParams defines parameters for GetTargetsAndSegments.
type GetTargetsAndSegmentsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// Identifier of the target or segment
	TsIdentifier *TsIdentifierQueryParam `form:"tsIdentifier,omitempty" json:"tsIdentifier,omitempty"`

	// Name of the target or segment
	TsName *TsNameQueryParam `form:"tsName,omitempty" json:"tsName,omitempty"`

	// SortByField
	SortByField *GetTargetsAndSegmentsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// SortOrder
	SortOrder *GetTargetsAndSegmentsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetTargetsAndSegmentsParamsSortByField defines parameters for GetTargetsAndSegments.
type GetTargetsAndSegmentsParamsSortByField string

// GetTargetsAndSegmentsParamsSortOrder defines parameters for GetTargetsAndSegments.
type GetTargetsAndSegmentsParamsSortOrder string

// GetAllTargetAttributesParams defines parameters for GetAllTargetAttributes.
type GetAllTargetAttributesParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// UploadTargetsParams defines parameters for UploadTargets.
type UploadTargetsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// DeleteTargetParams defines parameters for DeleteTarget.
type DeleteTargetParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// GetTargetParams defines parameters for GetTarget.
type GetTargetParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// PatchTargetParams defines parameters for PatchTarget.
type PatchTargetParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// ModifyTargetParams defines parameters for ModifyTarget.
type ModifyTargetParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// GetTargetAvailableSegmentsParams defines parameters for GetTargetAvailableSegments.
type GetTargetAvailableSegmentsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`

	// PageNumber
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortOrder
	SortOrder *GetTargetAvailableSegmentsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortByField
	SortByField *GetTargetAvailableSegmentsParamsSortByField `form:"sortByField,omitempty" json:"sortByField,omitempty"`

	// Name of the segment
	SegmentName *SegmentNameQueryParam `form:"segmentName,omitempty" json:"segmentName,omitempty"`
}

// GetTargetAvailableSegmentsParamsSortOrder defines parameters for GetTargetAvailableSegments.
type GetTargetAvailableSegmentsParamsSortOrder string

// GetTargetAvailableSegmentsParamsSortByField defines parameters for GetTargetAvailableSegments.
type GetTargetAvailableSegmentsParamsSortByField string

// GetTargetSegmentsParams defines parameters for GetTargetSegments.
type GetTargetSegmentsParams struct {
	// Account Identifier
	AccountIdentifier AccountQueryParam `form:"accountIdentifier" json:"accountIdentifier"`

	// Organization Identifier
	OrgIdentifier OrgQueryParam `form:"orgIdentifier" json:"orgIdentifier"`

	// The Project identifier
	ProjectIdentifier ProjectQueryParam `form:"projectIdentifier" json:"projectIdentifier"`

	// Environment Identifier
	EnvironmentIdentifier EnvironmentQueryParam `form:"environmentIdentifier" json:"environmentIdentifier"`
}

// CreateAIDAQueryJSONRequestBody defines body for CreateAIDAQuery for application/json ContentType.
type CreateAIDAQueryJSONRequestBody AIDARequest

// AddAPIKeyJSONRequestBody defines body for AddAPIKey for application/json ContentType.
type AddAPIKeyJSONRequestBody APIKeyRequest

// UpdateAPIKeyJSONRequestBody defines body for UpdateAPIKey for application/json ContentType.
type UpdateAPIKeyJSONRequestBody APIKeyUpdateRequest

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody EnvironmentRequest

// ModifyEnvironmentJSONRequestBody defines body for ModifyEnvironment for application/json ContentType.
type ModifyEnvironmentJSONRequestBody EnvironmentRequest

// PatchFeaturesJSONRequestBody defines body for PatchFeatures for application/json ContentType.
type PatchFeaturesJSONRequestBody FeaturesPatchRequest

// CreateFeatureFlagJSONRequestBody defines body for CreateFeatureFlag for application/json ContentType.
type CreateFeatureFlagJSONRequestBody FeatureFlagRequest

// UpdateFlagsYamlJSONRequestBody defines body for UpdateFlagsYaml for application/json ContentType.
type UpdateFlagsYamlJSONRequestBody FeatureYamlRequest

// PatchFeatureJSONRequestBody defines body for PatchFeature for application/json ContentType.
type PatchFeatureJSONRequestBody FeaturePatchRequest

// PatchFeaturePipelineJSONRequestBody defines body for PatchFeaturePipeline for application/json ContentType.
type PatchFeaturePipelineJSONRequestBody FeaturePipelineRequest

// CreateFlagPipelineJSONRequestBody defines body for CreateFlagPipeline for application/json ContentType.
type CreateFlagPipelineJSONRequestBody FeaturePipelineRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody ProjectRequest

// ModifyProjectJSONRequestBody defines body for ModifyProject for application/json ContentType.
type ModifyProjectJSONRequestBody ProjectRequest

// PatchGitRepoJSONRequestBody defines body for PatchGitRepo for application/json ContentType.
type PatchGitRepoJSONRequestBody GitRepoPatchRequest

// CreateGitRepoJSONRequestBody defines body for CreateGitRepo for application/json ContentType.
type CreateGitRepoJSONRequestBody GitRepoRequest

// CreateProxyKeyJSONRequestBody defines body for CreateProxyKey for application/json ContentType.
type CreateProxyKeyJSONRequestBody ProxyKeysPostRequest

// UpdateProxyKeyJSONRequestBody defines body for UpdateProxyKey for application/json ContentType.
type UpdateProxyKeyJSONRequestBody ProxyKeysPatchRequest

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody SegmentRequest

// PatchSegmentJSONRequestBody defines body for PatchSegment for application/json ContentType.
type PatchSegmentJSONRequestBody SegmentPatchRequest

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody TagRequest

// CreateTargetJSONRequestBody defines body for CreateTarget for application/json ContentType.
type CreateTargetJSONRequestBody TargetRequest

// PatchTargetJSONRequestBody defines body for PatchTarget for application/json ContentType.
type PatchTargetJSONRequestBody TargetPatchRequest

// ModifyTargetJSONRequestBody defines body for ModifyTarget for application/json ContentType.
type ModifyTargetJSONRequestBody TargetRequest

// Getter for additional properties for FlagState_Environments. Returns the specified
// element and whether it was found
func (a FlagState_Environments) Get(fieldName string) (value FlagEnvironmentState, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FlagState_Environments
func (a *FlagState_Environments) Set(fieldName string, value FlagEnvironmentState) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]FlagEnvironmentState)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FlagState_Environments to handle AdditionalProperties
func (a *FlagState_Environments) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]FlagEnvironmentState)
		for fieldName, fieldBuf := range object {
			var fieldVal FlagEnvironmentState
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FlagState_Environments to handle AdditionalProperties
func (a FlagState_Environments) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProjectFlags_Environments. Returns the specified
// element and whether it was found
func (a ProjectFlags_Environments) Get(fieldName string) (value FlagEnvironment, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectFlags_Environments
func (a *ProjectFlags_Environments) Set(fieldName string, value FlagEnvironment) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]FlagEnvironment)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectFlags_Environments to handle AdditionalProperties
func (a *ProjectFlags_Environments) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]FlagEnvironment)
		for fieldName, fieldBuf := range object {
			var fieldVal FlagEnvironment
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectFlags_Environments to handle AdditionalProperties
func (a ProjectFlags_Environments) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
