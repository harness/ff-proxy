// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAIDAQuery request with any body
	CreateAIDAQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAIDAQuery(ctx context.Context, body CreateAIDAQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAPIKeys request
	GetAllAPIKeys(ctx context.Context, params *GetAllAPIKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAPIKey request with any body
	AddAPIKeyWithBody(ctx context.Context, params *AddAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAPIKey(ctx context.Context, params *AddAPIKeyParams, body AddAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIKey request
	DeleteAPIKey(ctx context.Context, identifier Identifier, params *DeleteAPIKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIKey request
	GetAPIKey(ctx context.Context, identifier Identifier, params *GetAPIKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAPIKey request with any body
	UpdateAPIKeyWithBody(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAPIKey(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, body UpdateAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuditByParams request
	GetAuditByParams(ctx context.Context, params *GetAuditByParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEnvironments request
	GetAllEnvironments(ctx context.Context, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBody(ctx context.Context, params *CreateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, params *CreateEnvironmentParams, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, identifier Identifier, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, identifier Identifier, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyEnvironment request with any body
	ModifyEnvironmentWithBody(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyEnvironment(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, body ModifyEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllFeatures request
	GetAllFeatures(ctx context.Context, params *GetAllFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFeatures request with any body
	PatchFeaturesWithBody(ctx context.Context, params *PatchFeaturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFeatures(ctx context.Context, params *PatchFeaturesParams, body PatchFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFeatureFlag request with any body
	CreateFeatureFlagWithBody(ctx context.Context, params *CreateFeatureFlagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeatureFlag(ctx context.Context, params *CreateFeatureFlagParams, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailableFeaturePipelines request
	GetAvailableFeaturePipelines(ctx context.Context, params *GetAvailableFeaturePipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureMetrics request
	GetFeatureMetrics(ctx context.Context, params *GetFeatureMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlagsYaml request
	GetFlagsYaml(ctx context.Context, params *GetFlagsYamlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFlagsYaml request with any body
	UpdateFlagsYamlWithBody(ctx context.Context, params *UpdateFlagsYamlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFlagsYaml(ctx context.Context, params *UpdateFlagsYamlParams, body UpdateFlagsYamlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeatureFlag request
	DeleteFeatureFlag(ctx context.Context, identifier Identifier, params *DeleteFeatureFlagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureFlag request
	GetFeatureFlag(ctx context.Context, identifier Identifier, params *GetFeatureFlagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFeature request with any body
	PatchFeatureWithBody(ctx context.Context, identifier Identifier, params *PatchFeatureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFeature(ctx context.Context, identifier Identifier, params *PatchFeatureParams, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDependentFeatures request
	GetDependentFeatures(ctx context.Context, identifier Identifier, params *GetDependentFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureEvaluations request
	GetFeatureEvaluations(ctx context.Context, identifier Identifier, params *GetFeatureEvaluationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeaturePipeline request
	DeleteFeaturePipeline(ctx context.Context, identifier Identifier, params *DeleteFeaturePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeaturePipeline request
	GetFeaturePipeline(ctx context.Context, identifier Identifier, params *GetFeaturePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFeaturePipeline request with any body
	PatchFeaturePipelineWithBody(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFeaturePipeline(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, body PatchFeaturePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFlagPipeline request with any body
	CreateFlagPipelineWithBody(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFlagPipeline(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, body CreateFlagPipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreFeatureFlag request
	RestoreFeatureFlag(ctx context.Context, identifier Identifier, params *RestoreFeatureFlagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJiraIssues request
	GetJiraIssues(ctx context.Context, params *GetJiraIssuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOSByID request
	GetOSByID(ctx context.Context, identifiers Identifiers, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSDKDetails request
	GetSDKDetails(ctx context.Context, params *GetSDKDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFlagOverview request
	GetUserFlagOverview(ctx context.Context, params *GetUserFlagOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllProjects request
	GetAllProjects(ctx context.Context, params *GetAllProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProject request with any body
	CreateProjectWithBody(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, identifier Identifier, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, identifier Identifier, params *GetProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyProject request with any body
	ModifyProjectWithBody(ctx context.Context, identifier Identifier, params *ModifyProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyProject(ctx context.Context, identifier Identifier, params *ModifyProjectParams, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectFlags request
	GetProjectFlags(ctx context.Context, identifier Identifier, params *GetProjectFlagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGitRepo request
	DeleteGitRepo(ctx context.Context, identifier Identifier, params *DeleteGitRepoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGitRepo request
	GetGitRepo(ctx context.Context, identifier Identifier, params *GetGitRepoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchGitRepo request with any body
	PatchGitRepoWithBody(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchGitRepo(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, body PatchGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGitRepo request with any body
	CreateGitRepoWithBody(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGitRepo(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, body CreateGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProxyKey request with any body
	CreateProxyKeyWithBody(ctx context.Context, params *CreateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProxyKey(ctx context.Context, params *CreateProxyKeyParams, body CreateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProxyKey request
	DeleteProxyKey(ctx context.Context, identifier Identifier, params *DeleteProxyKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProxyKey request
	GetProxyKey(ctx context.Context, identifier Identifier, params *GetProxyKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProxyKey request with any body
	UpdateProxyKeyWithBody(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProxyKey(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, body UpdateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSegments request
	GetAllSegments(ctx context.Context, params *GetAllSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSegment request with any body
	CreateSegmentWithBody(ctx context.Context, params *CreateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSegment(ctx context.Context, params *CreateSegmentParams, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSegment request
	DeleteSegment(ctx context.Context, identifier Identifier, params *DeleteSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegment request
	GetSegment(ctx context.Context, identifier Identifier, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSegment request with any body
	PatchSegmentWithBody(ctx context.Context, identifier Identifier, params *PatchSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSegment(ctx context.Context, identifier Identifier, params *PatchSegmentParams, body PatchSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailableFlagsForSegment request
	GetAvailableFlagsForSegment(ctx context.Context, identifier Identifier, params *GetAvailableFlagsForSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentFlags request
	GetSegmentFlags(ctx context.Context, identifier Identifier, params *GetSegmentFlagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTags request
	GetAllTags(ctx context.Context, params *GetAllTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTag request with any body
	CreateTagWithBody(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, identifier Identifier, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTag request
	GetTag(ctx context.Context, identifier Identifier, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTargets request
	GetAllTargets(ctx context.Context, params *GetAllTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTarget request with any body
	CreateTargetWithBody(ctx context.Context, params *CreateTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTarget(ctx context.Context, params *CreateTargetParams, body CreateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetsAndSegmentsInfo request
	GetTargetsAndSegmentsInfo(ctx context.Context, params *GetTargetsAndSegmentsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetsAndSegments request
	GetTargetsAndSegments(ctx context.Context, params *GetTargetsAndSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTargetAttributes request
	GetAllTargetAttributes(ctx context.Context, params *GetAllTargetAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadTargets request with any body
	UploadTargetsWithBody(ctx context.Context, params *UploadTargetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTarget request
	DeleteTarget(ctx context.Context, identifier Identifier, params *DeleteTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTarget request
	GetTarget(ctx context.Context, identifier Identifier, params *GetTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTarget request with any body
	PatchTargetWithBody(ctx context.Context, identifier Identifier, params *PatchTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTarget(ctx context.Context, identifier Identifier, params *PatchTargetParams, body PatchTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyTarget request with any body
	ModifyTargetWithBody(ctx context.Context, identifier Identifier, params *ModifyTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyTarget(ctx context.Context, identifier Identifier, params *ModifyTargetParams, body ModifyTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetAvailableSegments request
	GetTargetAvailableSegments(ctx context.Context, identifier Identifier, params *GetTargetAvailableSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTargetSegments request
	GetTargetSegments(ctx context.Context, identifier Identifier, params *GetTargetSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAIDAQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAIDAQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAIDAQuery(ctx context.Context, body CreateAIDAQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAIDAQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAPIKeys(ctx context.Context, params *GetAllAPIKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAPIKeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAPIKeyWithBody(ctx context.Context, params *AddAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAPIKeyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAPIKey(ctx context.Context, params *AddAPIKeyParams, body AddAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAPIKeyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIKey(ctx context.Context, identifier Identifier, params *DeleteAPIKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIKeyRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIKey(ctx context.Context, identifier Identifier, params *GetAPIKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIKeyRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAPIKeyWithBody(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAPIKeyRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAPIKey(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, body UpdateAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAPIKeyRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuditByParams(ctx context.Context, params *GetAuditByParamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuditByParamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEnvironments(ctx context.Context, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, params *CreateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, params *CreateEnvironmentParams, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, identifier Identifier, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, identifier Identifier, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEnvironmentWithBody(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEnvironmentRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEnvironment(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, body ModifyEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEnvironmentRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllFeatures(ctx context.Context, params *GetAllFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllFeaturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeaturesWithBody(ctx context.Context, params *PatchFeaturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeaturesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatures(ctx context.Context, params *PatchFeaturesParams, body PatchFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeaturesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeatureFlagWithBody(ctx context.Context, params *CreateFeatureFlagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureFlagRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeatureFlag(ctx context.Context, params *CreateFeatureFlagParams, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureFlagRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailableFeaturePipelines(ctx context.Context, params *GetAvailableFeaturePipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailableFeaturePipelinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureMetrics(ctx context.Context, params *GetFeatureMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlagsYaml(ctx context.Context, params *GetFlagsYamlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlagsYamlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFlagsYamlWithBody(ctx context.Context, params *UpdateFlagsYamlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFlagsYamlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFlagsYaml(ctx context.Context, params *UpdateFlagsYamlParams, body UpdateFlagsYamlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFlagsYamlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeatureFlag(ctx context.Context, identifier Identifier, params *DeleteFeatureFlagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureFlagRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureFlag(ctx context.Context, identifier Identifier, params *GetFeatureFlagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureFlagRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatureWithBody(ctx context.Context, identifier Identifier, params *PatchFeatureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeature(ctx context.Context, identifier Identifier, params *PatchFeatureParams, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDependentFeatures(ctx context.Context, identifier Identifier, params *GetDependentFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDependentFeaturesRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureEvaluations(ctx context.Context, identifier Identifier, params *GetFeatureEvaluationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureEvaluationsRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeaturePipeline(ctx context.Context, identifier Identifier, params *DeleteFeaturePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeaturePipelineRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeaturePipeline(ctx context.Context, identifier Identifier, params *GetFeaturePipelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturePipelineRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeaturePipelineWithBody(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeaturePipelineRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeaturePipeline(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, body PatchFeaturePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeaturePipelineRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFlagPipelineWithBody(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFlagPipelineRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFlagPipeline(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, body CreateFlagPipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFlagPipelineRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreFeatureFlag(ctx context.Context, identifier Identifier, params *RestoreFeatureFlagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreFeatureFlagRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJiraIssues(ctx context.Context, params *GetJiraIssuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJiraIssuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOSByID(ctx context.Context, identifiers Identifiers, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOSByIDRequest(c.Server, identifiers)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDKDetails(ctx context.Context, params *GetSDKDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDKDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFlagOverview(ctx context.Context, params *GetUserFlagOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFlagOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllProjects(ctx context.Context, params *GetAllProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, identifier Identifier, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, identifier Identifier, params *GetProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProjectWithBody(ctx context.Context, identifier Identifier, params *ModifyProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProjectRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProject(ctx context.Context, identifier Identifier, params *ModifyProjectParams, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProjectRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectFlags(ctx context.Context, identifier Identifier, params *GetProjectFlagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectFlagsRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGitRepo(ctx context.Context, identifier Identifier, params *DeleteGitRepoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGitRepoRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGitRepo(ctx context.Context, identifier Identifier, params *GetGitRepoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGitRepoRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGitRepoWithBody(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGitRepoRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGitRepo(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, body PatchGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGitRepoRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGitRepoWithBody(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGitRepoRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGitRepo(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, body CreateGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGitRepoRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProxyKeyWithBody(ctx context.Context, params *CreateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProxyKeyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProxyKey(ctx context.Context, params *CreateProxyKeyParams, body CreateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProxyKeyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProxyKey(ctx context.Context, identifier Identifier, params *DeleteProxyKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProxyKeyRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProxyKey(ctx context.Context, identifier Identifier, params *GetProxyKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProxyKeyRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProxyKeyWithBody(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProxyKeyRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProxyKey(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, body UpdateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProxyKeyRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSegments(ctx context.Context, params *GetAllSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegmentWithBody(ctx context.Context, params *CreateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegment(ctx context.Context, params *CreateSegmentParams, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSegment(ctx context.Context, identifier Identifier, params *DeleteSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSegmentRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegment(ctx context.Context, identifier Identifier, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSegmentWithBody(ctx context.Context, identifier Identifier, params *PatchSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSegmentRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSegment(ctx context.Context, identifier Identifier, params *PatchSegmentParams, body PatchSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSegmentRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailableFlagsForSegment(ctx context.Context, identifier Identifier, params *GetAvailableFlagsForSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailableFlagsForSegmentRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentFlags(ctx context.Context, identifier Identifier, params *GetSegmentFlagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentFlagsRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTags(ctx context.Context, params *GetAllTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, identifier Identifier, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTag(ctx context.Context, identifier Identifier, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTargets(ctx context.Context, params *GetAllTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTargetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTargetWithBody(ctx context.Context, params *CreateTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTargetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTarget(ctx context.Context, params *CreateTargetParams, body CreateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTargetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetsAndSegmentsInfo(ctx context.Context, params *GetTargetsAndSegmentsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsAndSegmentsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetsAndSegments(ctx context.Context, params *GetTargetsAndSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetsAndSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTargetAttributes(ctx context.Context, params *GetAllTargetAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTargetAttributesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadTargetsWithBody(ctx context.Context, params *UploadTargetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadTargetsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTarget(ctx context.Context, identifier Identifier, params *DeleteTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTargetRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTarget(ctx context.Context, identifier Identifier, params *GetTargetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTargetWithBody(ctx context.Context, identifier Identifier, params *PatchTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTargetRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTarget(ctx context.Context, identifier Identifier, params *PatchTargetParams, body PatchTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTargetRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyTargetWithBody(ctx context.Context, identifier Identifier, params *ModifyTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyTargetRequestWithBody(c.Server, identifier, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyTarget(ctx context.Context, identifier Identifier, params *ModifyTargetParams, body ModifyTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyTargetRequest(c.Server, identifier, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetAvailableSegments(ctx context.Context, identifier Identifier, params *GetTargetAvailableSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetAvailableSegmentsRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTargetSegments(ctx context.Context, identifier Identifier, params *GetTargetSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTargetSegmentsRequest(c.Server, identifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAIDAQueryRequest calls the generic CreateAIDAQuery builder with application/json body
func NewCreateAIDAQueryRequest(server string, body CreateAIDAQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAIDAQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAIDAQueryRequestWithBody generates requests for CreateAIDAQuery with any type of body
func NewCreateAIDAQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/aida")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAPIKeysRequest generates requests for GetAllAPIKeys
func NewGetAllAPIKeysRequest(server string, params *GetAllAPIKeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/apikey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAPIKeyRequest calls the generic AddAPIKey builder with application/json body
func NewAddAPIKeyRequest(server string, params *AddAPIKeyParams, body AddAPIKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAPIKeyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddAPIKeyRequestWithBody generates requests for AddAPIKey with any type of body
func NewAddAPIKeyRequestWithBody(server string, params *AddAPIKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/apikey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIKeyRequest generates requests for DeleteAPIKey
func NewDeleteAPIKeyRequest(server string, identifier Identifier, params *DeleteAPIKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/apikey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIKeyRequest generates requests for GetAPIKey
func NewGetAPIKeyRequest(server string, identifier Identifier, params *GetAPIKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/apikey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAPIKeyRequest calls the generic UpdateAPIKey builder with application/json body
func NewUpdateAPIKeyRequest(server string, identifier Identifier, params *UpdateAPIKeyParams, body UpdateAPIKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAPIKeyRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewUpdateAPIKeyRequestWithBody generates requests for UpdateAPIKey with any type of body
func NewUpdateAPIKeyRequestWithBody(server string, identifier Identifier, params *UpdateAPIKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/apikey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuditByParamsRequest generates requests for GetAuditByParams
func NewGetAuditByParamsRequest(server string, params *GetAuditByParamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProjectIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, *params.ProjectIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectType", runtime.ParamLocationQuery, params.ObjectType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Actor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actor", runtime.ParamLocationQuery, *params.Actor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Action != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifier", runtime.ParamLocationQuery, *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEnvironmentsRequest generates requests for GetAllEnvironments
func NewGetAllEnvironmentsRequest(server string, params *GetAllEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, params *CreateEnvironmentParams, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, params *CreateEnvironmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, identifier Identifier, params *DeleteEnvironmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, identifier Identifier, params *GetEnvironmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyEnvironmentRequest calls the generic ModifyEnvironment builder with application/json body
func NewModifyEnvironmentRequest(server string, identifier Identifier, params *ModifyEnvironmentParams, body ModifyEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyEnvironmentRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewModifyEnvironmentRequestWithBody generates requests for ModifyEnvironment with any type of body
func NewModifyEnvironmentRequestWithBody(server string, identifier Identifier, params *ModifyEnvironmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllFeaturesRequest generates requests for GetAllFeatures
func NewGetAllFeaturesRequest(server string, params *GetAllFeaturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifier", runtime.ParamLocationQuery, *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetIdentifier", runtime.ParamLocationQuery, *params.TargetIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetIdentifierFilter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetIdentifierFilter", runtime.ParamLocationQuery, *params.TargetIdentifierFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, *params.Metrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureIdentifiers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featureIdentifiers", runtime.ParamLocationQuery, *params.FeatureIdentifiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludedFeatures != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludedFeatures", runtime.ParamLocationQuery, *params.ExcludedFeatures); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Lifetime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime", runtime.ParamLocationQuery, *params.Lifetime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FlagCounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flagCounts", runtime.ParamLocationQuery, *params.FlagCounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Summary != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summary", runtime.ParamLocationQuery, *params.Summary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFeaturesRequest calls the generic PatchFeatures builder with application/json body
func NewPatchFeaturesRequest(server string, params *PatchFeaturesParams, body PatchFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFeaturesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchFeaturesRequestWithBody generates requests for PatchFeatures with any type of body
func NewPatchFeaturesRequestWithBody(server string, params *PatchFeaturesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateFeatureFlagRequest calls the generic CreateFeatureFlag builder with application/json body
func NewCreateFeatureFlagRequest(server string, params *CreateFeatureFlagParams, body CreateFeatureFlagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeatureFlagRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateFeatureFlagRequestWithBody generates requests for CreateFeatureFlag with any type of body
func NewCreateFeatureFlagRequestWithBody(server string, params *CreateFeatureFlagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailableFeaturePipelinesRequest generates requests for GetAvailableFeaturePipelines
func NewGetAvailableFeaturePipelinesRequest(server string, params *GetAvailableFeaturePipelinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/available_pipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PipelineName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineName", runtime.ParamLocationQuery, *params.PipelineName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureMetricsRequest generates requests for GetFeatureMetrics
func NewGetFeatureMetricsRequest(server string, params *GetFeatureMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FeatureIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featureIDs", runtime.ParamLocationQuery, *params.FeatureIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifier", runtime.ParamLocationQuery, *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Lifetime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime", runtime.ParamLocationQuery, *params.Lifetime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlagsYamlRequest generates requests for GetFlagsYaml
func NewGetFlagsYamlRequest(server string, params *GetFlagsYamlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFlagsYamlRequest calls the generic UpdateFlagsYaml builder with application/json body
func NewUpdateFlagsYamlRequest(server string, params *UpdateFlagsYamlParams, body UpdateFlagsYamlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFlagsYamlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateFlagsYamlRequestWithBody generates requests for UpdateFlagsYaml with any type of body
func NewUpdateFlagsYamlRequestWithBody(server string, params *UpdateFlagsYamlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeatureFlagRequest generates requests for DeleteFeatureFlag
func NewDeleteFeatureFlagRequest(server string, identifier Identifier, params *DeleteFeatureFlagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.CommitMsg != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commitMsg", runtime.ParamLocationQuery, *params.CommitMsg); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceDelete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureFlagRequest generates requests for GetFeatureFlag
func NewGetFeatureFlagRequest(server string, identifier Identifier, params *GetFeatureFlagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, *params.Metrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFeatureRequest calls the generic PatchFeature builder with application/json body
func NewPatchFeatureRequest(server string, identifier Identifier, params *PatchFeatureParams, body PatchFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFeatureRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewPatchFeatureRequestWithBody generates requests for PatchFeature with any type of body
func NewPatchFeatureRequestWithBody(server string, identifier Identifier, params *PatchFeatureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDependentFeaturesRequest generates requests for GetDependentFeatures
func NewGetDependentFeaturesRequest(server string, identifier Identifier, params *GetDependentFeaturesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/dependants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetIdentifier", runtime.ParamLocationQuery, *params.TargetIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetIdentifierFilter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetIdentifierFilter", runtime.ParamLocationQuery, *params.TargetIdentifierFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, *params.Metrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureIdentifiers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featureIdentifiers", runtime.ParamLocationQuery, *params.FeatureIdentifiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludedFeatures != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludedFeatures", runtime.ParamLocationQuery, *params.ExcludedFeatures); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Lifetime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime", runtime.ParamLocationQuery, *params.Lifetime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FlagCounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flagCounts", runtime.ParamLocationQuery, *params.FlagCounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Summary != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summary", runtime.ParamLocationQuery, *params.Summary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureEvaluationsRequest generates requests for GetFeatureEvaluations
func NewGetFeatureEvaluationsRequest(server string, identifier Identifier, params *GetFeatureEvaluationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/evaluations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFeaturePipelineRequest generates requests for DeleteFeaturePipeline
func NewDeleteFeaturePipelineRequest(server string, identifier Identifier, params *DeleteFeaturePipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/pipeline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeaturePipelineRequest generates requests for GetFeaturePipeline
func NewGetFeaturePipelineRequest(server string, identifier Identifier, params *GetFeaturePipelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/pipeline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFeaturePipelineRequest calls the generic PatchFeaturePipeline builder with application/json body
func NewPatchFeaturePipelineRequest(server string, identifier Identifier, params *PatchFeaturePipelineParams, body PatchFeaturePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFeaturePipelineRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewPatchFeaturePipelineRequestWithBody generates requests for PatchFeaturePipeline with any type of body
func NewPatchFeaturePipelineRequestWithBody(server string, identifier Identifier, params *PatchFeaturePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/pipeline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateFlagPipelineRequest calls the generic CreateFlagPipeline builder with application/json body
func NewCreateFlagPipelineRequest(server string, identifier Identifier, params *CreateFlagPipelineParams, body CreateFlagPipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFlagPipelineRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewCreateFlagPipelineRequestWithBody generates requests for CreateFlagPipeline with any type of body
func NewCreateFlagPipelineRequestWithBody(server string, identifier Identifier, params *CreateFlagPipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/pipeline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestoreFeatureFlagRequest generates requests for RestoreFeatureFlag
func NewRestoreFeatureFlagRequest(server string, identifier Identifier, params *RestoreFeatureFlagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/features/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.CommitMsg != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commitMsg", runtime.ParamLocationQuery, *params.CommitMsg); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJiraIssuesRequest generates requests for GetJiraIssues
func NewGetJiraIssuesRequest(server string, params *GetJiraIssuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/jira/issues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchTerm", runtime.ParamLocationQuery, params.SearchTerm); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOSByIDRequest generates requests for GetOSByID
func NewGetOSByIDRequest(server string, identifiers Identifiers) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifiers", runtime.ParamLocationPath, identifiers)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/objects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSDKDetailsRequest generates requests for GetSDKDetails
func NewGetSDKDetailsRequest(server string, params *GetSDKDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/onboarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SdkLanguage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sdkLanguage", runtime.ParamLocationQuery, *params.SdkLanguage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SdkFramework != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sdkFramework", runtime.ParamLocationQuery, *params.SdkFramework); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserFlagOverviewRequest generates requests for GetUserFlagOverview
func NewGetUserFlagOverviewRequest(server string, params *GetUserFlagOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/overview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllProjectsRequest generates requests for GetAllProjects
func NewGetAllProjectsRequest(server string, params *GetAllProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, params *CreateProjectParams, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, params *CreateProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, identifier Identifier, params *DeleteProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, identifier Identifier, params *GetProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyProjectRequest calls the generic ModifyProject builder with application/json body
func NewModifyProjectRequest(server string, identifier Identifier, params *ModifyProjectParams, body ModifyProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyProjectRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewModifyProjectRequestWithBody generates requests for ModifyProject with any type of body
func NewModifyProjectRequestWithBody(server string, identifier Identifier, params *ModifyProjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectFlagsRequest generates requests for GetProjectFlags
func NewGetProjectFlagsRequest(server string, identifier Identifier, params *GetProjectFlagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s/flags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGitRepoRequest generates requests for DeleteGitRepo
func NewDeleteGitRepoRequest(server string, identifier Identifier, params *DeleteGitRepoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s/git_repo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGitRepoRequest generates requests for GetGitRepo
func NewGetGitRepoRequest(server string, identifier Identifier, params *GetGitRepoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s/git_repo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchGitRepoRequest calls the generic PatchGitRepo builder with application/json body
func NewPatchGitRepoRequest(server string, identifier Identifier, params *PatchGitRepoParams, body PatchGitRepoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchGitRepoRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewPatchGitRepoRequestWithBody generates requests for PatchGitRepo with any type of body
func NewPatchGitRepoRequestWithBody(server string, identifier Identifier, params *PatchGitRepoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s/git_repo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGitRepoRequest calls the generic CreateGitRepo builder with application/json body
func NewCreateGitRepoRequest(server string, identifier Identifier, params *CreateGitRepoParams, body CreateGitRepoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGitRepoRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewCreateGitRepoRequestWithBody generates requests for CreateGitRepo with any type of body
func NewCreateGitRepoRequestWithBody(server string, identifier Identifier, params *CreateGitRepoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/projects/%s/git_repo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateProxyKeyRequest calls the generic CreateProxyKey builder with application/json body
func NewCreateProxyKeyRequest(server string, params *CreateProxyKeyParams, body CreateProxyKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProxyKeyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateProxyKeyRequestWithBody generates requests for CreateProxyKey with any type of body
func NewCreateProxyKeyRequestWithBody(server string, params *CreateProxyKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/proxy/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProxyKeyRequest generates requests for DeleteProxyKey
func NewDeleteProxyKeyRequest(server string, identifier Identifier, params *DeleteProxyKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/proxy/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProxyKeyRequest generates requests for GetProxyKey
func NewGetProxyKeyRequest(server string, identifier Identifier, params *GetProxyKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/proxy/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProxyKeyRequest calls the generic UpdateProxyKey builder with application/json body
func NewUpdateProxyKeyRequest(server string, identifier Identifier, params *UpdateProxyKeyParams, body UpdateProxyKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProxyKeyRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewUpdateProxyKeyRequestWithBody generates requests for UpdateProxyKey with any type of body
func NewUpdateProxyKeyRequestWithBody(server string, identifier Identifier, params *UpdateProxyKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/proxy/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllSegmentsRequest generates requests for GetAllSegments
func NewGetAllSegmentsRequest(server string, params *GetAllSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifier", runtime.ParamLocationQuery, *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSegmentRequest calls the generic CreateSegment builder with application/json body
func NewCreateSegmentRequest(server string, params *CreateSegmentParams, body CreateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSegmentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateSegmentRequestWithBody generates requests for CreateSegment with any type of body
func NewCreateSegmentRequestWithBody(server string, params *CreateSegmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSegmentRequest generates requests for DeleteSegment
func NewDeleteSegmentRequest(server string, identifier Identifier, params *DeleteSegmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentRequest generates requests for GetSegment
func NewGetSegmentRequest(server string, identifier Identifier, params *GetSegmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSegmentRequest calls the generic PatchSegment builder with application/json body
func NewPatchSegmentRequest(server string, identifier Identifier, params *PatchSegmentParams, body PatchSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSegmentRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewPatchSegmentRequestWithBody generates requests for PatchSegment with any type of body
func NewPatchSegmentRequestWithBody(server string, identifier Identifier, params *PatchSegmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailableFlagsForSegmentRequest generates requests for GetAvailableFlagsForSegment
func NewGetAvailableFlagsForSegmentRequest(server string, identifier Identifier, params *GetAvailableFlagsForSegmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments/%s/available_flags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FlagNameIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flagNameIdentifier", runtime.ParamLocationQuery, *params.FlagNameIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentFlagsRequest generates requests for GetSegmentFlags
func NewGetSegmentFlagsRequest(server string, identifier Identifier, params *GetSegmentFlagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/segments/%s/flags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTagsRequest generates requests for GetAllTags
func NewGetAllTagsRequest(server string, params *GetAllTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Identifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifier", runtime.ParamLocationQuery, *params.Identifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagIdentifierFilter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagIdentifierFilter", runtime.ParamLocationQuery, *params.TagIdentifierFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, params *CreateTagParams, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, params *CreateTagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, identifier Identifier, params *DeleteTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.CommitMsg != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commitMsg", runtime.ParamLocationQuery, *params.CommitMsg); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceDelete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagRequest generates requests for GetTag
func NewGetTagRequest(server string, identifier Identifier, params *GetTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EnvironmentIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, *params.EnvironmentIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Metrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, *params.Metrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTargetsRequest generates requests for GetAllTargets
func NewGetAllTargetsRequest(server string, params *GetAllTargetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetName", runtime.ParamLocationQuery, *params.TargetName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetIdentifier", runtime.ParamLocationQuery, *params.TargetIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTargetRequest calls the generic CreateTarget builder with application/json body
func NewCreateTargetRequest(server string, params *CreateTargetParams, body CreateTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTargetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTargetRequestWithBody generates requests for CreateTarget with any type of body
func NewCreateTargetRequestWithBody(server string, params *CreateTargetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTargetsAndSegmentsInfoRequest generates requests for GetTargetsAndSegmentsInfo
func NewGetTargetsAndSegmentsInfoRequest(server string, params *GetTargetsAndSegmentsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets-segments-info/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Targets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targets", runtime.ParamLocationQuery, *params.Targets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TargetGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetGroups", runtime.ParamLocationQuery, *params.TargetGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTargetsAndSegmentsRequest generates requests for GetTargetsAndSegments
func NewGetTargetsAndSegmentsRequest(server string, params *GetTargetsAndSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets-segments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.TsIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tsIdentifier", runtime.ParamLocationQuery, *params.TsIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TsName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tsName", runtime.ParamLocationQuery, *params.TsName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTargetAttributesRequest generates requests for GetAllTargetAttributes
func NewGetAllTargetAttributesRequest(server string, params *GetAllTargetAttributesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadTargetsRequestWithBody generates requests for UploadTargets with any type of body
func NewUploadTargetsRequestWithBody(server string, params *UploadTargetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTargetRequest generates requests for DeleteTarget
func NewDeleteTargetRequest(server string, identifier Identifier, params *DeleteTargetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTargetRequest generates requests for GetTarget
func NewGetTargetRequest(server string, identifier Identifier, params *GetTargetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTargetRequest calls the generic PatchTarget builder with application/json body
func NewPatchTargetRequest(server string, identifier Identifier, params *PatchTargetParams, body PatchTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTargetRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewPatchTargetRequestWithBody generates requests for PatchTarget with any type of body
func NewPatchTargetRequestWithBody(server string, identifier Identifier, params *PatchTargetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyTargetRequest calls the generic ModifyTarget builder with application/json body
func NewModifyTargetRequest(server string, identifier Identifier, params *ModifyTargetParams, body ModifyTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyTargetRequestWithBody(server, identifier, params, "application/json", bodyReader)
}

// NewModifyTargetRequestWithBody generates requests for ModifyTarget with any type of body
func NewModifyTargetRequestWithBody(server string, identifier Identifier, params *ModifyTargetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTargetAvailableSegmentsRequest generates requests for GetTargetAvailableSegments
func NewGetTargetAvailableSegmentsRequest(server string, identifier Identifier, params *GetTargetAvailableSegmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/%s/available_segments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortByField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByField", runtime.ParamLocationQuery, *params.SortByField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SegmentName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "segmentName", runtime.ParamLocationQuery, *params.SegmentName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTargetSegmentsRequest generates requests for GetTargetSegments
func NewGetTargetSegmentsRequest(server string, identifier Identifier, params *GetTargetSegmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/targets/%s/segments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, params.AccountIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgIdentifier", runtime.ParamLocationQuery, params.OrgIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectIdentifier", runtime.ParamLocationQuery, params.ProjectIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentIdentifier", runtime.ParamLocationQuery, params.EnvironmentIdentifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAIDAQuery request with any body
	CreateAIDAQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAIDAQueryResponse, error)

	CreateAIDAQueryWithResponse(ctx context.Context, body CreateAIDAQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAIDAQueryResponse, error)

	// GetAllAPIKeys request
	GetAllAPIKeysWithResponse(ctx context.Context, params *GetAllAPIKeysParams, reqEditors ...RequestEditorFn) (*GetAllAPIKeysResponse, error)

	// AddAPIKey request with any body
	AddAPIKeyWithBodyWithResponse(ctx context.Context, params *AddAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAPIKeyResponse, error)

	AddAPIKeyWithResponse(ctx context.Context, params *AddAPIKeyParams, body AddAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAPIKeyResponse, error)

	// DeleteAPIKey request
	DeleteAPIKeyWithResponse(ctx context.Context, identifier Identifier, params *DeleteAPIKeyParams, reqEditors ...RequestEditorFn) (*DeleteAPIKeyResponse, error)

	// GetAPIKey request
	GetAPIKeyWithResponse(ctx context.Context, identifier Identifier, params *GetAPIKeyParams, reqEditors ...RequestEditorFn) (*GetAPIKeyResponse, error)

	// UpdateAPIKey request with any body
	UpdateAPIKeyWithBodyWithResponse(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAPIKeyResponse, error)

	UpdateAPIKeyWithResponse(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, body UpdateAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAPIKeyResponse, error)

	// GetAuditByParams request
	GetAuditByParamsWithResponse(ctx context.Context, params *GetAuditByParamsParams, reqEditors ...RequestEditorFn) (*GetAuditByParamsResponse, error)

	// GetAllEnvironments request
	GetAllEnvironmentsWithResponse(ctx context.Context, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*GetAllEnvironmentsResponse, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, params *CreateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, params *CreateEnvironmentParams, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, identifier Identifier, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, identifier Identifier, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// ModifyEnvironment request with any body
	ModifyEnvironmentWithBodyWithResponse(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEnvironmentResponse, error)

	ModifyEnvironmentWithResponse(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, body ModifyEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEnvironmentResponse, error)

	// GetAllFeatures request
	GetAllFeaturesWithResponse(ctx context.Context, params *GetAllFeaturesParams, reqEditors ...RequestEditorFn) (*GetAllFeaturesResponse, error)

	// PatchFeatures request with any body
	PatchFeaturesWithBodyWithResponse(ctx context.Context, params *PatchFeaturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeaturesResponse, error)

	PatchFeaturesWithResponse(ctx context.Context, params *PatchFeaturesParams, body PatchFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeaturesResponse, error)

	// CreateFeatureFlag request with any body
	CreateFeatureFlagWithBodyWithResponse(ctx context.Context, params *CreateFeatureFlagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error)

	CreateFeatureFlagWithResponse(ctx context.Context, params *CreateFeatureFlagParams, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error)

	// GetAvailableFeaturePipelines request
	GetAvailableFeaturePipelinesWithResponse(ctx context.Context, params *GetAvailableFeaturePipelinesParams, reqEditors ...RequestEditorFn) (*GetAvailableFeaturePipelinesResponse, error)

	// GetFeatureMetrics request
	GetFeatureMetricsWithResponse(ctx context.Context, params *GetFeatureMetricsParams, reqEditors ...RequestEditorFn) (*GetFeatureMetricsResponse, error)

	// GetFlagsYaml request
	GetFlagsYamlWithResponse(ctx context.Context, params *GetFlagsYamlParams, reqEditors ...RequestEditorFn) (*GetFlagsYamlResponse, error)

	// UpdateFlagsYaml request with any body
	UpdateFlagsYamlWithBodyWithResponse(ctx context.Context, params *UpdateFlagsYamlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFlagsYamlResponse, error)

	UpdateFlagsYamlWithResponse(ctx context.Context, params *UpdateFlagsYamlParams, body UpdateFlagsYamlJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFlagsYamlResponse, error)

	// DeleteFeatureFlag request
	DeleteFeatureFlagWithResponse(ctx context.Context, identifier Identifier, params *DeleteFeatureFlagParams, reqEditors ...RequestEditorFn) (*DeleteFeatureFlagResponse, error)

	// GetFeatureFlag request
	GetFeatureFlagWithResponse(ctx context.Context, identifier Identifier, params *GetFeatureFlagParams, reqEditors ...RequestEditorFn) (*GetFeatureFlagResponse, error)

	// PatchFeature request with any body
	PatchFeatureWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchFeatureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error)

	PatchFeatureWithResponse(ctx context.Context, identifier Identifier, params *PatchFeatureParams, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error)

	// GetDependentFeatures request
	GetDependentFeaturesWithResponse(ctx context.Context, identifier Identifier, params *GetDependentFeaturesParams, reqEditors ...RequestEditorFn) (*GetDependentFeaturesResponse, error)

	// GetFeatureEvaluations request
	GetFeatureEvaluationsWithResponse(ctx context.Context, identifier Identifier, params *GetFeatureEvaluationsParams, reqEditors ...RequestEditorFn) (*GetFeatureEvaluationsResponse, error)

	// DeleteFeaturePipeline request
	DeleteFeaturePipelineWithResponse(ctx context.Context, identifier Identifier, params *DeleteFeaturePipelineParams, reqEditors ...RequestEditorFn) (*DeleteFeaturePipelineResponse, error)

	// GetFeaturePipeline request
	GetFeaturePipelineWithResponse(ctx context.Context, identifier Identifier, params *GetFeaturePipelineParams, reqEditors ...RequestEditorFn) (*GetFeaturePipelineResponse, error)

	// PatchFeaturePipeline request with any body
	PatchFeaturePipelineWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeaturePipelineResponse, error)

	PatchFeaturePipelineWithResponse(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, body PatchFeaturePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeaturePipelineResponse, error)

	// CreateFlagPipeline request with any body
	CreateFlagPipelineWithBodyWithResponse(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFlagPipelineResponse, error)

	CreateFlagPipelineWithResponse(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, body CreateFlagPipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFlagPipelineResponse, error)

	// RestoreFeatureFlag request
	RestoreFeatureFlagWithResponse(ctx context.Context, identifier Identifier, params *RestoreFeatureFlagParams, reqEditors ...RequestEditorFn) (*RestoreFeatureFlagResponse, error)

	// GetJiraIssues request
	GetJiraIssuesWithResponse(ctx context.Context, params *GetJiraIssuesParams, reqEditors ...RequestEditorFn) (*GetJiraIssuesResponse, error)

	// GetOSByID request
	GetOSByIDWithResponse(ctx context.Context, identifiers Identifiers, reqEditors ...RequestEditorFn) (*GetOSByIDResponse, error)

	// GetSDKDetails request
	GetSDKDetailsWithResponse(ctx context.Context, params *GetSDKDetailsParams, reqEditors ...RequestEditorFn) (*GetSDKDetailsResponse, error)

	// GetUserFlagOverview request
	GetUserFlagOverviewWithResponse(ctx context.Context, params *GetUserFlagOverviewParams, reqEditors ...RequestEditorFn) (*GetUserFlagOverviewResponse, error)

	// GetAllProjects request
	GetAllProjectsWithResponse(ctx context.Context, params *GetAllProjectsParams, reqEditors ...RequestEditorFn) (*GetAllProjectsResponse, error)

	// CreateProject request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// DeleteProject request
	DeleteProjectWithResponse(ctx context.Context, identifier Identifier, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProject request
	GetProjectWithResponse(ctx context.Context, identifier Identifier, params *GetProjectParams, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// ModifyProject request with any body
	ModifyProjectWithBodyWithResponse(ctx context.Context, identifier Identifier, params *ModifyProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProjectResponse, error)

	ModifyProjectWithResponse(ctx context.Context, identifier Identifier, params *ModifyProjectParams, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProjectResponse, error)

	// GetProjectFlags request
	GetProjectFlagsWithResponse(ctx context.Context, identifier Identifier, params *GetProjectFlagsParams, reqEditors ...RequestEditorFn) (*GetProjectFlagsResponse, error)

	// DeleteGitRepo request
	DeleteGitRepoWithResponse(ctx context.Context, identifier Identifier, params *DeleteGitRepoParams, reqEditors ...RequestEditorFn) (*DeleteGitRepoResponse, error)

	// GetGitRepo request
	GetGitRepoWithResponse(ctx context.Context, identifier Identifier, params *GetGitRepoParams, reqEditors ...RequestEditorFn) (*GetGitRepoResponse, error)

	// PatchGitRepo request with any body
	PatchGitRepoWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGitRepoResponse, error)

	PatchGitRepoWithResponse(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, body PatchGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGitRepoResponse, error)

	// CreateGitRepo request with any body
	CreateGitRepoWithBodyWithResponse(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGitRepoResponse, error)

	CreateGitRepoWithResponse(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, body CreateGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGitRepoResponse, error)

	// CreateProxyKey request with any body
	CreateProxyKeyWithBodyWithResponse(ctx context.Context, params *CreateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProxyKeyResponse, error)

	CreateProxyKeyWithResponse(ctx context.Context, params *CreateProxyKeyParams, body CreateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProxyKeyResponse, error)

	// DeleteProxyKey request
	DeleteProxyKeyWithResponse(ctx context.Context, identifier Identifier, params *DeleteProxyKeyParams, reqEditors ...RequestEditorFn) (*DeleteProxyKeyResponse, error)

	// GetProxyKey request
	GetProxyKeyWithResponse(ctx context.Context, identifier Identifier, params *GetProxyKeyParams, reqEditors ...RequestEditorFn) (*GetProxyKeyResponse, error)

	// UpdateProxyKey request with any body
	UpdateProxyKeyWithBodyWithResponse(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProxyKeyResponse, error)

	UpdateProxyKeyWithResponse(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, body UpdateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProxyKeyResponse, error)

	// GetAllSegments request
	GetAllSegmentsWithResponse(ctx context.Context, params *GetAllSegmentsParams, reqEditors ...RequestEditorFn) (*GetAllSegmentsResponse, error)

	// CreateSegment request with any body
	CreateSegmentWithBodyWithResponse(ctx context.Context, params *CreateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error)

	CreateSegmentWithResponse(ctx context.Context, params *CreateSegmentParams, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error)

	// DeleteSegment request
	DeleteSegmentWithResponse(ctx context.Context, identifier Identifier, params *DeleteSegmentParams, reqEditors ...RequestEditorFn) (*DeleteSegmentResponse, error)

	// GetSegment request
	GetSegmentWithResponse(ctx context.Context, identifier Identifier, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error)

	// PatchSegment request with any body
	PatchSegmentWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSegmentResponse, error)

	PatchSegmentWithResponse(ctx context.Context, identifier Identifier, params *PatchSegmentParams, body PatchSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSegmentResponse, error)

	// GetAvailableFlagsForSegment request
	GetAvailableFlagsForSegmentWithResponse(ctx context.Context, identifier Identifier, params *GetAvailableFlagsForSegmentParams, reqEditors ...RequestEditorFn) (*GetAvailableFlagsForSegmentResponse, error)

	// GetSegmentFlags request
	GetSegmentFlagsWithResponse(ctx context.Context, identifier Identifier, params *GetSegmentFlagsParams, reqEditors ...RequestEditorFn) (*GetSegmentFlagsResponse, error)

	// GetAllTags request
	GetAllTagsWithResponse(ctx context.Context, params *GetAllTagsParams, reqEditors ...RequestEditorFn) (*GetAllTagsResponse, error)

	// CreateTag request with any body
	CreateTagWithBodyWithResponse(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// DeleteTag request
	DeleteTagWithResponse(ctx context.Context, identifier Identifier, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTag request
	GetTagWithResponse(ctx context.Context, identifier Identifier, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error)

	// GetAllTargets request
	GetAllTargetsWithResponse(ctx context.Context, params *GetAllTargetsParams, reqEditors ...RequestEditorFn) (*GetAllTargetsResponse, error)

	// CreateTarget request with any body
	CreateTargetWithBodyWithResponse(ctx context.Context, params *CreateTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTargetResponse, error)

	CreateTargetWithResponse(ctx context.Context, params *CreateTargetParams, body CreateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTargetResponse, error)

	// GetTargetsAndSegmentsInfo request
	GetTargetsAndSegmentsInfoWithResponse(ctx context.Context, params *GetTargetsAndSegmentsInfoParams, reqEditors ...RequestEditorFn) (*GetTargetsAndSegmentsInfoResponse, error)

	// GetTargetsAndSegments request
	GetTargetsAndSegmentsWithResponse(ctx context.Context, params *GetTargetsAndSegmentsParams, reqEditors ...RequestEditorFn) (*GetTargetsAndSegmentsResponse, error)

	// GetAllTargetAttributes request
	GetAllTargetAttributesWithResponse(ctx context.Context, params *GetAllTargetAttributesParams, reqEditors ...RequestEditorFn) (*GetAllTargetAttributesResponse, error)

	// UploadTargets request with any body
	UploadTargetsWithBodyWithResponse(ctx context.Context, params *UploadTargetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadTargetsResponse, error)

	// DeleteTarget request
	DeleteTargetWithResponse(ctx context.Context, identifier Identifier, params *DeleteTargetParams, reqEditors ...RequestEditorFn) (*DeleteTargetResponse, error)

	// GetTarget request
	GetTargetWithResponse(ctx context.Context, identifier Identifier, params *GetTargetParams, reqEditors ...RequestEditorFn) (*GetTargetResponse, error)

	// PatchTarget request with any body
	PatchTargetWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTargetResponse, error)

	PatchTargetWithResponse(ctx context.Context, identifier Identifier, params *PatchTargetParams, body PatchTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTargetResponse, error)

	// ModifyTarget request with any body
	ModifyTargetWithBodyWithResponse(ctx context.Context, identifier Identifier, params *ModifyTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyTargetResponse, error)

	ModifyTargetWithResponse(ctx context.Context, identifier Identifier, params *ModifyTargetParams, body ModifyTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyTargetResponse, error)

	// GetTargetAvailableSegments request
	GetTargetAvailableSegmentsWithResponse(ctx context.Context, identifier Identifier, params *GetTargetAvailableSegmentsParams, reqEditors ...RequestEditorFn) (*GetTargetAvailableSegmentsResponse, error)

	// GetTargetSegments request
	GetTargetSegmentsWithResponse(ctx context.Context, identifier Identifier, params *GetTargetSegmentsParams, reqEditors ...RequestEditorFn) (*GetTargetSegmentsResponse, error)
}

type CreateAIDAQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Aida
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateAIDAQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAIDAQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAPIKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeys
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllAPIKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAPIKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiKey
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AddAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuditByParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CorrelationId *string `json:"correlationId,omitempty"`

		// A list of Audit Trail events
		Data     *AuditTrails            `json:"data,omitempty"`
		MetaData *map[string]interface{} `json:"metaData,omitempty"`

		// Indicates if the request was successful or not
		Status *Status `json:"status,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetAuditByParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuditByParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CorrelationId string `json:"correlationId"`

		// A list of Environments
		Data     Environments            `json:"data"`
		MetaData *map[string]interface{} `json:"metaData,omitempty"`

		// Indicates if the request was successful or not
		Status Status `json:"status"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetAllEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CorrelationId *string `json:"correlationId,omitempty"`

		// Environment Response
		Data     *Environment            `json:"data,omitempty"`
		MetaData *map[string]interface{} `json:"metaData,omitempty"`

		// Indicates if the request was successful or not
		Status *Status `json:"status,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ModifyEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Features
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FeatureResponseMetadata
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FeatureResponseMetadata
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON424      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailableFeaturePipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureAvailablePipelines
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAvailableFeaturePipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailableFeaturePipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureMetrics
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeatureMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlagsYamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlagsYaml
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFlagsYamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlagsYamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFlagsYamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFlagsYamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFlagsYamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON424      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Feature
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureResponseMetadata
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON424      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDependentFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Features
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDependentFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDependentFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureEvaluationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureEvaluations
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeatureEvaluationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureEvaluationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeaturePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFeaturePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeaturePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeaturePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeaturePipelineResp
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeaturePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFeaturePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchFeaturePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFeaturePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFlagPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateFlagPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFlagPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON424      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RestoreFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJiraIssuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JiraSearchIssues
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetJiraIssuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJiraIssuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOSByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CorrelationId *string `json:"correlationId,omitempty"`

		// A list of Object Snapshots
		Data     *ObjectSnapshots        `json:"data,omitempty"`
		MetaData *map[string]interface{} `json:"metaData,omitempty"`

		// Indicates if the request was successful or not
		Status *Status `json:"status,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetOSByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOSByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSDKDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardingSDKs
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSDKDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSDKDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFlagOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserFlagOverview
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserFlagOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFlagOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CorrelationId *string `json:"correlationId,omitempty"`

		// A list of projects
		Data     *Projects               `json:"data,omitempty"`
		MetaData *map[string]interface{} `json:"metaData,omitempty"`

		// Indicates if the request was successful or not
		Status *Status `json:"status,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetAllProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CorrelationId *string `json:"correlationId,omitempty"`

		// A project response
		Data     *Project                `json:"data,omitempty"`
		MetaData *map[string]interface{} `json:"metaData,omitempty"`

		// Indicates if the request was successful or not
		Status *Status `json:"status,omitempty"`
	}
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ModifyProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectFlags
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGitRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteGitRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGitRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGitRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GitRepoResp
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetGitRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGitRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchGitRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GitRepoResp
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchGitRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchGitRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGitRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateGitRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGitRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProxyKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Key *string `json:"key,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON403 *Error
	JSON404 *Error
	JSON409 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateProxyKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProxyKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProxyKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON424      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteProxyKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProxyKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProxyKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProxyKey
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetProxyKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProxyKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProxyKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateProxyKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProxyKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Segments
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Segment
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Segment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailableFlagsForSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlagBasicInfos
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAvailableFlagsForSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailableFlagsForSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SegmentFlag
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSegmentFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tags
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponseMetadata
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON424      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Feature
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Targets
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsAndSegmentsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetsAndSegmentsInfo
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTargetsAndSegmentsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsAndSegmentsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetsAndSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetsAndSegments
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTargetsAndSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetsAndSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTargetAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllTargetAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTargetAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UploadTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Target
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ModifyTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetAvailableSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Segments
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTargetAvailableSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetAvailableSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTargetSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetDetail
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTargetSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTargetSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAIDAQueryWithBodyWithResponse request with arbitrary body returning *CreateAIDAQueryResponse
func (c *ClientWithResponses) CreateAIDAQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAIDAQueryResponse, error) {
	rsp, err := c.CreateAIDAQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAIDAQueryResponse(rsp)
}

func (c *ClientWithResponses) CreateAIDAQueryWithResponse(ctx context.Context, body CreateAIDAQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAIDAQueryResponse, error) {
	rsp, err := c.CreateAIDAQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAIDAQueryResponse(rsp)
}

// GetAllAPIKeysWithResponse request returning *GetAllAPIKeysResponse
func (c *ClientWithResponses) GetAllAPIKeysWithResponse(ctx context.Context, params *GetAllAPIKeysParams, reqEditors ...RequestEditorFn) (*GetAllAPIKeysResponse, error) {
	rsp, err := c.GetAllAPIKeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAPIKeysResponse(rsp)
}

// AddAPIKeyWithBodyWithResponse request with arbitrary body returning *AddAPIKeyResponse
func (c *ClientWithResponses) AddAPIKeyWithBodyWithResponse(ctx context.Context, params *AddAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAPIKeyResponse, error) {
	rsp, err := c.AddAPIKeyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAPIKeyResponse(rsp)
}

func (c *ClientWithResponses) AddAPIKeyWithResponse(ctx context.Context, params *AddAPIKeyParams, body AddAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAPIKeyResponse, error) {
	rsp, err := c.AddAPIKey(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAPIKeyResponse(rsp)
}

// DeleteAPIKeyWithResponse request returning *DeleteAPIKeyResponse
func (c *ClientWithResponses) DeleteAPIKeyWithResponse(ctx context.Context, identifier Identifier, params *DeleteAPIKeyParams, reqEditors ...RequestEditorFn) (*DeleteAPIKeyResponse, error) {
	rsp, err := c.DeleteAPIKey(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIKeyResponse(rsp)
}

// GetAPIKeyWithResponse request returning *GetAPIKeyResponse
func (c *ClientWithResponses) GetAPIKeyWithResponse(ctx context.Context, identifier Identifier, params *GetAPIKeyParams, reqEditors ...RequestEditorFn) (*GetAPIKeyResponse, error) {
	rsp, err := c.GetAPIKey(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIKeyResponse(rsp)
}

// UpdateAPIKeyWithBodyWithResponse request with arbitrary body returning *UpdateAPIKeyResponse
func (c *ClientWithResponses) UpdateAPIKeyWithBodyWithResponse(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAPIKeyResponse, error) {
	rsp, err := c.UpdateAPIKeyWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAPIKeyResponse(rsp)
}

func (c *ClientWithResponses) UpdateAPIKeyWithResponse(ctx context.Context, identifier Identifier, params *UpdateAPIKeyParams, body UpdateAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAPIKeyResponse, error) {
	rsp, err := c.UpdateAPIKey(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAPIKeyResponse(rsp)
}

// GetAuditByParamsWithResponse request returning *GetAuditByParamsResponse
func (c *ClientWithResponses) GetAuditByParamsWithResponse(ctx context.Context, params *GetAuditByParamsParams, reqEditors ...RequestEditorFn) (*GetAuditByParamsResponse, error) {
	rsp, err := c.GetAuditByParams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuditByParamsResponse(rsp)
}

// GetAllEnvironmentsWithResponse request returning *GetAllEnvironmentsResponse
func (c *ClientWithResponses) GetAllEnvironmentsWithResponse(ctx context.Context, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*GetAllEnvironmentsResponse, error) {
	rsp, err := c.GetAllEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, params *CreateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, params *CreateEnvironmentParams, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, identifier Identifier, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, identifier Identifier, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// ModifyEnvironmentWithBodyWithResponse request with arbitrary body returning *ModifyEnvironmentResponse
func (c *ClientWithResponses) ModifyEnvironmentWithBodyWithResponse(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEnvironmentResponse, error) {
	rsp, err := c.ModifyEnvironmentWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) ModifyEnvironmentWithResponse(ctx context.Context, identifier Identifier, params *ModifyEnvironmentParams, body ModifyEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEnvironmentResponse, error) {
	rsp, err := c.ModifyEnvironment(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEnvironmentResponse(rsp)
}

// GetAllFeaturesWithResponse request returning *GetAllFeaturesResponse
func (c *ClientWithResponses) GetAllFeaturesWithResponse(ctx context.Context, params *GetAllFeaturesParams, reqEditors ...RequestEditorFn) (*GetAllFeaturesResponse, error) {
	rsp, err := c.GetAllFeatures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllFeaturesResponse(rsp)
}

// PatchFeaturesWithBodyWithResponse request with arbitrary body returning *PatchFeaturesResponse
func (c *ClientWithResponses) PatchFeaturesWithBodyWithResponse(ctx context.Context, params *PatchFeaturesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeaturesResponse, error) {
	rsp, err := c.PatchFeaturesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeaturesResponse(rsp)
}

func (c *ClientWithResponses) PatchFeaturesWithResponse(ctx context.Context, params *PatchFeaturesParams, body PatchFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeaturesResponse, error) {
	rsp, err := c.PatchFeatures(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeaturesResponse(rsp)
}

// CreateFeatureFlagWithBodyWithResponse request with arbitrary body returning *CreateFeatureFlagResponse
func (c *ClientWithResponses) CreateFeatureFlagWithBodyWithResponse(ctx context.Context, params *CreateFeatureFlagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error) {
	rsp, err := c.CreateFeatureFlagWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureFlagResponse(rsp)
}

func (c *ClientWithResponses) CreateFeatureFlagWithResponse(ctx context.Context, params *CreateFeatureFlagParams, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error) {
	rsp, err := c.CreateFeatureFlag(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureFlagResponse(rsp)
}

// GetAvailableFeaturePipelinesWithResponse request returning *GetAvailableFeaturePipelinesResponse
func (c *ClientWithResponses) GetAvailableFeaturePipelinesWithResponse(ctx context.Context, params *GetAvailableFeaturePipelinesParams, reqEditors ...RequestEditorFn) (*GetAvailableFeaturePipelinesResponse, error) {
	rsp, err := c.GetAvailableFeaturePipelines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailableFeaturePipelinesResponse(rsp)
}

// GetFeatureMetricsWithResponse request returning *GetFeatureMetricsResponse
func (c *ClientWithResponses) GetFeatureMetricsWithResponse(ctx context.Context, params *GetFeatureMetricsParams, reqEditors ...RequestEditorFn) (*GetFeatureMetricsResponse, error) {
	rsp, err := c.GetFeatureMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureMetricsResponse(rsp)
}

// GetFlagsYamlWithResponse request returning *GetFlagsYamlResponse
func (c *ClientWithResponses) GetFlagsYamlWithResponse(ctx context.Context, params *GetFlagsYamlParams, reqEditors ...RequestEditorFn) (*GetFlagsYamlResponse, error) {
	rsp, err := c.GetFlagsYaml(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlagsYamlResponse(rsp)
}

// UpdateFlagsYamlWithBodyWithResponse request with arbitrary body returning *UpdateFlagsYamlResponse
func (c *ClientWithResponses) UpdateFlagsYamlWithBodyWithResponse(ctx context.Context, params *UpdateFlagsYamlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFlagsYamlResponse, error) {
	rsp, err := c.UpdateFlagsYamlWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFlagsYamlResponse(rsp)
}

func (c *ClientWithResponses) UpdateFlagsYamlWithResponse(ctx context.Context, params *UpdateFlagsYamlParams, body UpdateFlagsYamlJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFlagsYamlResponse, error) {
	rsp, err := c.UpdateFlagsYaml(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFlagsYamlResponse(rsp)
}

// DeleteFeatureFlagWithResponse request returning *DeleteFeatureFlagResponse
func (c *ClientWithResponses) DeleteFeatureFlagWithResponse(ctx context.Context, identifier Identifier, params *DeleteFeatureFlagParams, reqEditors ...RequestEditorFn) (*DeleteFeatureFlagResponse, error) {
	rsp, err := c.DeleteFeatureFlag(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureFlagResponse(rsp)
}

// GetFeatureFlagWithResponse request returning *GetFeatureFlagResponse
func (c *ClientWithResponses) GetFeatureFlagWithResponse(ctx context.Context, identifier Identifier, params *GetFeatureFlagParams, reqEditors ...RequestEditorFn) (*GetFeatureFlagResponse, error) {
	rsp, err := c.GetFeatureFlag(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureFlagResponse(rsp)
}

// PatchFeatureWithBodyWithResponse request with arbitrary body returning *PatchFeatureResponse
func (c *ClientWithResponses) PatchFeatureWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchFeatureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error) {
	rsp, err := c.PatchFeatureWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureResponse(rsp)
}

func (c *ClientWithResponses) PatchFeatureWithResponse(ctx context.Context, identifier Identifier, params *PatchFeatureParams, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error) {
	rsp, err := c.PatchFeature(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureResponse(rsp)
}

// GetDependentFeaturesWithResponse request returning *GetDependentFeaturesResponse
func (c *ClientWithResponses) GetDependentFeaturesWithResponse(ctx context.Context, identifier Identifier, params *GetDependentFeaturesParams, reqEditors ...RequestEditorFn) (*GetDependentFeaturesResponse, error) {
	rsp, err := c.GetDependentFeatures(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDependentFeaturesResponse(rsp)
}

// GetFeatureEvaluationsWithResponse request returning *GetFeatureEvaluationsResponse
func (c *ClientWithResponses) GetFeatureEvaluationsWithResponse(ctx context.Context, identifier Identifier, params *GetFeatureEvaluationsParams, reqEditors ...RequestEditorFn) (*GetFeatureEvaluationsResponse, error) {
	rsp, err := c.GetFeatureEvaluations(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureEvaluationsResponse(rsp)
}

// DeleteFeaturePipelineWithResponse request returning *DeleteFeaturePipelineResponse
func (c *ClientWithResponses) DeleteFeaturePipelineWithResponse(ctx context.Context, identifier Identifier, params *DeleteFeaturePipelineParams, reqEditors ...RequestEditorFn) (*DeleteFeaturePipelineResponse, error) {
	rsp, err := c.DeleteFeaturePipeline(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeaturePipelineResponse(rsp)
}

// GetFeaturePipelineWithResponse request returning *GetFeaturePipelineResponse
func (c *ClientWithResponses) GetFeaturePipelineWithResponse(ctx context.Context, identifier Identifier, params *GetFeaturePipelineParams, reqEditors ...RequestEditorFn) (*GetFeaturePipelineResponse, error) {
	rsp, err := c.GetFeaturePipeline(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturePipelineResponse(rsp)
}

// PatchFeaturePipelineWithBodyWithResponse request with arbitrary body returning *PatchFeaturePipelineResponse
func (c *ClientWithResponses) PatchFeaturePipelineWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeaturePipelineResponse, error) {
	rsp, err := c.PatchFeaturePipelineWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeaturePipelineResponse(rsp)
}

func (c *ClientWithResponses) PatchFeaturePipelineWithResponse(ctx context.Context, identifier Identifier, params *PatchFeaturePipelineParams, body PatchFeaturePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeaturePipelineResponse, error) {
	rsp, err := c.PatchFeaturePipeline(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeaturePipelineResponse(rsp)
}

// CreateFlagPipelineWithBodyWithResponse request with arbitrary body returning *CreateFlagPipelineResponse
func (c *ClientWithResponses) CreateFlagPipelineWithBodyWithResponse(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFlagPipelineResponse, error) {
	rsp, err := c.CreateFlagPipelineWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFlagPipelineResponse(rsp)
}

func (c *ClientWithResponses) CreateFlagPipelineWithResponse(ctx context.Context, identifier Identifier, params *CreateFlagPipelineParams, body CreateFlagPipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFlagPipelineResponse, error) {
	rsp, err := c.CreateFlagPipeline(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFlagPipelineResponse(rsp)
}

// RestoreFeatureFlagWithResponse request returning *RestoreFeatureFlagResponse
func (c *ClientWithResponses) RestoreFeatureFlagWithResponse(ctx context.Context, identifier Identifier, params *RestoreFeatureFlagParams, reqEditors ...RequestEditorFn) (*RestoreFeatureFlagResponse, error) {
	rsp, err := c.RestoreFeatureFlag(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreFeatureFlagResponse(rsp)
}

// GetJiraIssuesWithResponse request returning *GetJiraIssuesResponse
func (c *ClientWithResponses) GetJiraIssuesWithResponse(ctx context.Context, params *GetJiraIssuesParams, reqEditors ...RequestEditorFn) (*GetJiraIssuesResponse, error) {
	rsp, err := c.GetJiraIssues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJiraIssuesResponse(rsp)
}

// GetOSByIDWithResponse request returning *GetOSByIDResponse
func (c *ClientWithResponses) GetOSByIDWithResponse(ctx context.Context, identifiers Identifiers, reqEditors ...RequestEditorFn) (*GetOSByIDResponse, error) {
	rsp, err := c.GetOSByID(ctx, identifiers, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOSByIDResponse(rsp)
}

// GetSDKDetailsWithResponse request returning *GetSDKDetailsResponse
func (c *ClientWithResponses) GetSDKDetailsWithResponse(ctx context.Context, params *GetSDKDetailsParams, reqEditors ...RequestEditorFn) (*GetSDKDetailsResponse, error) {
	rsp, err := c.GetSDKDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDKDetailsResponse(rsp)
}

// GetUserFlagOverviewWithResponse request returning *GetUserFlagOverviewResponse
func (c *ClientWithResponses) GetUserFlagOverviewWithResponse(ctx context.Context, params *GetUserFlagOverviewParams, reqEditors ...RequestEditorFn) (*GetUserFlagOverviewResponse, error) {
	rsp, err := c.GetUserFlagOverview(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFlagOverviewResponse(rsp)
}

// GetAllProjectsWithResponse request returning *GetAllProjectsResponse
func (c *ClientWithResponses) GetAllProjectsWithResponse(ctx context.Context, params *GetAllProjectsParams, reqEditors ...RequestEditorFn) (*GetAllProjectsResponse, error) {
	rsp, err := c.GetAllProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, params *CreateProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, params *CreateProjectParams, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, identifier Identifier, params *DeleteProjectParams, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, identifier Identifier, params *GetProjectParams, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// ModifyProjectWithBodyWithResponse request with arbitrary body returning *ModifyProjectResponse
func (c *ClientWithResponses) ModifyProjectWithBodyWithResponse(ctx context.Context, identifier Identifier, params *ModifyProjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProjectResponse, error) {
	rsp, err := c.ModifyProjectWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProjectResponse(rsp)
}

func (c *ClientWithResponses) ModifyProjectWithResponse(ctx context.Context, identifier Identifier, params *ModifyProjectParams, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProjectResponse, error) {
	rsp, err := c.ModifyProject(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProjectResponse(rsp)
}

// GetProjectFlagsWithResponse request returning *GetProjectFlagsResponse
func (c *ClientWithResponses) GetProjectFlagsWithResponse(ctx context.Context, identifier Identifier, params *GetProjectFlagsParams, reqEditors ...RequestEditorFn) (*GetProjectFlagsResponse, error) {
	rsp, err := c.GetProjectFlags(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectFlagsResponse(rsp)
}

// DeleteGitRepoWithResponse request returning *DeleteGitRepoResponse
func (c *ClientWithResponses) DeleteGitRepoWithResponse(ctx context.Context, identifier Identifier, params *DeleteGitRepoParams, reqEditors ...RequestEditorFn) (*DeleteGitRepoResponse, error) {
	rsp, err := c.DeleteGitRepo(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGitRepoResponse(rsp)
}

// GetGitRepoWithResponse request returning *GetGitRepoResponse
func (c *ClientWithResponses) GetGitRepoWithResponse(ctx context.Context, identifier Identifier, params *GetGitRepoParams, reqEditors ...RequestEditorFn) (*GetGitRepoResponse, error) {
	rsp, err := c.GetGitRepo(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGitRepoResponse(rsp)
}

// PatchGitRepoWithBodyWithResponse request with arbitrary body returning *PatchGitRepoResponse
func (c *ClientWithResponses) PatchGitRepoWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGitRepoResponse, error) {
	rsp, err := c.PatchGitRepoWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGitRepoResponse(rsp)
}

func (c *ClientWithResponses) PatchGitRepoWithResponse(ctx context.Context, identifier Identifier, params *PatchGitRepoParams, body PatchGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGitRepoResponse, error) {
	rsp, err := c.PatchGitRepo(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGitRepoResponse(rsp)
}

// CreateGitRepoWithBodyWithResponse request with arbitrary body returning *CreateGitRepoResponse
func (c *ClientWithResponses) CreateGitRepoWithBodyWithResponse(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGitRepoResponse, error) {
	rsp, err := c.CreateGitRepoWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGitRepoResponse(rsp)
}

func (c *ClientWithResponses) CreateGitRepoWithResponse(ctx context.Context, identifier Identifier, params *CreateGitRepoParams, body CreateGitRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGitRepoResponse, error) {
	rsp, err := c.CreateGitRepo(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGitRepoResponse(rsp)
}

// CreateProxyKeyWithBodyWithResponse request with arbitrary body returning *CreateProxyKeyResponse
func (c *ClientWithResponses) CreateProxyKeyWithBodyWithResponse(ctx context.Context, params *CreateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProxyKeyResponse, error) {
	rsp, err := c.CreateProxyKeyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProxyKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateProxyKeyWithResponse(ctx context.Context, params *CreateProxyKeyParams, body CreateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProxyKeyResponse, error) {
	rsp, err := c.CreateProxyKey(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProxyKeyResponse(rsp)
}

// DeleteProxyKeyWithResponse request returning *DeleteProxyKeyResponse
func (c *ClientWithResponses) DeleteProxyKeyWithResponse(ctx context.Context, identifier Identifier, params *DeleteProxyKeyParams, reqEditors ...RequestEditorFn) (*DeleteProxyKeyResponse, error) {
	rsp, err := c.DeleteProxyKey(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProxyKeyResponse(rsp)
}

// GetProxyKeyWithResponse request returning *GetProxyKeyResponse
func (c *ClientWithResponses) GetProxyKeyWithResponse(ctx context.Context, identifier Identifier, params *GetProxyKeyParams, reqEditors ...RequestEditorFn) (*GetProxyKeyResponse, error) {
	rsp, err := c.GetProxyKey(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProxyKeyResponse(rsp)
}

// UpdateProxyKeyWithBodyWithResponse request with arbitrary body returning *UpdateProxyKeyResponse
func (c *ClientWithResponses) UpdateProxyKeyWithBodyWithResponse(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProxyKeyResponse, error) {
	rsp, err := c.UpdateProxyKeyWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProxyKeyResponse(rsp)
}

func (c *ClientWithResponses) UpdateProxyKeyWithResponse(ctx context.Context, identifier Identifier, params *UpdateProxyKeyParams, body UpdateProxyKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProxyKeyResponse, error) {
	rsp, err := c.UpdateProxyKey(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProxyKeyResponse(rsp)
}

// GetAllSegmentsWithResponse request returning *GetAllSegmentsResponse
func (c *ClientWithResponses) GetAllSegmentsWithResponse(ctx context.Context, params *GetAllSegmentsParams, reqEditors ...RequestEditorFn) (*GetAllSegmentsResponse, error) {
	rsp, err := c.GetAllSegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSegmentsResponse(rsp)
}

// CreateSegmentWithBodyWithResponse request with arbitrary body returning *CreateSegmentResponse
func (c *ClientWithResponses) CreateSegmentWithBodyWithResponse(ctx context.Context, params *CreateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error) {
	rsp, err := c.CreateSegmentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmentResponse(rsp)
}

func (c *ClientWithResponses) CreateSegmentWithResponse(ctx context.Context, params *CreateSegmentParams, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error) {
	rsp, err := c.CreateSegment(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmentResponse(rsp)
}

// DeleteSegmentWithResponse request returning *DeleteSegmentResponse
func (c *ClientWithResponses) DeleteSegmentWithResponse(ctx context.Context, identifier Identifier, params *DeleteSegmentParams, reqEditors ...RequestEditorFn) (*DeleteSegmentResponse, error) {
	rsp, err := c.DeleteSegment(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSegmentResponse(rsp)
}

// GetSegmentWithResponse request returning *GetSegmentResponse
func (c *ClientWithResponses) GetSegmentWithResponse(ctx context.Context, identifier Identifier, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error) {
	rsp, err := c.GetSegment(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentResponse(rsp)
}

// PatchSegmentWithBodyWithResponse request with arbitrary body returning *PatchSegmentResponse
func (c *ClientWithResponses) PatchSegmentWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSegmentResponse, error) {
	rsp, err := c.PatchSegmentWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSegmentResponse(rsp)
}

func (c *ClientWithResponses) PatchSegmentWithResponse(ctx context.Context, identifier Identifier, params *PatchSegmentParams, body PatchSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSegmentResponse, error) {
	rsp, err := c.PatchSegment(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSegmentResponse(rsp)
}

// GetAvailableFlagsForSegmentWithResponse request returning *GetAvailableFlagsForSegmentResponse
func (c *ClientWithResponses) GetAvailableFlagsForSegmentWithResponse(ctx context.Context, identifier Identifier, params *GetAvailableFlagsForSegmentParams, reqEditors ...RequestEditorFn) (*GetAvailableFlagsForSegmentResponse, error) {
	rsp, err := c.GetAvailableFlagsForSegment(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailableFlagsForSegmentResponse(rsp)
}

// GetSegmentFlagsWithResponse request returning *GetSegmentFlagsResponse
func (c *ClientWithResponses) GetSegmentFlagsWithResponse(ctx context.Context, identifier Identifier, params *GetSegmentFlagsParams, reqEditors ...RequestEditorFn) (*GetSegmentFlagsResponse, error) {
	rsp, err := c.GetSegmentFlags(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentFlagsResponse(rsp)
}

// GetAllTagsWithResponse request returning *GetAllTagsResponse
func (c *ClientWithResponses) GetAllTagsWithResponse(ctx context.Context, params *GetAllTagsParams, reqEditors ...RequestEditorFn) (*GetAllTagsResponse, error) {
	rsp, err := c.GetAllTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, identifier Identifier, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagWithResponse request returning *GetTagResponse
func (c *ClientWithResponses) GetTagWithResponse(ctx context.Context, identifier Identifier, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error) {
	rsp, err := c.GetTag(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagResponse(rsp)
}

// GetAllTargetsWithResponse request returning *GetAllTargetsResponse
func (c *ClientWithResponses) GetAllTargetsWithResponse(ctx context.Context, params *GetAllTargetsParams, reqEditors ...RequestEditorFn) (*GetAllTargetsResponse, error) {
	rsp, err := c.GetAllTargets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTargetsResponse(rsp)
}

// CreateTargetWithBodyWithResponse request with arbitrary body returning *CreateTargetResponse
func (c *ClientWithResponses) CreateTargetWithBodyWithResponse(ctx context.Context, params *CreateTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTargetResponse, error) {
	rsp, err := c.CreateTargetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTargetResponse(rsp)
}

func (c *ClientWithResponses) CreateTargetWithResponse(ctx context.Context, params *CreateTargetParams, body CreateTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTargetResponse, error) {
	rsp, err := c.CreateTarget(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTargetResponse(rsp)
}

// GetTargetsAndSegmentsInfoWithResponse request returning *GetTargetsAndSegmentsInfoResponse
func (c *ClientWithResponses) GetTargetsAndSegmentsInfoWithResponse(ctx context.Context, params *GetTargetsAndSegmentsInfoParams, reqEditors ...RequestEditorFn) (*GetTargetsAndSegmentsInfoResponse, error) {
	rsp, err := c.GetTargetsAndSegmentsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsAndSegmentsInfoResponse(rsp)
}

// GetTargetsAndSegmentsWithResponse request returning *GetTargetsAndSegmentsResponse
func (c *ClientWithResponses) GetTargetsAndSegmentsWithResponse(ctx context.Context, params *GetTargetsAndSegmentsParams, reqEditors ...RequestEditorFn) (*GetTargetsAndSegmentsResponse, error) {
	rsp, err := c.GetTargetsAndSegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetsAndSegmentsResponse(rsp)
}

// GetAllTargetAttributesWithResponse request returning *GetAllTargetAttributesResponse
func (c *ClientWithResponses) GetAllTargetAttributesWithResponse(ctx context.Context, params *GetAllTargetAttributesParams, reqEditors ...RequestEditorFn) (*GetAllTargetAttributesResponse, error) {
	rsp, err := c.GetAllTargetAttributes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTargetAttributesResponse(rsp)
}

// UploadTargetsWithBodyWithResponse request with arbitrary body returning *UploadTargetsResponse
func (c *ClientWithResponses) UploadTargetsWithBodyWithResponse(ctx context.Context, params *UploadTargetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadTargetsResponse, error) {
	rsp, err := c.UploadTargetsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadTargetsResponse(rsp)
}

// DeleteTargetWithResponse request returning *DeleteTargetResponse
func (c *ClientWithResponses) DeleteTargetWithResponse(ctx context.Context, identifier Identifier, params *DeleteTargetParams, reqEditors ...RequestEditorFn) (*DeleteTargetResponse, error) {
	rsp, err := c.DeleteTarget(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTargetResponse(rsp)
}

// GetTargetWithResponse request returning *GetTargetResponse
func (c *ClientWithResponses) GetTargetWithResponse(ctx context.Context, identifier Identifier, params *GetTargetParams, reqEditors ...RequestEditorFn) (*GetTargetResponse, error) {
	rsp, err := c.GetTarget(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetResponse(rsp)
}

// PatchTargetWithBodyWithResponse request with arbitrary body returning *PatchTargetResponse
func (c *ClientWithResponses) PatchTargetWithBodyWithResponse(ctx context.Context, identifier Identifier, params *PatchTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTargetResponse, error) {
	rsp, err := c.PatchTargetWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTargetResponse(rsp)
}

func (c *ClientWithResponses) PatchTargetWithResponse(ctx context.Context, identifier Identifier, params *PatchTargetParams, body PatchTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTargetResponse, error) {
	rsp, err := c.PatchTarget(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTargetResponse(rsp)
}

// ModifyTargetWithBodyWithResponse request with arbitrary body returning *ModifyTargetResponse
func (c *ClientWithResponses) ModifyTargetWithBodyWithResponse(ctx context.Context, identifier Identifier, params *ModifyTargetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyTargetResponse, error) {
	rsp, err := c.ModifyTargetWithBody(ctx, identifier, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyTargetResponse(rsp)
}

func (c *ClientWithResponses) ModifyTargetWithResponse(ctx context.Context, identifier Identifier, params *ModifyTargetParams, body ModifyTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyTargetResponse, error) {
	rsp, err := c.ModifyTarget(ctx, identifier, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyTargetResponse(rsp)
}

// GetTargetAvailableSegmentsWithResponse request returning *GetTargetAvailableSegmentsResponse
func (c *ClientWithResponses) GetTargetAvailableSegmentsWithResponse(ctx context.Context, identifier Identifier, params *GetTargetAvailableSegmentsParams, reqEditors ...RequestEditorFn) (*GetTargetAvailableSegmentsResponse, error) {
	rsp, err := c.GetTargetAvailableSegments(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetAvailableSegmentsResponse(rsp)
}

// GetTargetSegmentsWithResponse request returning *GetTargetSegmentsResponse
func (c *ClientWithResponses) GetTargetSegmentsWithResponse(ctx context.Context, identifier Identifier, params *GetTargetSegmentsParams, reqEditors ...RequestEditorFn) (*GetTargetSegmentsResponse, error) {
	rsp, err := c.GetTargetSegments(ctx, identifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTargetSegmentsResponse(rsp)
}

// ParseCreateAIDAQueryResponse parses an HTTP response from a CreateAIDAQueryWithResponse call
func ParseCreateAIDAQueryResponse(rsp *http.Response) (*CreateAIDAQueryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAIDAQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Aida
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllAPIKeysResponse parses an HTTP response from a GetAllAPIKeysWithResponse call
func ParseGetAllAPIKeysResponse(rsp *http.Response) (*GetAllAPIKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAPIKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddAPIKeyResponse parses an HTTP response from a AddAPIKeyWithResponse call
func ParseAddAPIKeyResponse(rsp *http.Response) (*AddAPIKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAPIKeyResponse parses an HTTP response from a DeleteAPIKeyWithResponse call
func ParseDeleteAPIKeyResponse(rsp *http.Response) (*DeleteAPIKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAPIKeyResponse parses an HTTP response from a GetAPIKeyWithResponse call
func ParseGetAPIKeyResponse(rsp *http.Response) (*GetAPIKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAPIKeyResponse parses an HTTP response from a UpdateAPIKeyWithResponse call
func ParseUpdateAPIKeyResponse(rsp *http.Response) (*UpdateAPIKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuditByParamsResponse parses an HTTP response from a GetAuditByParamsWithResponse call
func ParseGetAuditByParamsResponse(rsp *http.Response) (*GetAuditByParamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuditByParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CorrelationId *string `json:"correlationId,omitempty"`

			// A list of Audit Trail events
			Data     *AuditTrails            `json:"data,omitempty"`
			MetaData *map[string]interface{} `json:"metaData,omitempty"`

			// Indicates if the request was successful or not
			Status *Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllEnvironmentsResponse parses an HTTP response from a GetAllEnvironmentsWithResponse call
func ParseGetAllEnvironmentsResponse(rsp *http.Response) (*GetAllEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CorrelationId string `json:"correlationId"`

			// A list of Environments
			Data     Environments            `json:"data"`
			MetaData *map[string]interface{} `json:"metaData,omitempty"`

			// Indicates if the request was successful or not
			Status Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CorrelationId *string `json:"correlationId,omitempty"`

			// Environment Response
			Data     *Environment            `json:"data,omitempty"`
			MetaData *map[string]interface{} `json:"metaData,omitempty"`

			// Indicates if the request was successful or not
			Status *Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseModifyEnvironmentResponse parses an HTTP response from a ModifyEnvironmentWithResponse call
func ParseModifyEnvironmentResponse(rsp *http.Response) (*ModifyEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllFeaturesResponse parses an HTTP response from a GetAllFeaturesWithResponse call
func ParseGetAllFeaturesResponse(rsp *http.Response) (*GetAllFeaturesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Features
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchFeaturesResponse parses an HTTP response from a PatchFeaturesWithResponse call
func ParsePatchFeaturesResponse(rsp *http.Response) (*PatchFeaturesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FeatureResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateFeatureFlagResponse parses an HTTP response from a CreateFeatureFlagWithResponse call
func ParseCreateFeatureFlagResponse(rsp *http.Response) (*CreateFeatureFlagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FeatureResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAvailableFeaturePipelinesResponse parses an HTTP response from a GetAvailableFeaturePipelinesWithResponse call
func ParseGetAvailableFeaturePipelinesResponse(rsp *http.Response) (*GetAvailableFeaturePipelinesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailableFeaturePipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureAvailablePipelines
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeatureMetricsResponse parses an HTTP response from a GetFeatureMetricsWithResponse call
func ParseGetFeatureMetricsResponse(rsp *http.Response) (*GetFeatureMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFlagsYamlResponse parses an HTTP response from a GetFlagsYamlWithResponse call
func ParseGetFlagsYamlResponse(rsp *http.Response) (*GetFlagsYamlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlagsYamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlagsYaml
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFlagsYamlResponse parses an HTTP response from a UpdateFlagsYamlWithResponse call
func ParseUpdateFlagsYamlResponse(rsp *http.Response) (*UpdateFlagsYamlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFlagsYamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFeatureFlagResponse parses an HTTP response from a DeleteFeatureFlagWithResponse call
func ParseDeleteFeatureFlagResponse(rsp *http.Response) (*DeleteFeatureFlagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeatureFlagResponse parses an HTTP response from a GetFeatureFlagWithResponse call
func ParseGetFeatureFlagResponse(rsp *http.Response) (*GetFeatureFlagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Feature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchFeatureResponse parses an HTTP response from a PatchFeatureWithResponse call
func ParsePatchFeatureResponse(rsp *http.Response) (*PatchFeatureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDependentFeaturesResponse parses an HTTP response from a GetDependentFeaturesWithResponse call
func ParseGetDependentFeaturesResponse(rsp *http.Response) (*GetDependentFeaturesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDependentFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Features
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeatureEvaluationsResponse parses an HTTP response from a GetFeatureEvaluationsWithResponse call
func ParseGetFeatureEvaluationsResponse(rsp *http.Response) (*GetFeatureEvaluationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureEvaluationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureEvaluations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFeaturePipelineResponse parses an HTTP response from a DeleteFeaturePipelineWithResponse call
func ParseDeleteFeaturePipelineResponse(rsp *http.Response) (*DeleteFeaturePipelineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeaturePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeaturePipelineResponse parses an HTTP response from a GetFeaturePipelineWithResponse call
func ParseGetFeaturePipelineResponse(rsp *http.Response) (*GetFeaturePipelineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeaturePipelineResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchFeaturePipelineResponse parses an HTTP response from a PatchFeaturePipelineWithResponse call
func ParsePatchFeaturePipelineResponse(rsp *http.Response) (*PatchFeaturePipelineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFeaturePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateFlagPipelineResponse parses an HTTP response from a CreateFlagPipelineWithResponse call
func ParseCreateFlagPipelineResponse(rsp *http.Response) (*CreateFlagPipelineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFlagPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRestoreFeatureFlagResponse parses an HTTP response from a RestoreFeatureFlagWithResponse call
func ParseRestoreFeatureFlagResponse(rsp *http.Response) (*RestoreFeatureFlagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJiraIssuesResponse parses an HTTP response from a GetJiraIssuesWithResponse call
func ParseGetJiraIssuesResponse(rsp *http.Response) (*GetJiraIssuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJiraIssuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JiraSearchIssues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOSByIDResponse parses an HTTP response from a GetOSByIDWithResponse call
func ParseGetOSByIDResponse(rsp *http.Response) (*GetOSByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOSByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CorrelationId *string `json:"correlationId,omitempty"`

			// A list of Object Snapshots
			Data     *ObjectSnapshots        `json:"data,omitempty"`
			MetaData *map[string]interface{} `json:"metaData,omitempty"`

			// Indicates if the request was successful or not
			Status *Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSDKDetailsResponse parses an HTTP response from a GetSDKDetailsWithResponse call
func ParseGetSDKDetailsResponse(rsp *http.Response) (*GetSDKDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSDKDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardingSDKs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserFlagOverviewResponse parses an HTTP response from a GetUserFlagOverviewWithResponse call
func ParseGetUserFlagOverviewResponse(rsp *http.Response) (*GetUserFlagOverviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFlagOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserFlagOverview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllProjectsResponse parses an HTTP response from a GetAllProjectsWithResponse call
func ParseGetAllProjectsResponse(rsp *http.Response) (*GetAllProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CorrelationId *string `json:"correlationId,omitempty"`

			// A list of projects
			Data     *Projects               `json:"data,omitempty"`
			MetaData *map[string]interface{} `json:"metaData,omitempty"`

			// Indicates if the request was successful or not
			Status *Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CorrelationId *string `json:"correlationId,omitempty"`

			// A project response
			Data     *Project                `json:"data,omitempty"`
			MetaData *map[string]interface{} `json:"metaData,omitempty"`

			// Indicates if the request was successful or not
			Status *Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseModifyProjectResponse parses an HTTP response from a ModifyProjectWithResponse call
func ParseModifyProjectResponse(rsp *http.Response) (*ModifyProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectFlagsResponse parses an HTTP response from a GetProjectFlagsWithResponse call
func ParseGetProjectFlagsResponse(rsp *http.Response) (*GetProjectFlagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectFlags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGitRepoResponse parses an HTTP response from a DeleteGitRepoWithResponse call
func ParseDeleteGitRepoResponse(rsp *http.Response) (*DeleteGitRepoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGitRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGitRepoResponse parses an HTTP response from a GetGitRepoWithResponse call
func ParseGetGitRepoResponse(rsp *http.Response) (*GetGitRepoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGitRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GitRepoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchGitRepoResponse parses an HTTP response from a PatchGitRepoWithResponse call
func ParsePatchGitRepoResponse(rsp *http.Response) (*PatchGitRepoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchGitRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GitRepoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateGitRepoResponse parses an HTTP response from a CreateGitRepoWithResponse call
func ParseCreateGitRepoResponse(rsp *http.Response) (*CreateGitRepoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGitRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProxyKeyResponse parses an HTTP response from a CreateProxyKeyWithResponse call
func ParseCreateProxyKeyResponse(rsp *http.Response) (*CreateProxyKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProxyKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Key *string `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProxyKeyResponse parses an HTTP response from a DeleteProxyKeyWithResponse call
func ParseDeleteProxyKeyResponse(rsp *http.Response) (*DeleteProxyKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProxyKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProxyKeyResponse parses an HTTP response from a GetProxyKeyWithResponse call
func ParseGetProxyKeyResponse(rsp *http.Response) (*GetProxyKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProxyKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProxyKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateProxyKeyResponse parses an HTTP response from a UpdateProxyKeyWithResponse call
func ParseUpdateProxyKeyResponse(rsp *http.Response) (*UpdateProxyKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProxyKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllSegmentsResponse parses an HTTP response from a GetAllSegmentsWithResponse call
func ParseGetAllSegmentsResponse(rsp *http.Response) (*GetAllSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Segments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSegmentResponse parses an HTTP response from a CreateSegmentWithResponse call
func ParseCreateSegmentResponse(rsp *http.Response) (*CreateSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSegmentResponse parses an HTTP response from a DeleteSegmentWithResponse call
func ParseDeleteSegmentResponse(rsp *http.Response) (*DeleteSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSegmentResponse parses an HTTP response from a GetSegmentWithResponse call
func ParseGetSegmentResponse(rsp *http.Response) (*GetSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Segment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchSegmentResponse parses an HTTP response from a PatchSegmentWithResponse call
func ParsePatchSegmentResponse(rsp *http.Response) (*PatchSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Segment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAvailableFlagsForSegmentResponse parses an HTTP response from a GetAvailableFlagsForSegmentWithResponse call
func ParseGetAvailableFlagsForSegmentResponse(rsp *http.Response) (*GetAvailableFlagsForSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailableFlagsForSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlagBasicInfos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSegmentFlagsResponse parses an HTTP response from a GetSegmentFlagsWithResponse call
func ParseGetSegmentFlagsResponse(rsp *http.Response) (*GetSegmentFlagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SegmentFlag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllTagsResponse parses an HTTP response from a GetAllTagsWithResponse call
func ParseGetAllTagsResponse(rsp *http.Response) (*GetAllTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 424:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON424 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagResponse parses an HTTP response from a GetTagWithResponse call
func ParseGetTagResponse(rsp *http.Response) (*GetTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Feature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllTargetsResponse parses an HTTP response from a GetAllTargetsWithResponse call
func ParseGetAllTargetsResponse(rsp *http.Response) (*GetAllTargetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Targets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTargetResponse parses an HTTP response from a CreateTargetWithResponse call
func ParseCreateTargetResponse(rsp *http.Response) (*CreateTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetsAndSegmentsInfoResponse parses an HTTP response from a GetTargetsAndSegmentsInfoWithResponse call
func ParseGetTargetsAndSegmentsInfoResponse(rsp *http.Response) (*GetTargetsAndSegmentsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsAndSegmentsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetsAndSegmentsInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetsAndSegmentsResponse parses an HTTP response from a GetTargetsAndSegmentsWithResponse call
func ParseGetTargetsAndSegmentsResponse(rsp *http.Response) (*GetTargetsAndSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetsAndSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetsAndSegments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllTargetAttributesResponse parses an HTTP response from a GetAllTargetAttributesWithResponse call
func ParseGetAllTargetAttributesResponse(rsp *http.Response) (*GetAllTargetAttributesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTargetAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadTargetsResponse parses an HTTP response from a UploadTargetsWithResponse call
func ParseUploadTargetsResponse(rsp *http.Response) (*UploadTargetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTargetResponse parses an HTTP response from a DeleteTargetWithResponse call
func ParseDeleteTargetResponse(rsp *http.Response) (*DeleteTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetResponse parses an HTTP response from a GetTargetWithResponse call
func ParseGetTargetResponse(rsp *http.Response) (*GetTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchTargetResponse parses an HTTP response from a PatchTargetWithResponse call
func ParsePatchTargetResponse(rsp *http.Response) (*PatchTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseModifyTargetResponse parses an HTTP response from a ModifyTargetWithResponse call
func ParseModifyTargetResponse(rsp *http.Response) (*ModifyTargetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Target
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetAvailableSegmentsResponse parses an HTTP response from a GetTargetAvailableSegmentsWithResponse call
func ParseGetTargetAvailableSegmentsResponse(rsp *http.Response) (*GetTargetAvailableSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetAvailableSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Segments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTargetSegmentsResponse parses an HTTP response from a GetTargetSegmentsWithResponse call
func ParseGetTargetSegmentsResponse(rsp *http.Response) (*GetTargetSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTargetSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Makes an AIDA Request
	// (POST /admin/aida)
	CreateAIDAQuery(ctx echo.Context) error
	// Returns API Keys for an Environment
	// (GET /admin/apikey)
	GetAllAPIKeys(ctx echo.Context, params GetAllAPIKeysParams) error
	// Creates an API key for the given Environment
	// (POST /admin/apikey)
	AddAPIKey(ctx echo.Context, params AddAPIKeyParams) error
	// Deletes an API Key
	// (DELETE /admin/apikey/{identifier})
	DeleteAPIKey(ctx echo.Context, identifier Identifier, params DeleteAPIKeyParams) error
	// Returns API keys
	// (GET /admin/apikey/{identifier})
	GetAPIKey(ctx echo.Context, identifier Identifier, params GetAPIKeyParams) error
	// Updates an API Key
	// (PUT /admin/apikey/{identifier})
	UpdateAPIKey(ctx echo.Context, identifier Identifier, params UpdateAPIKeyParams) error
	// Returns audit details
	// (GET /admin/audit)
	GetAuditByParams(ctx echo.Context, params GetAuditByParamsParams) error
	// Returns Environment details
	// (GET /admin/environments)
	GetAllEnvironments(ctx echo.Context, params GetAllEnvironmentsParams) error
	// Create an Environment.
	// (POST /admin/environments)
	CreateEnvironment(ctx echo.Context, params CreateEnvironmentParams) error
	// Delete an Environment
	// (DELETE /admin/environments/{identifier})
	DeleteEnvironment(ctx echo.Context, identifier Identifier, params DeleteEnvironmentParams) error
	// Returns Environment details for the given identifier
	// (GET /admin/environments/{identifier})
	GetEnvironment(ctx echo.Context, identifier Identifier, params GetEnvironmentParams) error
	// Updates an Environment
	// (PUT /admin/environments/{identifier})
	ModifyEnvironment(ctx echo.Context, identifier Identifier, params ModifyEnvironmentParams) error
	// Returns all Feature Flags for the project
	// (GET /admin/features)
	GetAllFeatures(ctx echo.Context, params GetAllFeaturesParams) error
	// Updates Feature Flags for the project
	// (PATCH /admin/features)
	PatchFeatures(ctx echo.Context, params PatchFeaturesParams) error
	// Creates a Feature Flag
	// (POST /admin/features)
	CreateFeatureFlag(ctx echo.Context, params CreateFeatureFlagParams) error
	// Retrieve available Pipelines for feature updates
	// (GET /admin/features/available_pipelines)
	GetAvailableFeaturePipelines(ctx echo.Context, params GetAvailableFeaturePipelinesParams) error
	// Returns metrics for for a group of Feature Flags
	// (GET /admin/features/metrics)
	GetFeatureMetrics(ctx echo.Context, params GetFeatureMetricsParams) error
	// Return Feature Flag details in a YAML format
	// (GET /admin/features/yaml)
	GetFlagsYaml(ctx echo.Context, params GetFlagsYamlParams) error
	// Update YAML file for Feature Flags
	// (PUT /admin/features/yaml)
	UpdateFlagsYaml(ctx echo.Context, params UpdateFlagsYamlParams) error
	// Delete a Feature Flag
	// (DELETE /admin/features/{identifier})
	DeleteFeatureFlag(ctx echo.Context, identifier Identifier, params DeleteFeatureFlagParams) error
	// Returns a Feature Flag
	// (GET /admin/features/{identifier})
	GetFeatureFlag(ctx echo.Context, identifier Identifier, params GetFeatureFlagParams) error
	// Updates a Feature Flag
	// (PATCH /admin/features/{identifier})
	PatchFeature(ctx echo.Context, identifier Identifier, params PatchFeatureParams) error
	// Return a list of dependant flags
	// (GET /admin/features/{identifier}/dependants)
	GetDependentFeatures(ctx echo.Context, identifier Identifier, params GetDependentFeaturesParams) error
	// Retrieve all feature evaluations.
	// (GET /admin/features/{identifier}/evaluations)
	GetFeatureEvaluations(ctx echo.Context, identifier Identifier, params GetFeatureEvaluationsParams) error
	// Delete a Feature Pipeline
	// (DELETE /admin/features/{identifier}/pipeline)
	DeleteFeaturePipeline(ctx echo.Context, identifier Identifier, params DeleteFeaturePipelineParams) error
	// Retrieve the configured pipeline for a feature
	// (GET /admin/features/{identifier}/pipeline)
	GetFeaturePipeline(ctx echo.Context, identifier Identifier, params GetFeaturePipelineParams) error
	// Updates a feature pipeline details
	// (PATCH /admin/features/{identifier}/pipeline)
	PatchFeaturePipeline(ctx echo.Context, identifier Identifier, params PatchFeaturePipelineParams) error
	// Adds feature pipeline details
	// (POST /admin/features/{identifier}/pipeline)
	CreateFlagPipeline(ctx echo.Context, identifier Identifier, params CreateFlagPipelineParams) error
	// Restore a Feature Flag
	// (POST /admin/features/{identifier}/restore)
	RestoreFeatureFlag(ctx echo.Context, identifier Identifier, params RestoreFeatureFlagParams) error
	// Returns list of Jira issues pulled from a users Jira instance, based on a given search term
	// (GET /admin/jira/issues)
	GetJiraIssues(ctx echo.Context, params GetJiraIssuesParams) error
	// Retrieves snapshot of an object
	// (GET /admin/objects/{identifiers})
	GetOSByID(ctx echo.Context, identifiers Identifiers) error
	// Returns a list of SDK/Framework/Version
	// (GET /admin/onboarding)
	GetSDKDetails(ctx echo.Context, params GetSDKDetailsParams) error
	// Returns a count of enabled and total flags for projects a User can access
	// (GET /admin/overview)
	GetUserFlagOverview(ctx echo.Context, params GetUserFlagOverviewParams) error
	// List Projects
	// (GET /admin/projects)
	GetAllProjects(ctx echo.Context, params GetAllProjectsParams) error
	// Create Project.
	// (POST /admin/projects)
	CreateProject(ctx echo.Context, params CreateProjectParams) error
	// Delete a Project
	// (DELETE /admin/projects/{identifier})
	DeleteProject(ctx echo.Context, identifier Identifier, params DeleteProjectParams) error
	// Returns Project details
	// (GET /admin/projects/{identifier})
	GetProject(ctx echo.Context, identifier Identifier, params GetProjectParams) error
	// Updates a Project
	// (PUT /admin/projects/{identifier})
	ModifyProject(ctx echo.Context, identifier Identifier, params ModifyProjectParams) error
	// Returns all flags for a project and their state in each environment
	// (GET /admin/projects/{identifier}/flags)
	GetProjectFlags(ctx echo.Context, identifier Identifier, params GetProjectFlagsParams) error
	// Delete a Git Repo
	// (DELETE /admin/projects/{identifier}/git_repo)
	DeleteGitRepo(ctx echo.Context, identifier Identifier, params DeleteGitRepoParams) error
	// Returns Git repo Details
	// (GET /admin/projects/{identifier}/git_repo)
	GetGitRepo(ctx echo.Context, identifier Identifier, params GetGitRepoParams) error
	// Updates a Git repo details
	// (PATCH /admin/projects/{identifier}/git_repo)
	PatchGitRepo(ctx echo.Context, identifier Identifier, params PatchGitRepoParams) error
	// Adds Git repo details
	// (POST /admin/projects/{identifier}/git_repo)
	CreateGitRepo(ctx echo.Context, identifier Identifier, params CreateGitRepoParams) error
	// Creates a Proxy Key in the account & org
	// (POST /admin/proxy/keys)
	CreateProxyKey(ctx echo.Context, params CreateProxyKeyParams) error
	// Deletes a ProxyKey
	// (DELETE /admin/proxy/keys/{identifier})
	DeleteProxyKey(ctx echo.Context, identifier Identifier, params DeleteProxyKeyParams) error
	// Returns a ProxyKey
	// (GET /admin/proxy/keys/{identifier})
	GetProxyKey(ctx echo.Context, identifier Identifier, params GetProxyKeyParams) error
	// Updates a Proxy Key in the account & org
	// (PATCH /admin/proxy/keys/{identifier})
	UpdateProxyKey(ctx echo.Context, identifier Identifier, params UpdateProxyKeyParams) error
	// Returns all Target Groups
	// (GET /admin/segments)
	GetAllSegments(ctx echo.Context, params GetAllSegmentsParams) error
	// Creates a Target Group
	// (POST /admin/segments)
	CreateSegment(ctx echo.Context, params CreateSegmentParams) error
	// Deletes a Target Group
	// (DELETE /admin/segments/{identifier})
	DeleteSegment(ctx echo.Context, identifier Identifier, params DeleteSegmentParams) error
	// Returns Target Group details for the given identifier
	// (GET /admin/segments/{identifier})
	GetSegment(ctx echo.Context, identifier Identifier, params GetSegmentParams) error
	// Updates a Target Group
	// (PATCH /admin/segments/{identifier})
	PatchSegment(ctx echo.Context, identifier Identifier, params PatchSegmentParams) error
	// Returns Feature Flags that are available to be added to the given Target Group
	// (GET /admin/segments/{identifier}/available_flags)
	GetAvailableFlagsForSegment(ctx echo.Context, identifier Identifier, params GetAvailableFlagsForSegmentParams) error
	// Returns Feature Flags in a Target Group
	// (GET /admin/segments/{identifier}/flags)
	GetSegmentFlags(ctx echo.Context, identifier Identifier, params GetSegmentFlagsParams) error
	// Returns all Tags
	// (GET /admin/tags)
	GetAllTags(ctx echo.Context, params GetAllTagsParams) error
	// Creates a Tag
	// (POST /admin/tags)
	CreateTag(ctx echo.Context, params CreateTagParams) error
	// Delete a Tag
	// (DELETE /admin/tags/{identifier})
	DeleteTag(ctx echo.Context, identifier Identifier, params DeleteTagParams) error
	// Returns a Tag
	// (GET /admin/tags/{identifier})
	GetTag(ctx echo.Context, identifier Identifier, params GetTagParams) error
	// Returns all Targets
	// (GET /admin/targets)
	GetAllTargets(ctx echo.Context, params GetAllTargetsParams) error
	// Creates a Target
	// (POST /admin/targets)
	CreateTarget(ctx echo.Context, params CreateTargetParams) error
	// Returns Targets and Target Group details
	// (GET /admin/targets-segments-info/)
	GetTargetsAndSegmentsInfo(ctx echo.Context, params GetTargetsAndSegmentsInfoParams) error
	// Returns Targets and Segments details for an Environment
	// (GET /admin/targets-segments/)
	GetTargetsAndSegments(ctx echo.Context, params GetTargetsAndSegmentsParams) error
	// Returns Target attributes for an Environment
	// (GET /admin/targets/attributes)
	GetAllTargetAttributes(ctx echo.Context, params GetAllTargetAttributesParams) error
	// Add Target details
	// (POST /admin/targets/upload)
	UploadTargets(ctx echo.Context, params UploadTargetsParams) error
	// Deletes a Target
	// (DELETE /admin/targets/{identifier})
	DeleteTarget(ctx echo.Context, identifier Identifier, params DeleteTargetParams) error
	// Returns details of a Target
	// (GET /admin/targets/{identifier})
	GetTarget(ctx echo.Context, identifier Identifier, params GetTargetParams) error
	// Updates a Target
	// (PATCH /admin/targets/{identifier})
	PatchTarget(ctx echo.Context, identifier Identifier, params PatchTargetParams) error
	// Modifies a Target
	// (PUT /admin/targets/{identifier})
	ModifyTarget(ctx echo.Context, identifier Identifier, params ModifyTargetParams) error
	// Returns available Target Group for the given Target
	// (GET /admin/targets/{identifier}/available_segments)
	GetTargetAvailableSegments(ctx echo.Context, identifier Identifier, params GetTargetAvailableSegmentsParams) error
	// Returns Target Groups for the given Target
	// (GET /admin/targets/{identifier}/segments)
	GetTargetSegments(ctx echo.Context, identifier Identifier, params GetTargetSegmentsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAIDAQuery converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAIDAQuery(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAIDAQuery(ctx)
	return err
}

// GetAllAPIKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllAPIKeys(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllAPIKeysParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllAPIKeys(ctx, params)
	return err
}

// AddAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddAPIKey(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AddAPIKeyParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddAPIKey(ctx, params)
	return err
}

// DeleteAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAPIKeyParams
	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAPIKey(ctx, identifier, params)
	return err
}

// GetAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIKeyParams
	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAPIKey(ctx, identifier, params)
	return err
}

// UpdateAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateAPIKeyParams
	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAPIKey(ctx, identifier, params)
	return err
}

// GetAuditByParams converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuditByParams(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuditByParamsParams
	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "objectType" -------------

	err = runtime.BindQueryParameter("form", true, true, "objectType", ctx.QueryParams(), &params.ObjectType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "actor" -------------

	err = runtime.BindQueryParameter("form", true, false, "actor", ctx.QueryParams(), &params.Actor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actor: %s", err))
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", ctx.QueryParams(), &params.Action)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter action: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuditByParams(ctx, params)
	return err
}

// GetAllEnvironments converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllEnvironments(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllEnvironmentsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllEnvironments(ctx, params)
	return err
}

// CreateEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEnvironment(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateEnvironmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEnvironment(ctx, params)
	return err
}

// DeleteEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEnvironmentParams
	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnvironment(ctx, identifier, params)
	return err
}

// GetEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnvironmentParams
	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnvironment(ctx, identifier, params)
	return err
}

// ModifyEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyEnvironment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyEnvironmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyEnvironment(ctx, identifier, params)
	return err
}

// GetAllFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllFeatures(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllFeaturesParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Optional query parameter "targetIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetIdentifier", ctx.QueryParams(), &params.TargetIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetIdentifier: %s", err))
	}

	// ------------- Optional query parameter "targetIdentifierFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetIdentifierFilter", ctx.QueryParams(), &params.TargetIdentifierFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetIdentifierFilter: %s", err))
	}

	// ------------- Optional query parameter "metrics" -------------

	err = runtime.BindQueryParameter("form", true, false, "metrics", ctx.QueryParams(), &params.Metrics)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metrics: %s", err))
	}

	// ------------- Optional query parameter "featureIdentifiers" -------------

	err = runtime.BindQueryParameter("form", true, false, "featureIdentifiers", ctx.QueryParams(), &params.FeatureIdentifiers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter featureIdentifiers: %s", err))
	}

	// ------------- Optional query parameter "excludedFeatures" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludedFeatures", ctx.QueryParams(), &params.ExcludedFeatures)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter excludedFeatures: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "lifetime" -------------

	err = runtime.BindQueryParameter("form", true, false, "lifetime", ctx.QueryParams(), &params.Lifetime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lifetime: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "flagCounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "flagCounts", ctx.QueryParams(), &params.FlagCounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flagCounts: %s", err))
	}

	// ------------- Optional query parameter "summary" -------------

	err = runtime.BindQueryParameter("form", true, false, "summary", ctx.QueryParams(), &params.Summary)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter summary: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllFeatures(ctx, params)
	return err
}

// PatchFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFeatures(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchFeaturesParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFeatures(ctx, params)
	return err
}

// CreateFeatureFlag converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFeatureFlag(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFeatureFlagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFeatureFlag(ctx, params)
	return err
}

// GetAvailableFeaturePipelines converts echo context to params.
func (w *ServerInterfaceWrapper) GetAvailableFeaturePipelines(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableFeaturePipelinesParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pipelineName" -------------

	err = runtime.BindQueryParameter("form", true, false, "pipelineName", ctx.QueryParams(), &params.PipelineName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pipelineName: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAvailableFeaturePipelines(ctx, params)
	return err
}

// GetFeatureMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureMetrics(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFeatureMetricsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "featureIDs" -------------

	err = runtime.BindQueryParameter("form", true, false, "featureIDs", ctx.QueryParams(), &params.FeatureIDs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter featureIDs: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "lifetime" -------------

	err = runtime.BindQueryParameter("form", true, false, "lifetime", ctx.QueryParams(), &params.Lifetime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lifetime: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureMetrics(ctx, params)
	return err
}

// GetFlagsYaml converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlagsYaml(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlagsYamlParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlagsYaml(ctx, params)
	return err
}

// UpdateFlagsYaml converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFlagsYaml(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateFlagsYamlParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFlagsYaml(ctx, params)
	return err
}

// DeleteFeatureFlag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFeatureFlag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFeatureFlagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "commitMsg" -------------

	err = runtime.BindQueryParameter("form", true, false, "commitMsg", ctx.QueryParams(), &params.CommitMsg)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commitMsg: %s", err))
	}

	// ------------- Optional query parameter "forceDelete" -------------

	err = runtime.BindQueryParameter("form", true, false, "forceDelete", ctx.QueryParams(), &params.ForceDelete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter forceDelete: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFeatureFlag(ctx, identifier, params)
	return err
}

// GetFeatureFlag converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureFlag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFeatureFlagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "metrics" -------------

	err = runtime.BindQueryParameter("form", true, false, "metrics", ctx.QueryParams(), &params.Metrics)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metrics: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureFlag(ctx, identifier, params)
	return err
}

// PatchFeature converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFeature(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchFeatureParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFeature(ctx, identifier, params)
	return err
}

// GetDependentFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) GetDependentFeatures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDependentFeaturesParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Optional query parameter "targetIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetIdentifier", ctx.QueryParams(), &params.TargetIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetIdentifier: %s", err))
	}

	// ------------- Optional query parameter "targetIdentifierFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetIdentifierFilter", ctx.QueryParams(), &params.TargetIdentifierFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetIdentifierFilter: %s", err))
	}

	// ------------- Optional query parameter "metrics" -------------

	err = runtime.BindQueryParameter("form", true, false, "metrics", ctx.QueryParams(), &params.Metrics)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metrics: %s", err))
	}

	// ------------- Optional query parameter "featureIdentifiers" -------------

	err = runtime.BindQueryParameter("form", true, false, "featureIdentifiers", ctx.QueryParams(), &params.FeatureIdentifiers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter featureIdentifiers: %s", err))
	}

	// ------------- Optional query parameter "excludedFeatures" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludedFeatures", ctx.QueryParams(), &params.ExcludedFeatures)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter excludedFeatures: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "lifetime" -------------

	err = runtime.BindQueryParameter("form", true, false, "lifetime", ctx.QueryParams(), &params.Lifetime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lifetime: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "flagCounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "flagCounts", ctx.QueryParams(), &params.FlagCounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flagCounts: %s", err))
	}

	// ------------- Optional query parameter "summary" -------------

	err = runtime.BindQueryParameter("form", true, false, "summary", ctx.QueryParams(), &params.Summary)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter summary: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDependentFeatures(ctx, identifier, params)
	return err
}

// GetFeatureEvaluations converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeatureEvaluations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFeatureEvaluationsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startTime: %s", err))
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endTime: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeatureEvaluations(ctx, identifier, params)
	return err
}

// DeleteFeaturePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFeaturePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFeaturePipelineParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFeaturePipeline(ctx, identifier, params)
	return err
}

// GetFeaturePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeaturePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFeaturePipelineParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeaturePipeline(ctx, identifier, params)
	return err
}

// PatchFeaturePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFeaturePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchFeaturePipelineParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFeaturePipeline(ctx, identifier, params)
	return err
}

// CreateFlagPipeline converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFlagPipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFlagPipelineParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFlagPipeline(ctx, identifier, params)
	return err
}

// RestoreFeatureFlag converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreFeatureFlag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RestoreFeatureFlagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "commitMsg" -------------

	err = runtime.BindQueryParameter("form", true, false, "commitMsg", ctx.QueryParams(), &params.CommitMsg)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commitMsg: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreFeatureFlag(ctx, identifier, params)
	return err
}

// GetJiraIssues converts echo context to params.
func (w *ServerInterfaceWrapper) GetJiraIssues(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJiraIssuesParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "searchTerm" -------------

	err = runtime.BindQueryParameter("form", true, true, "searchTerm", ctx.QueryParams(), &params.SearchTerm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchTerm: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJiraIssues(ctx, params)
	return err
}

// GetOSByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifiers" -------------
	var identifiers Identifiers

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifiers", runtime.ParamLocationPath, ctx.Param("identifiers"), &identifiers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifiers: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOSByID(ctx, identifiers)
	return err
}

// GetSDKDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetSDKDetails(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSDKDetailsParams
	// ------------- Optional query parameter "sdkLanguage" -------------

	err = runtime.BindQueryParameter("form", true, false, "sdkLanguage", ctx.QueryParams(), &params.SdkLanguage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sdkLanguage: %s", err))
	}

	// ------------- Optional query parameter "sdkFramework" -------------

	err = runtime.BindQueryParameter("form", true, false, "sdkFramework", ctx.QueryParams(), &params.SdkFramework)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sdkFramework: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSDKDetails(ctx, params)
	return err
}

// GetUserFlagOverview converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserFlagOverview(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserFlagOverviewParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserFlagOverview(ctx, params)
	return err
}

// GetAllProjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProjects(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllProjectsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllProjects(ctx, params)
	return err
}

// CreateProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProject(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProjectParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProject(ctx, params)
	return err
}

// DeleteProject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteProjectParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProject(ctx, identifier, params)
	return err
}

// GetProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProject(ctx, identifier, params)
	return err
}

// ModifyProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyProjectParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyProject(ctx, identifier, params)
	return err
}

// GetProjectFlags converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectFlags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectFlagsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjectFlags(ctx, identifier, params)
	return err
}

// DeleteGitRepo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGitRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteGitRepoParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGitRepo(ctx, identifier, params)
	return err
}

// GetGitRepo converts echo context to params.
func (w *ServerInterfaceWrapper) GetGitRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGitRepoParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGitRepo(ctx, identifier, params)
	return err
}

// PatchGitRepo converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGitRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchGitRepoParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchGitRepo(ctx, identifier, params)
	return err
}

// CreateGitRepo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGitRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateGitRepoParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGitRepo(ctx, identifier, params)
	return err
}

// CreateProxyKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProxyKey(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProxyKeyParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProxyKey(ctx, params)
	return err
}

// DeleteProxyKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProxyKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteProxyKeyParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProxyKey(ctx, identifier, params)
	return err
}

// GetProxyKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetProxyKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProxyKeyParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProxyKey(ctx, identifier, params)
	return err
}

// UpdateProxyKey converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProxyKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateProxyKeyParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateProxyKey(ctx, identifier, params)
	return err
}

// GetAllSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllSegments(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllSegmentsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllSegments(ctx, params)
	return err
}

// CreateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSegment(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSegmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSegment(ctx, params)
	return err
}

// DeleteSegment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSegmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSegment(ctx, identifier, params)
	return err
}

// GetSegment converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSegment(ctx, identifier, params)
	return err
}

// PatchSegment converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchSegmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchSegment(ctx, identifier, params)
	return err
}

// GetAvailableFlagsForSegment converts echo context to params.
func (w *ServerInterfaceWrapper) GetAvailableFlagsForSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableFlagsForSegmentParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "flagNameIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "flagNameIdentifier", ctx.QueryParams(), &params.FlagNameIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flagNameIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAvailableFlagsForSegment(ctx, identifier, params)
	return err
}

// GetSegmentFlags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentFlags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentFlagsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSegmentFlags(ctx, identifier, params)
	return err
}

// GetAllTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTags(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllTagsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// ------------- Optional query parameter "tagIdentifierFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "tagIdentifierFilter", ctx.QueryParams(), &params.TagIdentifierFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagIdentifierFilter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllTags(ctx, params)
	return err
}

// CreateTag converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTag(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTag(ctx, params)
	return err
}

// DeleteTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "commitMsg" -------------

	err = runtime.BindQueryParameter("form", true, false, "commitMsg", ctx.QueryParams(), &params.CommitMsg)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commitMsg: %s", err))
	}

	// ------------- Optional query parameter "forceDelete" -------------

	err = runtime.BindQueryParameter("form", true, false, "forceDelete", ctx.QueryParams(), &params.ForceDelete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter forceDelete: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTag(ctx, identifier, params)
	return err
}

// GetTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Optional query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "metrics" -------------

	err = runtime.BindQueryParameter("form", true, false, "metrics", ctx.QueryParams(), &params.Metrics)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metrics: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTag(ctx, identifier, params)
	return err
}

// GetAllTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTargets(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllTargetsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "targetName" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetName", ctx.QueryParams(), &params.TargetName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetName: %s", err))
	}

	// ------------- Optional query parameter "targetIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetIdentifier", ctx.QueryParams(), &params.TargetIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllTargets(ctx, params)
	return err
}

// CreateTarget converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTarget(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTargetParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTarget(ctx, params)
	return err
}

// GetTargetsAndSegmentsInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsAndSegmentsInfo(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsAndSegmentsInfoParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "targets" -------------

	err = runtime.BindQueryParameter("form", true, false, "targets", ctx.QueryParams(), &params.Targets)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targets: %s", err))
	}

	// ------------- Optional query parameter "targetGroups" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetGroups", ctx.QueryParams(), &params.TargetGroups)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter targetGroups: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsAndSegmentsInfo(ctx, params)
	return err
}

// GetTargetsAndSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetsAndSegments(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetsAndSegmentsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "tsIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "tsIdentifier", ctx.QueryParams(), &params.TsIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tsIdentifier: %s", err))
	}

	// ------------- Optional query parameter "tsName" -------------

	err = runtime.BindQueryParameter("form", true, false, "tsName", ctx.QueryParams(), &params.TsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tsName: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetsAndSegments(ctx, params)
	return err
}

// GetAllTargetAttributes converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTargetAttributes(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllTargetAttributesParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllTargetAttributes(ctx, params)
	return err
}

// UploadTargets converts echo context to params.
func (w *ServerInterfaceWrapper) UploadTargets(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadTargetsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadTargets(ctx, params)
	return err
}

// DeleteTarget converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTarget(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTargetParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTarget(ctx, identifier, params)
	return err
}

// GetTarget converts echo context to params.
func (w *ServerInterfaceWrapper) GetTarget(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTarget(ctx, identifier, params)
	return err
}

// PatchTarget converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTarget(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTargetParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTarget(ctx, identifier, params)
	return err
}

// ModifyTarget converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyTarget(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyTargetParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyTarget(ctx, identifier, params)
	return err
}

// GetTargetAvailableSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetAvailableSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetAvailableSegmentsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "sortByField" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByField", ctx.QueryParams(), &params.SortByField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByField: %s", err))
	}

	// ------------- Optional query parameter "segmentName" -------------

	err = runtime.BindQueryParameter("form", true, false, "segmentName", ctx.QueryParams(), &params.SegmentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetAvailableSegments(ctx, identifier, params)
	return err
}

// GetTargetSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetTargetSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, ctx.Param("identifier"), &identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{""})

	ctx.Set(ApiKeyScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTargetSegmentsParams
	// ------------- Required query parameter "accountIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountIdentifier", ctx.QueryParams(), &params.AccountIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountIdentifier: %s", err))
	}

	// ------------- Required query parameter "orgIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIdentifier", ctx.QueryParams(), &params.OrgIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIdentifier: %s", err))
	}

	// ------------- Required query parameter "projectIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectIdentifier", ctx.QueryParams(), &params.ProjectIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdentifier: %s", err))
	}

	// ------------- Required query parameter "environmentIdentifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "environmentIdentifier", ctx.QueryParams(), &params.EnvironmentIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environmentIdentifier: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTargetSegments(ctx, identifier, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/admin/aida", wrapper.CreateAIDAQuery)
	router.GET(baseURL+"/admin/apikey", wrapper.GetAllAPIKeys)
	router.POST(baseURL+"/admin/apikey", wrapper.AddAPIKey)
	router.DELETE(baseURL+"/admin/apikey/:identifier", wrapper.DeleteAPIKey)
	router.GET(baseURL+"/admin/apikey/:identifier", wrapper.GetAPIKey)
	router.PUT(baseURL+"/admin/apikey/:identifier", wrapper.UpdateAPIKey)
	router.GET(baseURL+"/admin/audit", wrapper.GetAuditByParams)
	router.GET(baseURL+"/admin/environments", wrapper.GetAllEnvironments)
	router.POST(baseURL+"/admin/environments", wrapper.CreateEnvironment)
	router.DELETE(baseURL+"/admin/environments/:identifier", wrapper.DeleteEnvironment)
	router.GET(baseURL+"/admin/environments/:identifier", wrapper.GetEnvironment)
	router.PUT(baseURL+"/admin/environments/:identifier", wrapper.ModifyEnvironment)
	router.GET(baseURL+"/admin/features", wrapper.GetAllFeatures)
	router.PATCH(baseURL+"/admin/features", wrapper.PatchFeatures)
	router.POST(baseURL+"/admin/features", wrapper.CreateFeatureFlag)
	router.GET(baseURL+"/admin/features/available_pipelines", wrapper.GetAvailableFeaturePipelines)
	router.GET(baseURL+"/admin/features/metrics", wrapper.GetFeatureMetrics)
	router.GET(baseURL+"/admin/features/yaml", wrapper.GetFlagsYaml)
	router.PUT(baseURL+"/admin/features/yaml", wrapper.UpdateFlagsYaml)
	router.DELETE(baseURL+"/admin/features/:identifier", wrapper.DeleteFeatureFlag)
	router.GET(baseURL+"/admin/features/:identifier", wrapper.GetFeatureFlag)
	router.PATCH(baseURL+"/admin/features/:identifier", wrapper.PatchFeature)
	router.GET(baseURL+"/admin/features/:identifier/dependants", wrapper.GetDependentFeatures)
	router.GET(baseURL+"/admin/features/:identifier/evaluations", wrapper.GetFeatureEvaluations)
	router.DELETE(baseURL+"/admin/features/:identifier/pipeline", wrapper.DeleteFeaturePipeline)
	router.GET(baseURL+"/admin/features/:identifier/pipeline", wrapper.GetFeaturePipeline)
	router.PATCH(baseURL+"/admin/features/:identifier/pipeline", wrapper.PatchFeaturePipeline)
	router.POST(baseURL+"/admin/features/:identifier/pipeline", wrapper.CreateFlagPipeline)
	router.POST(baseURL+"/admin/features/:identifier/restore", wrapper.RestoreFeatureFlag)
	router.GET(baseURL+"/admin/jira/issues", wrapper.GetJiraIssues)
	router.GET(baseURL+"/admin/objects/:identifiers", wrapper.GetOSByID)
	router.GET(baseURL+"/admin/onboarding", wrapper.GetSDKDetails)
	router.GET(baseURL+"/admin/overview", wrapper.GetUserFlagOverview)
	router.GET(baseURL+"/admin/projects", wrapper.GetAllProjects)
	router.POST(baseURL+"/admin/projects", wrapper.CreateProject)
	router.DELETE(baseURL+"/admin/projects/:identifier", wrapper.DeleteProject)
	router.GET(baseURL+"/admin/projects/:identifier", wrapper.GetProject)
	router.PUT(baseURL+"/admin/projects/:identifier", wrapper.ModifyProject)
	router.GET(baseURL+"/admin/projects/:identifier/flags", wrapper.GetProjectFlags)
	router.DELETE(baseURL+"/admin/projects/:identifier/git_repo", wrapper.DeleteGitRepo)
	router.GET(baseURL+"/admin/projects/:identifier/git_repo", wrapper.GetGitRepo)
	router.PATCH(baseURL+"/admin/projects/:identifier/git_repo", wrapper.PatchGitRepo)
	router.POST(baseURL+"/admin/projects/:identifier/git_repo", wrapper.CreateGitRepo)
	router.POST(baseURL+"/admin/proxy/keys", wrapper.CreateProxyKey)
	router.DELETE(baseURL+"/admin/proxy/keys/:identifier", wrapper.DeleteProxyKey)
	router.GET(baseURL+"/admin/proxy/keys/:identifier", wrapper.GetProxyKey)
	router.PATCH(baseURL+"/admin/proxy/keys/:identifier", wrapper.UpdateProxyKey)
	router.GET(baseURL+"/admin/segments", wrapper.GetAllSegments)
	router.POST(baseURL+"/admin/segments", wrapper.CreateSegment)
	router.DELETE(baseURL+"/admin/segments/:identifier", wrapper.DeleteSegment)
	router.GET(baseURL+"/admin/segments/:identifier", wrapper.GetSegment)
	router.PATCH(baseURL+"/admin/segments/:identifier", wrapper.PatchSegment)
	router.GET(baseURL+"/admin/segments/:identifier/available_flags", wrapper.GetAvailableFlagsForSegment)
	router.GET(baseURL+"/admin/segments/:identifier/flags", wrapper.GetSegmentFlags)
	router.GET(baseURL+"/admin/tags", wrapper.GetAllTags)
	router.POST(baseURL+"/admin/tags", wrapper.CreateTag)
	router.DELETE(baseURL+"/admin/tags/:identifier", wrapper.DeleteTag)
	router.GET(baseURL+"/admin/tags/:identifier", wrapper.GetTag)
	router.GET(baseURL+"/admin/targets", wrapper.GetAllTargets)
	router.POST(baseURL+"/admin/targets", wrapper.CreateTarget)
	router.GET(baseURL+"/admin/targets-segments-info/", wrapper.GetTargetsAndSegmentsInfo)
	router.GET(baseURL+"/admin/targets-segments/", wrapper.GetTargetsAndSegments)
	router.GET(baseURL+"/admin/targets/attributes", wrapper.GetAllTargetAttributes)
	router.POST(baseURL+"/admin/targets/upload", wrapper.UploadTargets)
	router.DELETE(baseURL+"/admin/targets/:identifier", wrapper.DeleteTarget)
	router.GET(baseURL+"/admin/targets/:identifier", wrapper.GetTarget)
	router.PATCH(baseURL+"/admin/targets/:identifier", wrapper.PatchTarget)
	router.PUT(baseURL+"/admin/targets/:identifier", wrapper.ModifyTarget)
	router.GET(baseURL+"/admin/targets/:identifier/available_segments", wrapper.GetTargetAvailableSegments)
	router.GET(baseURL+"/admin/targets/:identifier/segments", wrapper.GetTargetSegments)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9eW8bubIo/lUI/X7AncGTvGqcxP+8q9hOrieT2Dd25ryLSXBAd7MljltNHZKyo5Pn",
	"7/7ArZvsJnuTnM0CBphYzaVIVhWrirV8GURkviAZyjgbHH8ZLCCFc8QRlX/BKCLLjP/3EtHVpfgifowR",
	"iyhecEyywfFgopqA8xhlHCcY0cFwgD7D+SJFTDVP4DLl4p93MF2iwXH+08PDcIDFIP8SEwyGgwzOxXc9",
	"rTMkRf9aYoriwTGnSzQcsGiG5lCMylcL0YlxirOpHBNGArh6qOU/QtPrj8UcmKO5XA3KlvPB8V+DVwjy",
	"JUVinDsomp9QBDmKB8PBFZrOUcaLHyptLyGPZigefBqWgc9/gJTClVkMoQ1rITS8FPmtdrdoNMN3KK6b",
	"44pDvmSAJIDPEEjUgkCSwmloYj2ob+4bQlIEMzX5Msb8ilD+cvUKozT2TG199M/FnBbFdOas0GcULTmK",
	"/ykP1WyJPuXqGdhQXdAYUT9M6lMYIvO9Cs/k6mQwHJyeXZ34Z4/IfI75WzZ1TwSmKbk/my/46k9FR4oQ",
	"XMheYw5UfzBHjMEpCoCYT9KAHSiLr/Ec1SHHWRYD0SYwkx7BNw/OOJoiqie6w5RkgnQu5Mgw7bH+s2KU",
	"IDh5C4fB1G9C3mc9mFw22QW8LvwPfY7SZYxizXiY2c9uYJ+Q+RwChsSVwFEMcA4OA5wAPQlIKJlLrkAR",
	"W5CMBdGgBFTDlmsec37Kqgj3IcP/WhZsyAIsMLc1mJerN3PhJLSV7fcsIRTMlynHixQBaxfqAHZWVrtd",
	"KZyeiEvTs13vEV/SjAF5qSo4xHnFOEkQFUgphpPMXYzCANqZgmw5B4JD3qEhWBAuwIBpuhoxDlM0BBRF",
	"KOPpagSjCDGGYoB4FFpLAVrDZSBanmXwJkWee+AVTjmiEnoF5g0U85IMYHkrrQCkCCDVHRAKYszUUCFC",
	"M18bYfoDJ4gLFtYBKD5DmIJU9wS/LBCdQyFm7XI0XxAK6erXAGSmU4sjfwfrWXOBQB3ubjNwa/YoOigJ",
	"ofsOMSVZ/KKRLUN3iI4Es0OMo3hYQbRhBRtD26hGbgP6cj6HdBUmHKYaAJwlRECuFoITwBAXrFBwzxAQ",
	"euwWWHYNpz32j8MpkHJ1iJVwMWxfrkdohE5Ringtll0a3E5XIJatmcS1tvhWzNK0TwU/Dd4KRZOc05Gb",
	"v1HEAZZ7BiaX5zsGkgXkswIQ3PfCLTr6RZcmohR/81Vge3BbMiwadmQJNbJ1j8lZi6Nha5wNqz2cDtj9",
	"N6bwnLElukJCXanVf2QLwBGdg6WgP05Aoijzd0whkMMICWiZcgZuQkfJ5DDXiM47Itgtzmr1szc4iztw",
	"eDGcVzX5mynFV80sOgsx2lCgV1uZI05x1CQYXRq7gtg5nMU4ghwJFqq7gxhyCDADOesXKNEgUuq+TUwj",
	"q1ySreRfcQW2IRH5v/rjU0h+vVrUstELRQqiGfilYjQAFxRo08KvJRNLpa1tbKl+fMhtFHY781PIKFOs",
	"oRZ3gwaSwjLixyNCp7WbQ6cww/9WW9HD2PRPQqfhtdFpb2VrAafo3XJ+47uSLotv/okXdoNa9Vi0vML/",
	"Rv5J5JfwFPpz/QR4gVKcoSaR0hJITBcG7jGfAbZAEU5wBDRFeKGxZmkgmgUlAuPa3KiXqmloTvW1tTir",
	"29dNeD1DQE8KcJNK75u/C4YxmDyyhUw281Klnvux7GBn707P373W1jD9hx+O+PaVuEHuCb2tO5gP+nKm",
	"UnQHfyLKMMnElQzy/iFJ2Z6jAUVYfPsHzKZLOEUdoCkgEPCYAcLQWC1qgVFs9d3615weKSi95PM0QfQV",
	"0HXoyqaWwVlLN3MSi4/xJHDhsO8CrzmkvMnAeiUa1ZlY81GamDyHU8W/G8S1qpIg9MxC6A2+nXBo3aRq",
	"qgZc4ZBOEQ9A1QqDfcCKMdvBK1r2Avk1JcvFxgyC1wpkNWgtsHmTZhDPAxrhWtvacidbAbgBntUCqBYc",
	"SzXcBP7BR9im0vXfCqr12WykXjAn3HRxWK6XnRXg5py1NbCP96CmoHqEZxCHgvUstefeTLbs25x1WALU",
	"IH3l82x9gXL2KEwOENogDdkTN50q2xifawNXG3b3LdGsBRth3xcLeVAKG2L8JYmxMjVMzk8n79WP4s+I",
	"ZFxbVOBikeJIWip2pUHt+Is144KSBaJcjyIN/3K2L4P/n6JkcDz4/3YLl5xd1Y/tvjLtHoaDJFdSxAKU",
	"9UNAu9BGu4rl07WaFz3mq1fKRljpkRrNw2n/N7yDvtYsvn2DVm7b/YPD0fi3o9Gz5y8CXdos+0o3exgO",
	"7pQqV5pl52DncOBDoULB/stVFPIdL4Cw1lscvrJ3icN/GA4ml+dv0Gr943ZQ1l7I9QwzcItWAKtbhSF6",
	"hyhgOEZgQUm8lN4qADnuDZVdRZ8XYs0T7hP/w3hQTDBqmEDRUrjv6BatBkGvpvqznixwscfq1Evn6NP7",
	"5Mi1p/ZhEUOOfvSz67fzD/6NsTxSHntfMAOwwy48BopeFrOf1ffVljr/85F+ns0fmOpw+Rr6n5w82Lwo",
	"bJe+W9E5N21UF1x7/XPLLSaeV5OhMZtfJMmfkOL8VaGyLaZd1tTMQZLK9ynmp4hDnDZu7euiZQVfKsNK",
	"U1DT1VrZ1Deil4VKlWHJfRaYMHfz8O/qgiKJAgxz1B6bLq1eVbSqR1vBjHDUYbIr1cE3z/okMBzcGTRp",
	"P1KBWQ/DwRxn56rTwRr0lRsJLXC8uOwnBPuc60lVuvq2p9WcaX0pUUThrnk8eAtvcTYFjMwRiGYwmyJF",
	"ChnjVPE5Njj+64tG/sFS3n9aKXD9u7VorG7IGMg2Dw/DUtdTi3bLI5Ts3Xogu4c9HoxjB5fLo+mn68IB",
	"bt89ouO/ir+cTweDT1W4NziVMzpFc3LXefTSPjjIVLOleTuwD2LnIGzWV8D6z/1C5SntlXoPvdv3HPH3",
	"Ao3yHgpDE5zFHoQhfuqj5PWGKtF/97FgHF9LbctLg9fK587amms4Vepu9bjWH0fh8PrjMMSt+/OKQw8x",
	"MPnr8aDEDDp1TZLqXkqD2jXJj0X98hYuKsMY49vxX/qf+yNXiZA/HoxcCeyukGiKf9ttfBv6XQEF41j7",
	"XHSASPeQgGlTk6BY/c+DnjuzETgOCzjGneGIUgRpdfaFMpq4EHTd5ffLtIq8UQqXDKm7GHJO8c1SIjOa",
	"Q5wOhgOyEH/8y5CYXOiSIbr/n1PRYici88FQ/nJg/fLp4ZMQajChmK8Gx/tKxENBqPeFbLBcYgFpEh+g",
	"m2Q/GT1Dyc1ofHgwHsFnCI2OYrQHx89ukucHR56z866OLlN0fjo4HnDE+Hv1R2lXTuQGBPZFikAb3JVh",
	"I0RqMbVA5d1PzJ/NwyqW3LDWzaNAf4ApIjRGVHxh3mOVYIh/7OvRDvT/D31ilr4gryQWloe7WUa3iL9c",
	"WVF9p2VBK4i4w8E9wtMZHxwf7olpvc0OrGZH4WaHVrP9vQfPOlpj+TBIaO3GDOxJw1Sb3qmdo6OWm7Wz",
	"t//Q9dxb71CtXFU3yht7lEnh/VGKYM2NHJwuUbVj7rpe6Wlp8qqrYDGFLaXBRHG1yiKp+10sENXKq6MX",
	"aj+49c04xqPuPGA5S1I4HanFjkxbr+3L9sxzRhDiGVCqHbgMjlDSvj1gleaoV5z/B87TPpvT0tLDxPju",
	"jKy/ri4jMyR9OpqA+Hl/ENbM55DeTtgVh1UmIdDt07CrEaArhr7Vb9diR7zY+hrz92hB+u9MaOkM8cmS",
	"kxO5oirVFp8Kui16nuWhW243E9LVmWDr1r4BQ6u1GmtzEpgyNPQYCW8ozKJZ6akO4sxHtRHJMhRxQt8j",
	"GcwXlWhX/+uk2swzWIJTdAn5rMpA2M5K0Iunj6Ld89jtM4720W/7e3tJBA/G8W8H8eHBb8+Sm6P4RbJ/",
	"GMUxTA5uxui3Z74RKVqQEDObQZohxkaiTahv/U68d1r4hiCEvyJpXOGjikuM5Hbs7mhIdhsZYWk5+fE6",
	"M1l7H2CL2tv4EZ9rztS/cr9m1+zX+qVG/2tU2F1bPNGU5vY+IT7S+0vzq8slJZ9Xb9Cq6wXRkvfo0c8L",
	"TlmZl7ANHLz1bsac3f9rEB3uJc/3j8aj8UH8YjR+9vxgBNGzo1F0CPd/i8focDwW99j+/vPxwR6MR9Hz",
	"aG80fp7cjF4c7cejg+jmRXR0hMYHQkMYto7BCiORWfqFX1bxvvF9XslHWBIQTnwnq00Mm7/eYBxfk/NM",
	"Rrz/gRlvYfwpLD4+a/MrSuabGU+Cdva5w1CHIYA6jTLOAfqtAlBAefZpzBmaSpOgvj2VAp3F7B9YRgsW",
	"arStLrfV1n0TlvTskfp7JJUzrb4vYcoKQ+lfsp3Q2f9T/EOQPMxWVUi6mCOsWTeliGjc3yhf8dK8SfzQ",
	"JTozzBluEIcjsSUqELR6LWV9ZjMMpdH9Tlsfd4q4s8Hx4CXiEFyHYap7n9X2lkpSnwxI4MT0sgngM8hB",
	"BDMQCUwAEAgMA5yAGwTMolUYLWY2mK3uS42Fj/Lm6792XS8Os0O+G7gcLPUwHFz3839oBD0wmTj57+Ah",
	"t/FSYZbFHKaLmU0oDt30uGD6jd142awL8ubHzp+Wrok0FLR4rzDJYcIWANuQJbNFiAkrLQ9KLeUdN3j4",
	"FHpnEhvw/cC4mWtJrWDz1C1DMnwELn9RYeaWX6+OO9/U/BMcQzV7Kar5zcDyLt30pNKh0jetyU2Xz80e",
	"aXJWs+hljPk1hTjtNbcrg0SEUpTKtuex3wEN8maYc5AkH54jDk91t9KtNDTZZZqcqVQrr/4R2JY7iFN4",
	"k2p/tA2fihj0JWQ4Os8SUnM4L2G8aRI8o5RQ34wvYWyyPoipT0iWpDj6ChNfz5CJWUcCBEaWNEIAphTB",
	"eAXQZ8y4RATHXfY7wVXbk/Vb4aoFA/seN+YRqNiWZPMEUxKsYQn+T6230aTKMJRv3lg2z5SDMzUCdxZj",
	"/ljgmHHfIg7lVjYCIzRt9Sj6WDBZUzSC81aloXksUPTwjWAUT4qPA4c9fiMwjwVE48Tq3fBxJnceDmuh",
	"YL3ppZWeHSSciu7dAOZj7VQNtubPahue2Rq3dnKheSiR4NEFjEkGkPim0uNMMQdslUX6LjvPOKIZTKX/",
	"BP1KEJlJTYwSUg2Hg9/dXGgbPx0xvhpazlKDH+8If0WWKmzjm8h/95CBjHCQSCgehjov11UGF2xGvh8J",
	"0AXr22ksF9kNgTTG2fTq9M3mOYo7fBgM/XQoefTGgbAHbwThu8EQ85r6rTBDz8++tw1h33JH5LvmYyCo",
	"HLh5aqaMPxs4k9tyzPfewd5B8tvzm1F89GxvNB6jZHQT7yejw4NDOH4eHTzf2xu3e5utMVjpd6v+dN4y",
	"Ci6fpb1UlT+pbfhwi9SM9ROzx5q5huddw+mj6IbXhfWrWS+8fgyef13L65VFeWIejFk/FGxKUls7uXpV",
	"eoR1F4M3gfBIkzdN+1iEpsN3JlncBvHtIJXzLCFfARwxTRNI7LHgCE/8IYNLPkMZl2l9v4LoXp4wh4FQ",
	"/O+vB4CeTczOEBWXxcUdoncY3W/8DMoThA4jf4RTj1k4hl7ngsn56QS8L9Iruzc7R5+5P+mp6aLKfohR",
	"HE+IlHAGYBYD+Q+SgIjECMwQRTuNjpJy0qrVdDjQ71heeCaX5yb1hszLfbMCQk0AnADtGiv++V/KWdNU",
	"3QBKji+vGtbM8watwD1OU3CDAJuR+wyQLF0BkgGVJW0HXGSALW8Y+tcSZRy8PrsGEUxTNlQN+QyBOWS3",
	"KAb6xS0fTiUHle7MlpvL3iFM9qN4dBMfJqPxs4ObERzf7I2iF9GLaO9FdDQ+QM1emdV1WG4XyqOEm+Ql",
	"Qu3VGd+A9DX2Jd/wTXnr27MJmEE2ExigT8gZ8DB6Md47eHYYHY7Rc/ji5mC/zsuvugrp+pJQjLI4Xfky",
	"/otJ35QmtdKAKJuLbhFMVlOdV3wRaxL7FaMFyoRaqmsxCLxTW4oZuEHig8BI6Smkk0wpo4v0KcM6dYCV",
	"vsl8rKcS7T6jcbVdMhxDQnZuncdY35VZwolnfVeB9RngmM70dZFIF4V6d/0pzkxGiC9eKm7vs2Reyauy",
	"16eKPQ+kmHGD1HIW317nr8j+TZbFxQAXDSQrYQDdCYjU5s7gHQIkipYUxRKdIZjiO5TpQglVphUZT27P",
	"TArb72c4mgFO8XSKxKiy4oSYErBlNAOQAa1eAUKBqU1nH52dy0J+qhyhKqoWplW5tAWiCaFzGwJnmr/J",
	"LIsJ8oc5zI1/YflI5PiFGU+3BPczlJkZBa7yfD+cOWVYk/iepHCqkprXMruSs2M9g8WeNPUOI/LngVLV",
	"6i4ChyrDsHAG5jhNMUMRyWJmHalg4/lG29PuH40P9vbH+3vPh77UYIXP2RXyLO33q4t3YAFXKZGv9QuK",
	"mFib3lirt75VHGRTGF858L/yWDx/KoDLcBYBj5N5QYBlF0b1ZZLwQM4e9f0lSghFNQ3OG65W1YqFTl1g",
	"9yiA3lZthVq+bBVMMaSrZPOhEW1OSJbgqTPxtUlHW+eXWp1z4Utvb42KGK+J1mCBclDS5u4Uk1Roq0uC",
	"CITCCcAKj9lSFn1KlqngTBlx2cXVh5OTs6urxhuzcnpDt5ZFEaji+qTmz/sl2hgWBUJNLUnDnhzqLSGW",
	"i4efai+Ojd2F7ojt7sPi+up4J0oqlz31jea7HU/y4P/yOMrFXaeVuUEM3EuPZ5LFWL7Dy/pupvgOUu/z",
	"CEBT56a08sKT33szms9iLDGrrj+kYNgBQOaui2AmBHSYrYz7dzGsjYlVGcwVyQMXoyqKdH6aS62RiQXI",
	"hz48GB+OD8aHPulYB0JUUrer24AYv0qgGsb/2x43GHtIFvUcqBjWMCAV/jAEMgc9++c95rOhODUOsUyq",
	"ZUm4RQvfPpnQDd/06pu6WwQayKAKcb3AqZiGW0tWtXDbV4GyWYV9vGRRRJvkwPnI9hQz1csrh53m6AxB",
	"bLWUXv0VtC1SA7TCWinkFKOK21iZagCMKGEMqPGYf7vtRGwhoi5aSbVebLNKDKDOgs3IMo0FkSghVVAm",
	"lMGNrXjNP+RQKHYyvNWeUL5BzgJ8x3JWJ6nZJVmDVhBLk2jl6VrJcljeVOtvTfOYlVJSrps904849nKx",
	"cQGQEUzFfAfoN3Tw4ujwefQiGsMXEI5vDsaHKLo5jOABSsZ9rA1nzcJw98SeTeaAzIraCW1ur5SgYRmp",
	"8TBlDNfimwa32oKOwewGuqnlDE67YUOsaat1lVxaK+urgmqcZspvxXEAUWacL7RLjmxkHdF4bzz0pS3N",
	"A3dK+xArqQSmQLcB8IYs1UWkvGo8AJuS3F7gKIJMm1q0OzRIIE5LurhcM6CIU4zuBMfXp8qGgNgl0v7D",
	"qnv2HyAmSDm1SKfmRpFZb44B14cmxh/PgyG2ldUu4RdOP1t2UlLlAZmu7Kt08xlk4AahDJiO8kLCYlkg",
	"JdkUUSkctpJyisoWYRU7n9g1jDp690CWSJ1DrpTpI4tJWrp1IJWuZ17VUEk7uV1Y3fJKzhXrJUliL1Ll",
	"wm+Zl7f3nFmrKbvfflp4L/B7ouZU9ntOSQogyNB9Uew7a7bQXIYTHsg1uwgqoyttS1slNNEZzEp61CKT",
	"LlrPaFRZ3d+YwmCJ7IJw7meIzxAFojlIllmkeBXm8qXEFMk2eodats5FNTQcRTKUoaQy781s0VNeSbUh",
	"krWolcpAirNbpctJRNBnsgNM0WU0XwhoE5CRDOV8q9VFkjsz+qxBVlkw71mkUKgTeF7iAKZbHmLr7kkL",
	"NkAa6T+XaMWuyPcAl1B8cytKzUHN+UMwv5OyEC1pKPG3adcyHXfJOdweQV5V7+Wt5s+VbbdTRj8vRKEQ",
	"6VwU0QHSlk6kzQPKPlmze20xSibFzqYynZsHp5gBvsVOqYXaCthbuKhbHbcxQ+vA+VOkQBJJRHnxTaMB",
	"CsRRRoupLBgmlg8d5tY6OvxPG1JfTu+iNIcHqdXHvJJuCqfGviL+yyKKBDAolpqjojwsH5lUSHTchro8",
	"kTmoyN1tUtS5B09Kmeeq9OGTe1AeGFJjqTBPq4Z/iNPSNSBzW8+SUkG+QndpcbcW0zaZoT2vofmtbgFv",
	"37kkG91ZO9FZzXPu04CeJ+h5lATKzZg0/WG70yu3qLV5cTRcwlSqzgtXS+eKT2UAVNPK9E1XQlUelJeE",
	"fSV0lwrD6qytwNpb6+zn2xV4qVYEQkV88ioFAY35fkZywdasLvAg1z6ThlMAoVauz80bpocEQEgdQNz4",
	"tn1J1UYJksnXLLAQNgLYYgy4QUInEZdSJzuAriAfUhBVeXn1aKxeda2LQb4cSw3JGMdjJb3NyD2YSyM2",
	"niOm2KxCL4Z8vVrfC+81tL4b0So7EbrYTJuAKGjwet2qFUzmV6zA8Q8tItuik2zqeWsKKpKyQyHi1Cj1",
	"zn0g5ElIxZqhntTBkrl6aB9FFHNEMax/YGspcyyZbWgKChtwygqhs89JtKr7USP7WpluLOeoisb4mJVD",
	"AiVD7HqYunxIZlLk96kiUmNWqUToNtpZjPiiear5yzjsiLEEgWnXAKPaq2xYFS23xj4iPwl5zueHEDB/",
	"1JgFlAmiMAzoa68uUS1uLwC1GE3c5LpsiW+58qJf6rImrZfc7m5ftM2l62Bh5s+dWxNGvqnHZO/AXeJV",
	"q1jd+CBXnfNT7Ru0aQ+KDuGtOiFLbZ8uub8SDtNJxPFdyB9DNADZcn6jkEzmBFVRnlB6Gd3lXg5C6zIi",
	"wi7yPw/85sMhBUTQSOoDI7eMKnj0m3bD5Pt7wdmDhqbwHuQvtJptk6zVDhwEYcgDijsAsfbCL8NCrG9W",
	"V4Jtd+bPwpMTLsgdpunqyi+6NKLgohhipGSaDth4GITsPYpQxtPVRLrldEMMDRnVQ4ygHqMLZAdexT9E",
	"3Wc1mnrp8iz0Ysv9BFr2OKNJy0vTPIQXS1SCtfZayuXo6rUq+E3gXiiNJUWdYv788cMevOAfz56PvRQU",
	"w5ADTOurLIehye5QABuwADRZGfKP77o89OZyoT12MelFBv4MT9oKe2rlZYNGdvPKY6g7VJcb08LhVi+i",
	"gVqGVqHjzVhMKgkxKltkG2wYWMF5qt9YCuHa3aWVdxhx6rKz8T3V9Gk8TxNnmkjb7sLHbQsXcsYaSUol",
	"XqmKB00CqA1TiBgYlkmya61i7aTIpGQZK/wj5RTSShQ0EVn2hrU1/j4K6UPT7rchPtNy2Im09Ol6VlJ+",
	"0vBAkOtXUW4tlu8PqkgGNIeyVax+IsXK4MOZdPENiBU5YiDTSvrExZivgRVddghl8bWHaKRUweF8kbtd",
	"Z3F5uyyY283U4VU7OFU4BAKTTL4MyphX/wTSFwZnCek5/nkcwvRuAyo/nSsOp4idtBHyVAch+05Roa/U",
	"zGXtO11mVzLKMEKtoWemQ2DADGfTDuDrHv3gl27ArXBUtlwTS9sHIrQ7ahmTgOJOp5336bdhUqHqMl2v",
	"SVTEzmnI4U1qdqpN7vFWt3Fet5myC1Qr75leLjdbn4Hv2mfAJ/flMWMh9/f80dKNLmtDt6V7374ArEAf",
	"28Cv5oilp3nJ/cmllBYSg8xJV62bYID4L8w4oauuumFVHvG9XP6gXj+BanINzhmhvIieIkjNfr1z3dty",
	"7DVpisvsbUruEM1gFjlTuiNfLedzSKUbXNEcRDMU3TJdwEGwHpitwD2k4nr1mq7NToQnEvKSBXNOHsYn",
	"0HoduoesIKbKqhZlBAuJS+en3e5Q0+o6nzr4OlsDrAdlynmkWvySI02Oin45QSoX+tUMYQkbSRLlrGA5",
	"pMg/SJJY6FmxmlwFRBLHfTPzOJyELYvis7LKWsTklYIMoOqVQpqB8n9m6A7RkUZyh8QCfDTnnNb8NXS5",
	"qZeopPx804JV6cZCWLeA6cJvO4ZDlnONVDfFzsXuu8zl4RdmV2l31g/OHQ1SNYYo6ZHS3QLlWmLlBKaw",
	"ixMiHLA89dPD3eT1G8UldUqtMcI5uo54UYcPpaA1F9R2xg/UGPLULsfIp2YQc5ZZDv4JPBsahzUnf0Bx",
	"LRkvHOOerhWYwIICPjllSU/DElpNgOvLVyEdaS9frjBn+hrAmfKgqosS+NrxJQ12QGUcj516jhaZkuk0",
	"zbUetWFsN8ZM/gPEkN6COYmRyQPz4bwhMYYizVyQcqMxmsiqgl6+K7sNwwsmYjiF9PatCnDqwPDUkBUe",
	"JwYD/tEaeVxp09yDtLWREPI2J4x4FXKXVdYC8+yTPwP5pJbXTv2q6lyqohXQwWJGpYYMLLT1BoIp5myV",
	"RUX0uOdpNC+LVR85pLmc8g0X4pcnqcv1UsrPAmFVMJG54xoTvFTi4AxUviPQGcf9uzLFXPA5wrDQ7Uxu",
	"H/2Ka70a5C/L9qNR6I3MrSRc0i+UqyxMUzWGLigmExgsOZlDjiOYpit9XtwrQ9vFh6trUt8Ex6YlgNWY",
	"RU6zxZKVkwh1q2BcSv9q2gBqGik/t7wzwPEwTw4xh7dI+hqoKEo+o2Q5lQnYzz7v+JlXY0QVTkor1tub",
	"W1XgnXFhRdbBt/FZtssue9yLIZ/JO0hfh0XVYGnC4YQWdwkLPcRcrbKoJtxJvVplsYl7Ms6qzuPqvTh1",
	"QcZqnQLBe11XdsXoUBad87hdZehW4Q8uKTpIKVdmHLLbV5V2pxVMoIyYFumvhZluNWqPfzGRmeolOhgE",
	"KaZWlFphL/JB3SDuPRXMwGWgO7tBbBJ987jrQLkDcxVYb/UwWwmudpOiufYFkieDMnEhoBj4y4s3ldK2",
	"kKVzVW2nEkVViBVztTSGmXtAY4rOn9UgmJqWAcAaqvN7Yt6DCdJMRjT0eZFCnBnPCe2ZnvvPLMQMzg3t",
	"y0VhBsvdRsKPa9fYK0thpao4rzjLDH8GaEGimZvWLLeDiK2Ol0IpKPNdmVHVvsssTpMYpa7u9Cq77BTi",
	"HpbKdzbggWlZPm0FSc1Zb8+3x/n2O5pygdUm40EZJcpyvT2Y74SLaGTP4RUR0VWrjvg1mJC26FjJrvrq",
	"1dvRs2fPnnl9PESPD+//8A8qw8VlEyDa2IPOOF+w493dmUqlO4rR3f4O5ClkDMNsJ0PNWSXyBVlghDbM",
	"qhUT3DbVpkhJfOHPkJlglMbMbycXworAUWMux6zuRJgy4QcED7ltHPMU7ZqGrRwOQ0l7fi8OQ6bqaZd4",
	"t9QzkOKWoTTxvx9mt0aILUZpodsO9JhDs90tDpate7I4OIo0tukkZIYhyqgq8UeB5axLRgEbJX2FsgmH",
	"adPTfACGhnDmtoRTe5XZts325uOqz5dJzyHvE5fv6ELCnprsj8VvHVPQJ8+puEWSvDKrNvNhlVBG/3VD",
	"4pUlnsps5zArZTItb2Nbtzk9B9qZ7lSFc7s5tUvP9zHgy2h0L5ldXbwr7LBQRqy40CmfASvzxcD3mlbi",
	"Aj6sLNepqnFbUE1B0ba8xzrHqj1WK/otoUErf4RS4akasK9O3+y+onCO7gm9Zbt/qowHVehzUDukJ6yA",
	"Zb1mVCmZo3mNi1A5MkOBYYfE+KSsBZyiDoOK5u6ge3uhYc+zGH0OWBV1fgTRzB4tONYV/jdqYr9ywWCB",
	"aGVY78rb57XATJONTG1RfDRSrD/NhUVt2KGzusiwsmdEfjpD6/itLbF3+pMXn6oXRQjRZVtwXuLA/lsl",
	"nNPBfq1Si1YVMcCKLMG9tGKm+NYJVxUiWl6hb8fhf8p2ZwUkeD0OnFTSeecv0k/sPNaPle9VSs4i5OVU",
	"f/DlpwwwQR0YbE3ou5a26l4Pde/rqm1OTohgeIuKvaZoZGWdGPqfmOuDRaxr38RsqxhGC4pNZHGVg8+X",
	"jIvdniPeP1lu4c3ekIn1MpQ9Y5LnzghmCWx82zQjhF43z9S/gAYCnDrtOsdA6KTNFSuzoLgij3jBnNS/",
	"6lJ+ZN2j3ZB3rtJK69KMtsv+YKVBeLy0pDUIk/tkbMDN4xGep70v00lnP5LyK3fYh8RkxoNpWrz4OIGz",
	"JjQV01pnBddBwnmCDhsq89qZNfhjcpF6Jd+tYLoxwXTR7Sxa5kAi/gIaD35kUOVGj5sIraj2MTh9eXB2",
	"8vzw+Why+ur5aLz//HD0/OXR3ujk4Ohk/OLs+cu9ZyeDT12STYVU7rzWaTnJ9eH+y72XBy9ejJ4dHf42",
	"Gu8fnY5enL14MTp5dTKZPJucTl6eTfpcC3JCWRGopuiLBOki6+h4Uqyl4nySzwouspZGutYMWM7ZoBYU",
	"81vSVJX2S2JbyaUhjs/CKLO//3x8sAfjUfQ82huNnyc3oxdH+/HoILp5ER0dofEBOuyGMhTNyR2qmTI6",
	"3Eue7x+NR+OD+MVo/Oz5wQiiZ0ej6BDu/xaP0eF4vN9lynZOyO/Dib8w05m/8tIvMv+XFYRTSvAFmxIH",
	"bDwrQZ6lSV5GTpbBNTIKaFmrMbGAN+HS+ukFinmrXl86aXJjdgGb/nzrLoM11KfhI8qr+LbZ4YvFt5a/",
	"l64zNzTF5XzuXaa4sIe+VeUg8JqS5QL8ohv+GhbWm90eYeFlUi5hlSuHMvTI9ops51bSKRxVIrId6hRK",
	"2NdUqytKl7HPcai4h3XxVBm4BCkCpo+yKVcAaS9tq0K5vksxTFYfAuoLcmDY8Rvxu61VbWie1G+za2yR",
	"sbMbqjkJPddJ4PnOMm6V97RAq5eIQ3CNmDQQ+dx+AuGLVi5tHcBocuVFsngS1OX2iDY6KkwzQYxMUXDr",
	"GD5dq8n32OVVJK8d9bHfiU/XSzCMmd5uAM5K6YTzdK3c6uSmIC4J3l3TDrcLY7BLy3vKBeW3OnRzFLke",
	"pPbZwgCj7mZM8brZlpKLbKocotfrdTMpKYLpUKyMK4+bbGUDlfZa748xX3c0VenaUy0r3/4XuVfsrFKK",
	"w2Dh0ITExZiiiKcrQCi4wxBAEC0ZJ3MzoxFMTs/fn51cD4aDk4t3p+fX5xfvvLLJXX2+fM+GFUKb81zt",
	"1qoqIqDnSAi4eSS74VUdPPl5fRHBcoLQOo6wKVsXs4ZrGak+DRTdqQtkspkOy7kO+3XgXSH15VI0xdHk",
	"5leqo+WJ1qy6CKGDLK7bKtcr1Wer2wmnllsZAVv48pg0xB7uamqQ66zHVtLjQAnD7rxPD92fvQUH6GXG",
	"tRMg+J2XxSEb1+gYcUTnKlAZcl8tDLlVgUNWpRNrDWK6Sanio2ZMa8pDC4oJxXwVXicDpg2gKFUOF5wA",
	"ItmmbKCfjlVjqSkYlV3ASmiMqPKc3tfltwX4MzydqYj0eovhhi8K1iEZRyW5st6qYX5oZjwvEjUGS+si",
	"UcanPlg41hQpz8vGvpqc//Hh/dlgODh7//7ivfcGuoZTv2achwca/OVwWgqYGIGIZAwzLu8XSWeyZFWp",
	"JttaJM9LcoiGQDoEjTicjvb7c4M+Y/diFNdw+vOmbGhn/7ve3FPXBmoJ1l/7ErX1KUvBXrALx4eNw+nU",
	"8SewFyr5d9jaFKxzX2On1B/B+WkRvKTVz4BdB95E/+c0TpIYJom/on1GstWctGA9haqLGSi6+SK98gKu",
	"nlFh1SevkGKLjmX92l7Vl4EsLniwNxykJIIm6hqlCWT+58o2gcpNZhRsipA/gs3OI+G7Zryaw97k2351",
	"r2vrubfhr/m2OaP+TmYZOA1UiafT1rvk1ILstk21uqpnqqL+CXQNq/XT2FpKVxXDmuvaM9eaSk+nuG23",
	"rqpmUuqsPgXZ3ySLm83uhPrtOuzXznLDssnsW0r81V9mEBPwVXvbQv52oQ0IBTwaP8AvNmC/WoJcTpO6",
	"pZu8WH0dmmEaJRXVXj/CqD+cdxo9jm6g/zqvWALCZ64se7UWP1XSJ4j00LpnbPsfoe6jQjUBtf561YLk",
	"3Pxvv7AyySELCGfWnW5WfbXsIBEO18bpujeMTW+EdRqb3gahgT0iuNJKp55BlBK6UfDrWOm6PNSdunOS",
	"7gr6dOd57cK7FLTefI2a0udwIS7ROxwj5fQZ248A+tjkMRa33AaMRs3k0lZN9Pfv9TiiXxA3pgrlo631",
	"4NjCDsrCyg4rrvvNuTNyXIkqaV6ZJXf0svUKVaCL2be6fpPrrNiDH3JhHxiir1I4vbhD9A6je19SCOWs",
	"KZkZUwXzVVqrX/6h8qcIRVl7aTJdJ2f/f9nqjbjyBVzSj9GkDQum2grkDfZ9CuTIMj18dFlTuXjiPrpA",
	"68mlXMStzoLb/XFyrZqlYfHBX0iEJEl9+ZJOftyeFVg1S5IE/DmpdWXyRvW5VVh0IVpjPGfLaAZkBs2l",
	"TJsk06fpkhzaQlF91RSNuzF2BVotBgVSF8/hYiGTNrnhCiRPTiztEAEpR9vOTVNB3SgGks70axFFEZI2",
	"d8eFbaeChmqIdSSuTuVSrRuqYR69P6ybgBaq2Ny2EHmolk89NYQ837yI8Q+EpzOO4pYsxjwK3stuAmMw",
	"Lx+yk3xsgWiEMg6nCFCSpmRZ5T2PvB3DgQLWP7r6pn12VCl+/aBpzZuZZTjRgXuNLik2VBqITz6DNEPR",
	"kmK+uhLYozZlssDawxsLUGcIxoXsdjz4PIILPLq18wtA1eNhqPtOliqplbd/Te+XCFJETe8b+dcrY038",
	"/R/XQgGXcA6O9ddilBnnC3HnC2VPiRoyDYCyZ6G5VMEHSfKfOo/FDiYFSI6/zQjE6A6lAk0EzS1pamXB",
	"uL+/37FGEBSGuUQF88zrjHWVv6vmnkyD/Z29nT1p1lugDC7w4HhwKH8aDhaQz+QR7MJ4jrNdiGP1IEKY",
	"B4fewlvE7KRSBEzOTyfi/7rmOMzA1ekbcEJiBK4U7shpKTRZnQcn0mwr+v33EsnMFXq4lyRehVhN0QQj",
	"tis666JTurSQfNGRCznY2wsPotvpAbRv6cNwMG7T6SWMrUnHe/vNXT5kcMlngpAjaaqW/Q7b9iMU/1t1",
	"+q0NfOcZRzSDqXwMpSpzliQ4k0vEnF+mTu19/l6l3nH+GkgcGHwSnQw+LLDO/eF9SinHCU0uz1Vogrzt",
	"M3DmlsF38OA14pM0nVyeiw5uHGtIYSma7GrdXaLQpfhZqi4NnQidduugbQXdOllydcfZ4BS9U9kyW7aW",
	"AT9C6ehBAmrjXSr4iig93hs3d3pH+CuyzDZJAwZl61HVUIRpJUOr/UxR8TNFVpfn4BatrHSA4oqtI4JJ",
	"HKuD+E4JoD8uVynnUx9OLzcnzOv32yL6j8Ttx3svmjudkCxJsZJrN0QaHTHZQyPli2P3SyHGPijSSRH3",
	"uueJ32umdsRhl4ZU355kZI373d0HmyDx6t0w9kQSEJnBStu0nsQ1UEI4nbzMx/W7Cz6tsFaIP1uUbYey",
	"e/24/BOTZm6VHO0XXZYeJFY1M/sxXdV3i8FhDO4l6ahtbdBtfacYbwWbMJWUED3I7C3xZRmrzPf13F/m",
	"6DNvqC7tWAg4NI5LQx08a3tMwSwG1kN05Y4QU7xUiNVdS7aAuFgoz9VeYny/zsrod71aoEfWUnrRrCoO",
	"iueoK2OJu3fqq9m3WTontOtuicPs1qfg2P1QQVLKFaH8gsbtNiHv8XL1CqM07isXiGGuKcTpN5MNNnzV",
	"O0yn1nhXTpBSy8ss3S7A0SaKyobgosy/ijxQPhPfmZv356ex8z0eUbMuhMLWphH7gJ6sBO3Bfw9xtTAC",
	"2gPpyC+bYALvIa5p5evTSB+R1YK5wULn26ytxNpoiiuh005rbt/R7hZA28v3frauOq2DsV9BAdwazx7b",
	"eBZ+NSm45Zoih93ivNaW9iSxsdvdvr3ag3jm+mZX7/wG65k9QWsL2lsS42T19fD2m0nSjyZaeIxhb01e",
	"pa1s0cYaVs++C9nCLmTd6j3E8Uny09yiVmnM63j/nI4hPa1x36HG2dw8g13NZQVj63jL0miG71Dcrdct",
	"zjr2UH6y5gw7dnuFU16Y0Vp3niNOccQ69zOk27mjCbl71XeARKecXrK2rf/ACeJ4jtq213EObZvnhfnb",
	"ga4ZZsvmMq1CPxnN7PCTFdDErWHfGMyTfd5cTk47JZ3J8lBB+WyNq0iWdniCN1Efic1sk9yztZxzzUhn",
	"MX56OosPa+vIobVh0qUDY+EJIL7q5Va6+TFskhbMa3kN6nGqOPiT6RTjgxZ4rivHanzdvL+hg5s1vL6q",
	"kOzCO4hTIQX8c4EXKMVZjZLyQefPokKUQncImC4AZwnREWrqRigqzlSVEzOjhu4yn/dnetvSi3oHv9ZT",
	"9zqSU34k+Vk8RVFK4XROECDfDCdr1lJdMK3UfaN0NKr9ul0R+mmHlDEZe7xkhsBkCgiSuFecj9J0g7ca",
	"iG2ISK7NnZ+yrb3gW9kLvju9dn3VU5PYk1VADf+SjLKeS7Xgmis4T9ezlMpU6/8zefsHUKntSvL6jpdb",
	"CgD/R0z9wzDKdVBWrPSJ4ms7nOn6kqX74rSo/ecqoRoHFyEcVMP8qGjYT89UWLj11t78+1QJHXuw4Y4+",
	"MA5RhV5xbXdtVfHN5xqzjuHkB3nUbe4Ukfkc87es41wJoRFS27i2K873Tl8dL5FvaasxLj9tTTUNrj/m",
	"0jIK459OBbShTXGIRyVyLIEQ0hufNvmt/djc98HRp1StI+g93Vex9rQWeAKTFR1z8gCY5SUEZIWqVWkK",
	"UxZCZ3e5IfFK5lXTSTwByWQ+rzmhyC7DaZUGU8N+zGReNiuTuG0XUonofiFJ8n9J9uuwbCuSY0FqpXIT",
	"Vy5TBT505tCP2SuZiVZVocaJKucPM5mRRuWhUanhSKK+CdiWTKfkIgsEaR67wJDO8sQcxiFrJX/MPmZf",
	"PmYAfJTF9j8OjsHHga/dYKhaFWQg2squ4memGoneJEk+DsTvDx+zh49Z7ZPjlnlt/n1yY8+TP97LUFdp",
	"40d6Ssp92tZ4SrL1hd0YLVAWw7rIqddl3UDnwJLZ9NzK6SrdthpTJuD0m3BOZQOU8d4+B1vx5anZvrc+",
	"b1uft5/G5+0nu0I3a/WFeZ7W/HJS18sa11xRQL2D24R5LSGZrAdPEo6kxK3n9haCDynpZxYA28uu72W3",
	"uVwG6xCzdZZP2P8iTXNKsKhrp7vNOnfCaZU4LZ80d2qKSJbg6ZKiWL9pJtrzD8rsJPW2a+M8siXKko/G",
	"Nia0pYHYwqCWcaGVi0Y+N3rQmRPtxlSgfc0Vs0Xl1qjcntebTX26jF4gp4WTOZ5qXpujpecRvj5gwcPK",
	"/WELDfzcNiVuaaCOBnqaEnMS+Fnf/79tCESYDjrEP0zimNXTU1kuciK5YTA2SIdIpHC6pa1vQVvbvDJ9",
	"aKuWHHqoKBQxTigKl4x4rxpsxrtGD7Z93w+512y9ZL7tM5TB9h7PUH9jCncxY8sWWRaMHfB3TCFQfcBi",
	"maa6PiqAshAY098zxmEWoSG4gULBIlke5cQQpNEMcETnPv1JdD9XEH0VX86/zXxXEq61VZXf3fGerCPJ",
	"46BL+KpQeV+dm4I9tDcvi5tBFqiXDii6fp0aU8Fr/c0yuGAzwgGHN6nXCHBx9XIlr5K+90TfF44LCeGV",
	"BtBGvhBXPnliJiOjSrPiGEkipHBdLawWx7IbAmmMs2lrbnl1+mb3lTjge0Jvd/9U5bH0W4osB5iBhUmz",
	"XEGjq9M3p7mU1A2VWHz7B8ymSzjtaJ5n8W0O79rM8CLfsKvTN0841UQ9OtTjnFWCtT62RyiSugTrfcsS",
	"rKoCqyyLqiq5ChgTE3gB09Rookzza+nUBqMIMS/CVurGbuAK74V4ZUCeMOrl52qwozjyJM/zYB3zh8ox",
	"h5HTdAsi5x+Y8SLs7NLMoqN61A1fm6hWJeYyHb/X8J6fJSmz2ecnRy4CT4GFZd0ynQBo+nbAbNW1SIby",
	"Y6Q60fBuTWSPknrZCrVtZrqd8y2XkdRJqd+x8tm3xNthJ4Pb9u284e38sia/U63EadCpRXrbyqXeF3++",
	"vil1nYv0yYqdJdTokeB4M8xK5Tv+wZjVpq/kbcriNZ+Ewxyy4VbeVa6ybdJyFLpY/vwLYEqyKbjHfAbu",
	"Z4jPEAWEgoxwgfwrGbCmlbrdGDOl3eEMIBjNbC2/hv+ayPaf4D3r0XSwcnjEOheC3O8nnXLVi+cqGhJT",
	"Y63y4nBX2pti/k+KFqSdJ+trzIFo3ZSlUvV4jfl7MfRW/P3hxV9x8PosO8q/Oco42XBq6pL1xZofROjV",
	"y3uy7C3Hh9M6qbfJD7OCVa6wq+sjlR1YJmEHFumS+YOhXkcRWK9u/ThrLwpvPSbrxeMyxnb1lKxgPCc1",
	"fFSZyp4EPm+trI/giNgCWx3J8vNqVxY5D3obFhmlL0Vr8AatjBBp3Ao/Lvf2Do4AodPwM8DnVZ+q5t/w",
	"HUACzC4J42slPc9HUjuxTW/xaM8L7VHUEIRsHSCIjs8P+eQKywNvCt+OCL6CVrX1ed2w9lbCqTLWNqhv",
	"NfioDGQ/LjLutWe7W1G3izNNLbb1TYimEvXYpXStmWRmA+WKAzjZKZKl9cqVBhnD00w0Wmb632beDHEp",
	"eWvjl5zcm4sMxrFVwq8pDZm9LPHhL/nT/sfBUH08+Dj4pFOTudNQNCd3aO2ZDovxfanPlBbzoxF7b2Gt",
	"hYL8tO6w7+FtaS2BjKGpxPjGR6ZrmRQJvJY55v22JT11wAnvysz0fRJJ7/IW/WrVPOkqF70kDoM/38w+",
	"/AivWTZR2ZYE9/c2ldIc8nS8COsNYXpXfxjDgYZ3a9p6LA3fRqQajKzeID0Uegdp3bskmKf+WyLs8Hso",
	"y7/N8dNT1W+J2cO15SAP7r5GfIu4G8zok18DT/StuAUWOm6NNYJF04NyDZOu8ZyUquL3jfJftwreukq4",
	"3sv136i9pLPVyzesl29GjLJKxbZzBRW0aYJF3UpY0oYnPjv0HMEM3CAA41iaFGU1BazDj+9xmgKdXRjA",
	"bOXmQ/GPh4VeQxGMV2ABqQBjp74erYDtFaF9OcXPno7om1oSYHLVyZig2newJwicfrcJ91gHn56sUOAh",
	"eEjt6rqc2MRuXeQb4lbteZQRWUjiqfLeV+YohOx+fulbSTssLjxtz/NKUckeFzxvG8qhLtVpWZ6vcdFU",
	"Bvbr7xfnf5or8acoIc3h1Fvcohd/uH7qESnXbjWD67y+WV3Ev4e+ay421em6R+rAH6o+7bWQ3dZwBbyG",
	"0x+vwtW3t/dPq9jr3lpdMwVcr12M9nqbJXNbhPYnK0LrJbSOJWcLHB9OGCMRFvvo6k/V0rPX/oqz19tK",
	"s9tKsz+yM2XjzSU0sS4ql2zfXetS02wVr8dUvNRhdjJHFl06KGGq07vOqpjqd745byeNVk9cszKk5VpX",
	"WulXPmJuoWKJbj+MM5QCd+sL9bi+UF78q9wzI2MSH+EsIbutrOAZnCOTLJotUCRz6uS4KzSlkpXRI8TJ",
	"tpMsNu6R51lCtpdRzpJZz+qvyoC7GQOZvIes43niXitVzG4VS1ums92WLutqOrP/bhmdDFgBIipTkk4Y",
	"L8vsE8pN4RG20478tqQnSIid9zVNsx6yF+sq5LFOgmRfqXZ9brFlFO0otw3f2IWcU3yz5C1qlYh7mZmL",
	"ueinZi6pi9rXvri+z+ozp+Uq46SA5+fnGWvQgrVPT9TLs4yB3XF/uUgJjMM5KCZxDHRbcLMCqjnOpgCC",
	"k6s/QYI9dUo+yEZPx/xRVdCMyfz4y2C+TDleQMp3E0LnoxhyKH5m0QzN5b8WVOwexwr9xYaKi07+m9A5",
	"5IPjwQ3OxPEPB3y1QIPjAeMUZ1OJGvoXXWPk4eGhVfDlVtdrk9LFUFlVBq3R9voHu3RMlN3TIrGtaL2N",
	"dgnaLlo+OknfvK5YmytFW5TdnAj0ZPUADyqGrMEtw1i6BbB8Q3vwzxa/orZy/fAVH0Vso1ceJXolRGq+",
	"xPs6I3yQ0ozLT2Oy/e3tsbG61E3PQ1tq+5bUVqGYHpqHFR/WOpGLtGnlISHeQNJybFenKDFnxPJILePD",
	"tOXHQNnbuL4ND3tMlwzW0R+jq51eo/RGIsS+efaYb+5Q4Sf5sqtgiRGFTYoOG+rEfJwQmYJDlB/AwQ1K",
	"STaVaevCPGLLGjavbqr889vcChI/GwjEvamXDE7R4PiLHBhFS4r5SiLjZIHfoNVkyWeD478+iVNVv5i/",
	"XiJIEc2/fxLdBZwKlV1aygiYEcYLghkMB0uaDo4Hu3CBd/d39iTauJ3UsoH1407ebcb54nh3NyURTMXI",
	"x4d7e3vFWJ/y1VaeDS7PZc7HSJexzGIwhxmcItcl+er0DZhcnoM3aCXoNJOG70H+SxXYduNaY7k/9x3Q",
	"cjjT45of1hyxSPDljGt+XmP0qTNoeO0yZejNSmJykoxkGuaip0oLKLrqHxTbt35QiP3w6eH/BQAA///v",
	"y2fzEu0BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
